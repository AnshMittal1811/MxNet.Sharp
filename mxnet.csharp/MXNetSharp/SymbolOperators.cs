using Microsoft.FSharp.Collections;
using Microsoft.FSharp.Core;
using MXNetSharp.SymbolArgument;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace MXNetSharp
{
	[CompilationMapping(/*Could not decode attribute arguments.*/)]
	public static class SymbolOperators
	{
		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class CustomFunction : SymbolOperator
		{
			internal CustomFunction(Arguments<Symbol> operatorArguments)
				: base("_CustomFunction", operatorArguments)
			{
			}

			public static CustomFunction CreateFromArguments(Arguments<Symbol> args)
			{
				return new CustomFunction(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new CustomFunction(OperatorArguments.AddReplace(args));
			}

			public CustomFunction()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_0040684()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class CachedOp : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			internal CachedOp(Arguments<Symbol> operatorArguments)
				: base("_CachedOp", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static CachedOp CreateFromArguments(Arguments<Symbol> args)
			{
				return new CachedOp(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new CachedOp(OperatorArguments.AddReplace(args));
			}

			public CachedOp(params Symbol[] data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", data)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public CachedOp With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_0040708_002D1(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_0040707_002D2(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new CachedOp(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Cvimread : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int FlagDefault => 1;

			public static bool ToRgbDefault => true;

			public string Filename
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("filename");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (string)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<string, string>((PrintfFormat<string, Unit, string, string>)(object)new PrintfFormat<string, Unit, string, string, Unit>("Required parameter filename is missing"));
				}
			}

			public int Flag => operatorArguments.GetParameter("flag", FlagDefault);

			public bool ToRgb => operatorArguments.GetParameter("to_rgb", ToRgbDefault);

			internal Cvimread(Arguments<Symbol> operatorArguments)
				: base("_cvimread", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Cvimread CreateFromArguments(Arguments<Symbol> args)
			{
				return new Cvimread(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Cvimread(OperatorArguments.AddReplace(args));
			}

			public Cvimread(string filename, [Optional] [OptionalArgument] FSharpOption<int> flag, [Optional] [OptionalArgument] FSharpOption<bool> toRgb)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("filename", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)filename))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("flag", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_0040726_002D3(), flag))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("to_rgb", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_0040727_002D4(), toRgb))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public Cvimread With([Optional] [OptionalArgument] FSharpOption<string> filename, [Optional] [OptionalArgument] FSharpOption<int> flag, [Optional] [OptionalArgument] FSharpOption<bool> toRgb)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_0040754_002D5(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<string, Tuple<string, OpArg<Symbol>>>((FSharpFunc<string, Tuple<string, OpArg<Symbol>>>)new operatorArguments_0040751_002D6(), filename), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_0040752_002D7(), flag), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_0040753_002D8(), toRgb), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new Cvimread(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NoGradient : SymbolOperator
		{
			internal NoGradient(Arguments<Symbol> operatorArguments)
				: base("_NoGradient", operatorArguments)
			{
			}

			public static NoGradient CreateFromArguments(Arguments<Symbol> args)
			{
				return new NoGradient(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NoGradient(OperatorArguments.AddReplace(args));
			}

			public NoGradient()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_0040763_002D9()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BatchNormV1 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double EpsDefault => 0.001;

			public static double MomentumDefault => 0.9;

			public static bool FixGammaDefault => true;

			public static bool UseGlobalStatsDefault => false;

			public static bool OutputMeanVarDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Gamma => operatorArguments.GetInput("gamma");

			public Symbol Beta => operatorArguments.GetInput("beta");

			public double Eps => operatorArguments.GetParameter("eps", EpsDefault);

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public bool FixGamma => operatorArguments.GetParameter("fix_gamma", FixGammaDefault);

			public bool UseGlobalStats => operatorArguments.GetParameter("use_global_stats", UseGlobalStatsDefault);

			public bool OutputMeanVar => operatorArguments.GetParameter("output_mean_var", OutputMeanVarDefault);

			internal BatchNormV1(Arguments<Symbol> operatorArguments)
				: base("BatchNorm_v1", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BatchNormV1 CreateFromArguments(Arguments<Symbol> args)
			{
				return new BatchNormV1(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BatchNormV1(OperatorArguments.AddReplace(args));
			}

			public BatchNormV1([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<bool> fixGamma, [Optional] [OptionalArgument] FSharpOption<bool> useGlobalStats, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol gamma2 = Operators.DefaultArg<Symbol>(gamma, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(beta, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(gamma2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_0040844_002D10(), eps))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_0040845_002D11(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("fix_gamma", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_0040846_002D12(), fixGamma))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_global_stats", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_0040847_002D13(), useGlobalStats))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_0040848_002D14(), outputMeanVar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))));
			}

			public BatchNormV1 With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<bool> fixGamma, [Optional] [OptionalArgument] FSharpOption<bool> useGlobalStats, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_0040909_002D15(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_0040901_002D16(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_0040902_002D17(), gamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_0040903_002D18(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_0040904_002D19(), eps), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_0040905_002D20(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_0040906_002D21(), fixGamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_0040907_002D22(), useGlobalStats), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_0040908_002D23(), outputMeanVar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new BatchNormV1(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MpAdamwUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double Beta1Default => 0.9;

			public static double Beta2Default => 0.999;

			public static double EpsilonDefault => 1E-08;

			public static double WdDefault => 0.0;

			public static double ClipGradientDefault => -1.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol Mean => operatorArguments.GetInput("mean");

			public Symbol Var => operatorArguments.GetInput("var");

			public Symbol Weight32 => operatorArguments.GetInput("weight32");

			public Symbol RescaleGrad => operatorArguments.GetInput("rescale_grad");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Eta
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("eta");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter eta is missing"));
				}
			}

			public double Beta1 => operatorArguments.GetParameter("beta1", Beta1Default);

			public double Beta2 => operatorArguments.GetParameter("beta2", Beta2Default);

			public double Epsilon => operatorArguments.GetParameter("epsilon", EpsilonDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			internal MpAdamwUpdate(Arguments<Symbol> operatorArguments)
				: base("_mp_adamw_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MpAdamwUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new MpAdamwUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MpAdamwUpdate(OperatorArguments.AddReplace(args));
			}

			public MpAdamwUpdate(Symbol weight, Symbol grad, Symbol mean, Symbol var, Symbol weight32, Symbol rescaleGrad, double lr, double eta, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(mean)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("var", OpArg<Symbol>.NewInput(var)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight32", OpArg<Symbol>.NewInput(weight32)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewInput(rescaleGrad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)eta))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_0040978_002D24(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_0040979_002D25(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_0040980_002D26(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_0040981_002D27(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_0040982_002D28(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))))))
			{
			}

			public MpAdamwUpdate(double lr, double eta, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mean, [Optional] [OptionalArgument] FSharpOption<Symbol> var, [Optional] [OptionalArgument] FSharpOption<Symbol> weight32, [Optional] [OptionalArgument] FSharpOption<Symbol> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				Symbol weight33 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol mean2 = Operators.DefaultArg<Symbol>(mean, (Symbol)new ImplicitVariable());
				Symbol var2 = Operators.DefaultArg<Symbol>(var, (Symbol)new ImplicitVariable());
				Symbol weight34 = Operators.DefaultArg<Symbol>(weight32, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rescaleGrad, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight33)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(mean2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("var", OpArg<Symbol>.NewInput(var2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight32", OpArg<Symbol>.NewInput(weight34)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)eta))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401053_002D29(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401054_002D30(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401055_002D31(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401056_002D32(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401057_002D33(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))))));
			}

			public MpAdamwUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mean, [Optional] [OptionalArgument] FSharpOption<Symbol> var, [Optional] [OptionalArgument] FSharpOption<Symbol> weight32, [Optional] [OptionalArgument] FSharpOption<Symbol> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> eta, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00401143_002D34(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401130_002D35(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401131_002D36(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401132_002D37(), mean), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401133_002D38(), var), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401134_002D39(), weight32), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401135_002D40(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401136_002D41(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401137_002D42(), eta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401138_002D43(), beta1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401139_002D44(), beta2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401140_002D45(), epsilon), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401141_002D46(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401142_002D47(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))))))));
				return new MpAdamwUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class AdamwUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double Beta1Default => 0.9;

			public static double Beta2Default => 0.999;

			public static double EpsilonDefault => 1E-08;

			public static double WdDefault => 0.0;

			public static double ClipGradientDefault => -1.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol Mean => operatorArguments.GetInput("mean");

			public Symbol Var => operatorArguments.GetInput("var");

			public Symbol RescaleGrad => operatorArguments.GetInput("rescale_grad");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Eta
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("eta");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter eta is missing"));
				}
			}

			public double Beta1 => operatorArguments.GetParameter("beta1", Beta1Default);

			public double Beta2 => operatorArguments.GetParameter("beta2", Beta2Default);

			public double Epsilon => operatorArguments.GetParameter("epsilon", EpsilonDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			internal AdamwUpdate(Arguments<Symbol> operatorArguments)
				: base("_adamw_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static AdamwUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new AdamwUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new AdamwUpdate(OperatorArguments.AddReplace(args));
			}

			public AdamwUpdate(Symbol weight, Symbol grad, Symbol mean, Symbol var, Symbol rescaleGrad, double lr, double eta, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(mean)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("var", OpArg<Symbol>.NewInput(var)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewInput(rescaleGrad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)eta))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401207_002D48(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401208_002D49(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401209_002D50(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401210_002D51(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401211_002D52(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))
			{
			}

			public AdamwUpdate(double lr, double eta, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mean, [Optional] [OptionalArgument] FSharpOption<Symbol> var, [Optional] [OptionalArgument] FSharpOption<Symbol> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol mean2 = Operators.DefaultArg<Symbol>(mean, (Symbol)new ImplicitVariable());
				Symbol var2 = Operators.DefaultArg<Symbol>(var, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rescaleGrad, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(mean2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("var", OpArg<Symbol>.NewInput(var2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)eta))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401276_002D53(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401277_002D54(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401278_002D55(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401279_002D56(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401280_002D57(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))));
			}

			public AdamwUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mean, [Optional] [OptionalArgument] FSharpOption<Symbol> var, [Optional] [OptionalArgument] FSharpOption<Symbol> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> eta, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00401361_002D58(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401349_002D59(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401350_002D60(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401351_002D61(), mean), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401352_002D62(), var), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401353_002D63(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401354_002D64(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401355_002D65(), eta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401356_002D66(), beta1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401357_002D67(), beta2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401358_002D68(), epsilon), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401359_002D69(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401360_002D70(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))));
				return new AdamwUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MultiAdamwUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double Beta1Default => 0.9;

			public static double Beta2Default => 0.999;

			public static double EpsilonDefault => 1E-08;

			public static double ClipGradientDefault => -1.0;

			public static int NumWeightsDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public IEnumerable<double> Lrs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lrs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter lrs is missing"));
				}
			}

			public IEnumerable<double> Wds
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("wds");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter wds is missing"));
				}
			}

			public IEnumerable<double> Etas
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("etas");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter etas is missing"));
				}
			}

			public double Beta1 => operatorArguments.GetParameter("beta1", Beta1Default);

			public double Beta2 => operatorArguments.GetParameter("beta2", Beta2Default);

			public double Epsilon => operatorArguments.GetParameter("epsilon", EpsilonDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public int NumWeights => operatorArguments.GetParameter("num_weights", NumWeightsDefault);

			internal MultiAdamwUpdate(Arguments<Symbol> operatorArguments)
				: base("_multi_adamw_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MultiAdamwUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new MultiAdamwUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MultiAdamwUpdate(OperatorArguments.AddReplace(args));
			}

			public MultiAdamwUpdate(IEnumerable<Symbol> data, IEnumerable<double> lrs, IEnumerable<double> wds, IEnumerable<double> etas, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lrs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wds))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("etas", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)etas))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401418_002D71(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401419_002D72(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401420_002D73(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401421_002D74(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00401422_002D75(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))
			{
			}

			public MultiAdamwUpdate(IEnumerable<double> lrs, IEnumerable<double> wds, IEnumerable<double> etas, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00401469(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lrs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wds))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("etas", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)etas))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401476_002D76(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401477_002D77(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401478_002D78(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401479_002D79(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00401480_002D80(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))
			{
			}

			public MultiAdamwUpdate With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> lrs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> wds, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> etas, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00401546_002D81(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401537_002D82(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401538_002D83(), lrs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401539_002D84(), wds), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401540_002D85(), etas), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401541_002D86(), beta1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401542_002D87(), beta2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401543_002D88(), epsilon), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401544_002D89(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401545_002D90(), numWeights), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))));
				return new MultiAdamwUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MultiMpAdamwUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double Beta1Default => 0.9;

			public static double Beta2Default => 0.999;

			public static double EpsilonDefault => 1E-08;

			public static double ClipGradientDefault => -1.0;

			public static int NumWeightsDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public IEnumerable<double> Lrs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lrs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter lrs is missing"));
				}
			}

			public IEnumerable<double> Wds
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("wds");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter wds is missing"));
				}
			}

			public IEnumerable<double> Etas
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("etas");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter etas is missing"));
				}
			}

			public double Beta1 => operatorArguments.GetParameter("beta1", Beta1Default);

			public double Beta2 => operatorArguments.GetParameter("beta2", Beta2Default);

			public double Epsilon => operatorArguments.GetParameter("epsilon", EpsilonDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public int NumWeights => operatorArguments.GetParameter("num_weights", NumWeightsDefault);

			internal MultiMpAdamwUpdate(Arguments<Symbol> operatorArguments)
				: base("_multi_mp_adamw_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MultiMpAdamwUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new MultiMpAdamwUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MultiMpAdamwUpdate(OperatorArguments.AddReplace(args));
			}

			public MultiMpAdamwUpdate(IEnumerable<Symbol> data, IEnumerable<double> lrs, IEnumerable<double> wds, IEnumerable<double> etas, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lrs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wds))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("etas", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)etas))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401603_002D91(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401604_002D92(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401605_002D93(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401606_002D94(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00401607_002D95(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))
			{
			}

			public MultiMpAdamwUpdate(IEnumerable<double> lrs, IEnumerable<double> wds, IEnumerable<double> etas, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00401654_002D1(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lrs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wds))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("etas", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)etas))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401661_002D96(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401662_002D97(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401663_002D98(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401664_002D99(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00401665_002D100(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))
			{
			}

			public MultiMpAdamwUpdate With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> lrs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> wds, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> etas, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00401731_002D101(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401722_002D102(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401723_002D103(), lrs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401724_002D104(), wds), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401725_002D105(), etas), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401726_002D106(), beta1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401727_002D107(), beta2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401728_002D108(), epsilon), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401729_002D109(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401730_002D110(), numWeights), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))));
				return new MultiMpAdamwUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribAdaptiveAvgPooling2D : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] OutputSizeDefault => new int[0];

			public Symbol Data => operatorArguments.GetInput("data");

			public int[] OutputSize => operatorArguments.GetParameter("output_size", OutputSizeDefault);

			internal ContribAdaptiveAvgPooling2D(Arguments<Symbol> operatorArguments)
				: base("_contrib_AdaptiveAvgPooling2D", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribAdaptiveAvgPooling2D CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribAdaptiveAvgPooling2D(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribAdaptiveAvgPooling2D(OperatorArguments.AddReplace(args));
			}

			public ContribAdaptiveAvgPooling2D([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> outputSize)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_size", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00401759_002D111(), outputSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ContribAdaptiveAvgPooling2D With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> outputSize)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00401778_002D112(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401776_002D113(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401777_002D114(), outputSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ContribAdaptiveAvgPooling2D(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MultiAllFinite : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int NumArraysDefault => 1;

			public static bool InitOutputDefault => true;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int NumArrays => operatorArguments.GetParameter("num_arrays", NumArraysDefault);

			public bool InitOutput => operatorArguments.GetParameter("init_output", InitOutputDefault);

			internal MultiAllFinite(Arguments<Symbol> operatorArguments)
				: base("multi_all_finite", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MultiAllFinite CreateFromArguments(Arguments<Symbol> args)
			{
				return new MultiAllFinite(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MultiAllFinite(OperatorArguments.AddReplace(args));
			}

			public MultiAllFinite([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> numArrays, [Optional] [OptionalArgument] FSharpOption<bool> initOutput)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00401795_002D2(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_arrays", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00401799_002D115(), numArrays))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("init_output", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00401800_002D116(), initOutput))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public MultiAllFinite With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> numArrays, [Optional] [OptionalArgument] FSharpOption<bool> initOutput)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00401827_002D117(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401824_002D118(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401825_002D119(), numArrays), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401826_002D120(), initOutput), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new MultiAllFinite(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribAllclose : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double RtolDefault => 1E-05;

			public static double AtolDefault => 1E-08;

			public static bool EqualNanDefault => true;

			public Symbol A => operatorArguments.GetInput("a");

			public Symbol B => operatorArguments.GetInput("b");

			public double Rtol => operatorArguments.GetParameter("rtol", RtolDefault);

			public double Atol => operatorArguments.GetParameter("atol", AtolDefault);

			public bool EqualNan => operatorArguments.GetParameter("equal_nan", EqualNanDefault);

			internal ContribAllclose(Arguments<Symbol> operatorArguments)
				: base("_contrib_allclose", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribAllclose CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribAllclose(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribAllclose(OperatorArguments.AddReplace(args));
			}

			public ContribAllclose([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> b, [Optional] [OptionalArgument] FSharpOption<double> rtol, [Optional] [OptionalArgument] FSharpOption<double> atol, [Optional] [OptionalArgument] FSharpOption<bool> equalNan)
			{
				Symbol a2 = Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(b, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rtol", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401875_002D121(), rtol))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("atol", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401876_002D122(), atol))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("equal_nan", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00401877_002D123(), equalNan))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))));
			}

			public ContribAllclose With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> b, [Optional] [OptionalArgument] FSharpOption<double> rtol, [Optional] [OptionalArgument] FSharpOption<double> atol, [Optional] [OptionalArgument] FSharpOption<bool> equalNan)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00401917_002D124(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401912_002D125(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401913_002D126(), b), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401914_002D127(), rtol), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401915_002D128(), atol), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00401916_002D129(), equalNan), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new ContribAllclose(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribBilinearResize2D : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int HeightDefault => 1;

			public static int WidthDefault => 1;

			public static FSharpOption<double> ScaleHeightDefault => null;

			public static FSharpOption<double> ScaleWidthDefault => null;

			public static GeneratedArgumentTypes.ContribBilinearResize2DMode ModeDefault => GeneratedArgumentTypes.ContribBilinearResize2DMode.Size;

			public static bool AlignCornersDefault => true;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Like => operatorArguments.GetInput("like");

			public int Height => operatorArguments.GetParameter("height", HeightDefault);

			public int Width => operatorArguments.GetParameter("width", WidthDefault);

			public FSharpOption<double> ScaleHeight => operatorArguments.GetParameter<FSharpOption<double>>("scale_height", ScaleHeightDefault);

			public FSharpOption<double> ScaleWidth => operatorArguments.GetParameter<FSharpOption<double>>("scale_width", ScaleWidthDefault);

			public GeneratedArgumentTypes.ContribBilinearResize2DMode Mode => operatorArguments.GetParameter("mode", ModeDefault);

			public bool AlignCorners => operatorArguments.GetParameter("align_corners", AlignCornersDefault);

			internal ContribBilinearResize2D(Arguments<Symbol> operatorArguments)
				: base("_contrib_BilinearResize2D", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribBilinearResize2D CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribBilinearResize2D(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribBilinearResize2D(OperatorArguments.AddReplace(args));
			}

			public ContribBilinearResize2D([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> like, [Optional] [OptionalArgument] FSharpOption<int> height, [Optional] [OptionalArgument] FSharpOption<int> width, [Optional] [OptionalArgument] FSharpOption<double> scaleHeight, [Optional] [OptionalArgument] FSharpOption<double> scaleWidth, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribBilinearResize2DMode> mode, [Optional] [OptionalArgument] FSharpOption<bool> alignCorners)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(like, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("like", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("height", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00401958_002D130(), height))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("width", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00401959_002D131(), width))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scale_height", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401960_002D132(), scaleHeight))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scale_width", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00401961_002D133(), scaleWidth))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ContribBilinearResize2DMode, object>((FSharpFunc<GeneratedArgumentTypes.ContribBilinearResize2DMode, object>)new operatorArguments_00401962_002D134(), mode))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("align_corners", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00401963_002D135(), alignCorners))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))));
			}

			public ContribBilinearResize2D With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> like, [Optional] [OptionalArgument] FSharpOption<int> height, [Optional] [OptionalArgument] FSharpOption<int> width, [Optional] [OptionalArgument] FSharpOption<double> scaleHeight, [Optional] [OptionalArgument] FSharpOption<double> scaleWidth, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribBilinearResize2DMode> mode, [Optional] [OptionalArgument] FSharpOption<bool> alignCorners)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00402027_002D136(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402019_002D137(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402020_002D138(), like), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402021_002D139(), height), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402022_002D140(), width), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402023_002D141(), scaleHeight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402024_002D142(), scaleWidth), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ContribBilinearResize2DMode, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ContribBilinearResize2DMode, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402025_002D143(), mode), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402026_002D144(), alignCorners), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new ContribBilinearResize2D(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribBooleanMask : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int AxisDefault => 0;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Index => operatorArguments.GetInput("index");

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			internal ContribBooleanMask(Arguments<Symbol> operatorArguments)
				: base("_contrib_boolean_mask", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribBooleanMask CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribBooleanMask(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribBooleanMask(OperatorArguments.AddReplace(args));
			}

			public ContribBooleanMask([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> index, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(index, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("index", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00402062_002D145(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public ContribBooleanMask With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> index, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00402086_002D146(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402083_002D147(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402084_002D148(), index), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402085_002D149(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ContribBooleanMask(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribBoxNms : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double OverlapThreshDefault => 0.5;

			public static double ValidThreshDefault => 0.0;

			public static int TopkDefault => -1;

			public static int CoordStartDefault => 2;

			public static int ScoreIndexDefault => 1;

			public static int IdIndexDefault => -1;

			public static int BackgroundIdDefault => -1;

			public static bool ForceSuppressDefault => false;

			public static GeneratedArgumentTypes.Format InFormatDefault => GeneratedArgumentTypes.Format.Corner;

			public static GeneratedArgumentTypes.Format OutFormatDefault => GeneratedArgumentTypes.Format.Corner;

			public Symbol Data => operatorArguments.GetInput("data");

			public double OverlapThresh => operatorArguments.GetParameter("overlap_thresh", OverlapThreshDefault);

			public double ValidThresh => operatorArguments.GetParameter("valid_thresh", ValidThreshDefault);

			public int Topk => operatorArguments.GetParameter("topk", TopkDefault);

			public int CoordStart => operatorArguments.GetParameter("coord_start", CoordStartDefault);

			public int ScoreIndex => operatorArguments.GetParameter("score_index", ScoreIndexDefault);

			public int IdIndex => operatorArguments.GetParameter("id_index", IdIndexDefault);

			public int BackgroundId => operatorArguments.GetParameter("background_id", BackgroundIdDefault);

			public bool ForceSuppress => operatorArguments.GetParameter("force_suppress", ForceSuppressDefault);

			public GeneratedArgumentTypes.Format InFormat => operatorArguments.GetParameter("in_format", InFormatDefault);

			public GeneratedArgumentTypes.Format OutFormat => operatorArguments.GetParameter("out_format", OutFormatDefault);

			internal ContribBoxNms(Arguments<Symbol> operatorArguments)
				: base("_contrib_box_nms", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribBoxNms CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribBoxNms(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribBoxNms(OperatorArguments.AddReplace(args));
			}

			public ContribBoxNms([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> overlapThresh, [Optional] [OptionalArgument] FSharpOption<double> validThresh, [Optional] [OptionalArgument] FSharpOption<int> topk, [Optional] [OptionalArgument] FSharpOption<int> coordStart, [Optional] [OptionalArgument] FSharpOption<int> scoreIndex, [Optional] [OptionalArgument] FSharpOption<int> idIndex, [Optional] [OptionalArgument] FSharpOption<int> backgroundId, [Optional] [OptionalArgument] FSharpOption<bool> forceSuppress, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.Format> inFormat, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.Format> outFormat)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("overlap_thresh", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00402179_002D150(), overlapThresh))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("valid_thresh", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00402180_002D151(), validThresh))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("topk", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00402181_002D152(), topk))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("coord_start", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00402182_002D153(), coordStart))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("score_index", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00402183_002D154(), scoreIndex))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("id_index", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00402184_002D155(), idIndex))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("background_id", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00402185_002D156(), backgroundId))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("force_suppress", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00402186_002D157(), forceSuppress))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("in_format", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.Format, object>((FSharpFunc<GeneratedArgumentTypes.Format, object>)new operatorArguments_00402187_002D158(), inFormat))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("out_format", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.Format, object>((FSharpFunc<GeneratedArgumentTypes.Format, object>)new operatorArguments_00402188_002D159(), outFormat))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))))
			{
			}

			public ContribBoxNms With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> overlapThresh, [Optional] [OptionalArgument] FSharpOption<double> validThresh, [Optional] [OptionalArgument] FSharpOption<int> topk, [Optional] [OptionalArgument] FSharpOption<int> coordStart, [Optional] [OptionalArgument] FSharpOption<int> scoreIndex, [Optional] [OptionalArgument] FSharpOption<int> idIndex, [Optional] [OptionalArgument] FSharpOption<int> backgroundId, [Optional] [OptionalArgument] FSharpOption<bool> forceSuppress, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.Format> inFormat, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.Format> outFormat)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00402285_002D160(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402274_002D161(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402275_002D162(), overlapThresh), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402276_002D163(), validThresh), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402277_002D164(), topk), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402278_002D165(), coordStart), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402279_002D166(), scoreIndex), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402280_002D167(), idIndex), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402281_002D168(), backgroundId), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402282_002D169(), forceSuppress), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.Format, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.Format, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402283_002D170(), inFormat), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.Format, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.Format, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402284_002D171(), outFormat), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))))));
				return new ContribBoxNms(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribBoxIou : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static GeneratedArgumentTypes.Format FormatDefault => GeneratedArgumentTypes.Format.Corner;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			public GeneratedArgumentTypes.Format Format => operatorArguments.GetParameter("format", FormatDefault);

			internal ContribBoxIou(Arguments<Symbol> operatorArguments)
				: base("_contrib_box_iou", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribBoxIou CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribBoxIou(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribBoxIou(OperatorArguments.AddReplace(args));
			}

			public ContribBoxIou([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.Format> format)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("format", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.Format, object>((FSharpFunc<GeneratedArgumentTypes.Format, object>)new operatorArguments_00402324_002D172(), format))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public ContribBoxIou With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.Format> format)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00402351_002D173(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402348_002D174(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402349_002D175(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.Format, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.Format, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402350_002D176(), format), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ContribBoxIou(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribBipartiteMatching : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool IsAscendDefault => false;

			public static int TopkDefault => -1;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Threshold
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("threshold");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter threshold is missing"));
				}
			}

			public bool IsAscend => operatorArguments.GetParameter("is_ascend", IsAscendDefault);

			public int Topk => operatorArguments.GetParameter("topk", TopkDefault);

			internal ContribBipartiteMatching(Arguments<Symbol> operatorArguments)
				: base("_contrib_bipartite_matching", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribBipartiteMatching CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribBipartiteMatching(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribBipartiteMatching(OperatorArguments.AddReplace(args));
			}

			public ContribBipartiteMatching(Symbol data, double threshold, [Optional] [OptionalArgument] FSharpOption<bool> isAscend, [Optional] [OptionalArgument] FSharpOption<int> topk)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("threshold", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)threshold))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_ascend", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00402394_002D177(), isAscend))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("topk", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00402395_002D178(), topk))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public ContribBipartiteMatching(double threshold, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<bool> isAscend, [Optional] [OptionalArgument] FSharpOption<int> topk)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("threshold", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)threshold))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_ascend", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00402435_002D179(), isAscend))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("topk", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00402436_002D180(), topk))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public ContribBipartiteMatching With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> threshold, [Optional] [OptionalArgument] FSharpOption<bool> isAscend, [Optional] [OptionalArgument] FSharpOption<int> topk)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00402468_002D181(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402464_002D182(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402465_002D183(), threshold), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402466_002D184(), isAscend), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402467_002D185(), topk), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new ContribBipartiteMatching(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribBoxEncode : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Samples => operatorArguments.GetInput("samples");

			public Symbol Matches => operatorArguments.GetInput("matches");

			public Symbol Anchors => operatorArguments.GetInput("anchors");

			public Symbol Refs => operatorArguments.GetInput("refs");

			public Symbol Means => operatorArguments.GetInput("means");

			public Symbol Stds => operatorArguments.GetInput("stds");

			internal ContribBoxEncode(Arguments<Symbol> operatorArguments)
				: base("_contrib_box_encode", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribBoxEncode CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribBoxEncode(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribBoxEncode(OperatorArguments.AddReplace(args));
			}

			public ContribBoxEncode([Optional] [OptionalArgument] FSharpOption<Symbol> samples, [Optional] [OptionalArgument] FSharpOption<Symbol> matches, [Optional] [OptionalArgument] FSharpOption<Symbol> anchors, [Optional] [OptionalArgument] FSharpOption<Symbol> refs, [Optional] [OptionalArgument] FSharpOption<Symbol> means, [Optional] [OptionalArgument] FSharpOption<Symbol> stds)
			{
				Symbol samples2 = Operators.DefaultArg<Symbol>(samples, (Symbol)new ImplicitVariable());
				Symbol matches2 = Operators.DefaultArg<Symbol>(matches, (Symbol)new ImplicitVariable());
				Symbol anchors2 = Operators.DefaultArg<Symbol>(anchors, (Symbol)new ImplicitVariable());
				Symbol refs2 = Operators.DefaultArg<Symbol>(refs, (Symbol)new ImplicitVariable());
				Symbol means2 = Operators.DefaultArg<Symbol>(means, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(stds, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("samples", OpArg<Symbol>.NewInput(samples2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("matches", OpArg<Symbol>.NewInput(matches2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("anchors", OpArg<Symbol>.NewInput(anchors2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("refs", OpArg<Symbol>.NewInput(refs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("means", OpArg<Symbol>.NewInput(means2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stds", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public ContribBoxEncode With([Optional] [OptionalArgument] FSharpOption<Symbol> samples, [Optional] [OptionalArgument] FSharpOption<Symbol> matches, [Optional] [OptionalArgument] FSharpOption<Symbol> anchors, [Optional] [OptionalArgument] FSharpOption<Symbol> refs, [Optional] [OptionalArgument] FSharpOption<Symbol> means, [Optional] [OptionalArgument] FSharpOption<Symbol> stds)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00402541_002D186(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402535_002D187(), samples), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402536_002D188(), matches), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402537_002D189(), anchors), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402538_002D190(), refs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402539_002D191(), means), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402540_002D192(), stds), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new ContribBoxEncode(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribBoxDecode : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double Std0Default => 1.0;

			public static double Std1Default => 1.0;

			public static double Std2Default => 1.0;

			public static double Std3Default => 1.0;

			public static double ClipDefault => -1.0;

			public static GeneratedArgumentTypes.Format FormatDefault => GeneratedArgumentTypes.Format.Center;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Anchors => operatorArguments.GetInput("anchors");

			public double Std0 => operatorArguments.GetParameter("std0", Std0Default);

			public double Std1 => operatorArguments.GetParameter("std1", Std1Default);

			public double Std2 => operatorArguments.GetParameter("std2", Std2Default);

			public double Std3 => operatorArguments.GetParameter("std3", Std3Default);

			public double Clip => operatorArguments.GetParameter("clip", ClipDefault);

			public GeneratedArgumentTypes.Format Format => operatorArguments.GetParameter("format", FormatDefault);

			internal ContribBoxDecode(Arguments<Symbol> operatorArguments)
				: base("_contrib_box_decode", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribBoxDecode CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribBoxDecode(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribBoxDecode(OperatorArguments.AddReplace(args));
			}

			public ContribBoxDecode([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> anchors, [Optional] [OptionalArgument] FSharpOption<double> std0, [Optional] [OptionalArgument] FSharpOption<double> std1, [Optional] [OptionalArgument] FSharpOption<double> std2, [Optional] [OptionalArgument] FSharpOption<double> std3, [Optional] [OptionalArgument] FSharpOption<double> clip, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.Format> format)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(anchors, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("anchors", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("std0", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00402577_002D193(), std0))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("std1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00402578_002D194(), std1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("std2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00402579_002D195(), std2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("std3", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00402580_002D196(), std3))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00402581_002D197(), clip))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("format", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.Format, object>((FSharpFunc<GeneratedArgumentTypes.Format, object>)new operatorArguments_00402582_002D198(), format))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))));
			}

			public ContribBoxDecode With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> anchors, [Optional] [OptionalArgument] FSharpOption<double> std0, [Optional] [OptionalArgument] FSharpOption<double> std1, [Optional] [OptionalArgument] FSharpOption<double> std2, [Optional] [OptionalArgument] FSharpOption<double> std3, [Optional] [OptionalArgument] FSharpOption<double> clip, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.Format> format)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00402649_002D199(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402641_002D200(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402642_002D201(), anchors), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402643_002D202(), std0), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402644_002D203(), std1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402645_002D204(), std2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402646_002D205(), std3), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402647_002D206(), clip), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.Format, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.Format, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402648_002D207(), format), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new ContribBoxDecode(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribDglCsrNeighborUniformSample : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static long NumHopsDefault => 1L;

			public static long NumNeighborDefault => 2L;

			public static long MaxNumVerticesDefault => 100L;

			public Symbol CsrMatrix => operatorArguments.GetInput("csr_matrix");

			public Symbol[] SeedArrays => operatorArguments.GetVarArg("seed_arrays");

			public long NumHops => operatorArguments.GetParameter("num_hops", NumHopsDefault);

			public long NumNeighbor => operatorArguments.GetParameter("num_neighbor", NumNeighborDefault);

			public long MaxNumVertices => operatorArguments.GetParameter("max_num_vertices", MaxNumVerticesDefault);

			internal ContribDglCsrNeighborUniformSample(Arguments<Symbol> operatorArguments)
				: base("_contrib_dgl_csr_neighbor_uniform_sample", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribDglCsrNeighborUniformSample CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribDglCsrNeighborUniformSample(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribDglCsrNeighborUniformSample(OperatorArguments.AddReplace(args));
			}

			public ContribDglCsrNeighborUniformSample([Optional] [OptionalArgument] FSharpOption<Symbol> csrMatrix, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> seedArrays, [Optional] [OptionalArgument] FSharpOption<long> numHops, [Optional] [OptionalArgument] FSharpOption<long> numNeighbor, [Optional] [OptionalArgument] FSharpOption<long> maxNumVertices)
			{
				Symbol csrMatrix2 = Operators.DefaultArg<Symbol>(csrMatrix, (Symbol)new ImplicitVariable());
				Symbol[] item = Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new seedArrays_00402709(), seedArrays), ArrayModule.Empty<Symbol>());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("csr_matrix", OpArg<Symbol>.NewInput(csrMatrix2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("seed_arrays", OpArg<Symbol>.NewVarArg("num_args", item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_hops", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_00402714_002D208(), numHops))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_neighbor", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_00402715_002D209(), numNeighbor))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_num_vertices", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_00402716_002D210(), maxNumVertices))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))));
			}

			public ContribDglCsrNeighborUniformSample With([Optional] [OptionalArgument] FSharpOption<Symbol> csrMatrix, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> seedArrays, [Optional] [OptionalArgument] FSharpOption<long> numHops, [Optional] [OptionalArgument] FSharpOption<long> numNeighbor, [Optional] [OptionalArgument] FSharpOption<long> maxNumVertices)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00402756_002D211(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402751_002D212(), csrMatrix), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402752_002D213(), seedArrays), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402753_002D214(), numHops), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402754_002D215(), numNeighbor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402755_002D216(), maxNumVertices), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new ContribDglCsrNeighborUniformSample(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribDglCsrNeighborNonUniformSample : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static long NumHopsDefault => 1L;

			public static long NumNeighborDefault => 2L;

			public static long MaxNumVerticesDefault => 100L;

			public Symbol CsrMatrix => operatorArguments.GetInput("csr_matrix");

			public Symbol Probability => operatorArguments.GetInput("probability");

			public Symbol[] SeedArrays => operatorArguments.GetVarArg("seed_arrays");

			public long NumHops => operatorArguments.GetParameter("num_hops", NumHopsDefault);

			public long NumNeighbor => operatorArguments.GetParameter("num_neighbor", NumNeighborDefault);

			public long MaxNumVertices => operatorArguments.GetParameter("max_num_vertices", MaxNumVerticesDefault);

			internal ContribDglCsrNeighborNonUniformSample(Arguments<Symbol> operatorArguments)
				: base("_contrib_dgl_csr_neighbor_non_uniform_sample", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribDglCsrNeighborNonUniformSample CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribDglCsrNeighborNonUniformSample(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribDglCsrNeighborNonUniformSample(OperatorArguments.AddReplace(args));
			}

			public ContribDglCsrNeighborNonUniformSample([Optional] [OptionalArgument] FSharpOption<Symbol> csrMatrix, [Optional] [OptionalArgument] FSharpOption<Symbol> probability, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> seedArrays, [Optional] [OptionalArgument] FSharpOption<long> numHops, [Optional] [OptionalArgument] FSharpOption<long> numNeighbor, [Optional] [OptionalArgument] FSharpOption<long> maxNumVertices)
			{
				Symbol csrMatrix2 = Operators.DefaultArg<Symbol>(csrMatrix, (Symbol)new ImplicitVariable());
				Symbol probability2 = Operators.DefaultArg<Symbol>(probability, (Symbol)new ImplicitVariable());
				Symbol[] item = Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new seedArrays_00402824_002D1(), seedArrays), ArrayModule.Empty<Symbol>());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("csr_matrix", OpArg<Symbol>.NewInput(csrMatrix2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("probability", OpArg<Symbol>.NewInput(probability2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("seed_arrays", OpArg<Symbol>.NewVarArg("num_args", item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_hops", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_00402830_002D217(), numHops))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_neighbor", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_00402831_002D218(), numNeighbor))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_num_vertices", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_00402832_002D219(), maxNumVertices))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public ContribDglCsrNeighborNonUniformSample With([Optional] [OptionalArgument] FSharpOption<Symbol> csrMatrix, [Optional] [OptionalArgument] FSharpOption<Symbol> probability, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> seedArrays, [Optional] [OptionalArgument] FSharpOption<long> numHops, [Optional] [OptionalArgument] FSharpOption<long> numNeighbor, [Optional] [OptionalArgument] FSharpOption<long> maxNumVertices)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00402877_002D220(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402871_002D221(), csrMatrix), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402872_002D222(), probability), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402873_002D223(), seedArrays), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402874_002D224(), numHops), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402875_002D225(), numNeighbor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402876_002D226(), maxNumVertices), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new ContribDglCsrNeighborNonUniformSample(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribDglSubgraph : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Graph => operatorArguments.GetInput("graph");

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public bool ReturnMapping
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("return_mapping");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (bool)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<bool, bool>((PrintfFormat<bool, Unit, string, bool>)(object)new PrintfFormat<bool, Unit, string, bool, Unit>("Required parameter return_mapping is missing"));
				}
			}

			internal ContribDglSubgraph(Arguments<Symbol> operatorArguments)
				: base("_contrib_dgl_subgraph", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribDglSubgraph CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribDglSubgraph(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribDglSubgraph(OperatorArguments.AddReplace(args));
			}

			public ContribDglSubgraph(Symbol graph, IEnumerable<Symbol> data, bool returnMapping)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("graph", OpArg<Symbol>.NewInput(graph)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("return_mapping", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)returnMapping))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ContribDglSubgraph(bool returnMapping, [Optional] [OptionalArgument] FSharpOption<Symbol> graph, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data)
			{
				Symbol graph2 = Operators.DefaultArg<Symbol>(graph, (Symbol)new ImplicitVariable());
				Symbol[] item = Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00402958_002D3(), data), ArrayModule.Empty<Symbol>());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("graph", OpArg<Symbol>.NewInput(graph2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("return_mapping", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)returnMapping))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public ContribDglSubgraph With([Optional] [OptionalArgument] FSharpOption<Symbol> graph, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<bool> returnMapping)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00402984_002D227(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402981_002D228(), graph), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402982_002D229(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00402983_002D230(), returnMapping), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ContribDglSubgraph(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribEdgeId : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol U => operatorArguments.GetInput("u");

			public Symbol V => operatorArguments.GetInput("v");

			internal ContribEdgeId(Arguments<Symbol> operatorArguments)
				: base("_contrib_edge_id", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribEdgeId CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribEdgeId(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribEdgeId(OperatorArguments.AddReplace(args));
			}

			public ContribEdgeId([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> u, [Optional] [OptionalArgument] FSharpOption<Symbol> v)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol u2 = Operators.DefaultArg<Symbol>(u, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(v, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("u", OpArg<Symbol>.NewInput(u2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("v", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public ContribEdgeId With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> u, [Optional] [OptionalArgument] FSharpOption<Symbol> v)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00403048_002D231(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403045_002D232(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403046_002D233(), u), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403047_002D234(), v), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ContribEdgeId(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribDglAdjacency : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal ContribDglAdjacency(Arguments<Symbol> operatorArguments)
				: base("_contrib_dgl_adjacency", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribDglAdjacency CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribDglAdjacency(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribDglAdjacency(OperatorArguments.AddReplace(args));
			}

			public ContribDglAdjacency([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public ContribDglAdjacency With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00403090_002D235(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403089_002D236(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new ContribDglAdjacency(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribDglGraphCompact : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol[] GraphData => operatorArguments.GetVarArg("graph_data");

			public bool ReturnMapping
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("return_mapping");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (bool)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<bool, bool>((PrintfFormat<bool, Unit, string, bool>)(object)new PrintfFormat<bool, Unit, string, bool, Unit>("Required parameter return_mapping is missing"));
				}
			}

			public IEnumerable<long> GraphSizes
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("graph_sizes");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<long>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<long>, IEnumerable<long>>((PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>>)(object)new PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>, Unit>("Required parameter graph_sizes is missing"));
				}
			}

			internal ContribDglGraphCompact(Arguments<Symbol> operatorArguments)
				: base("_contrib_dgl_graph_compact", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribDglGraphCompact CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribDglGraphCompact(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribDglGraphCompact(OperatorArguments.AddReplace(args));
			}

			public ContribDglGraphCompact(IEnumerable<Symbol> graphData, bool returnMapping, IEnumerable<long> graphSizes)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("graph_data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(graphData))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("return_mapping", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)returnMapping))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("graph_sizes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)graphSizes))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ContribDglGraphCompact(bool returnMapping, IEnumerable<long> graphSizes, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> graphData)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("graph_data", OpArg<Symbol>.NewVarArg("num_args", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new graphData_00403182(), graphData), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("return_mapping", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)returnMapping))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("graph_sizes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)graphSizes))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ContribDglGraphCompact(bool returnMapping, IEnumerable<long> graphSizes, params Symbol[] graphData)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("graph_data", OpArg<Symbol>.NewVarArg("num_args", graphData)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("return_mapping", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)returnMapping))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("graph_sizes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)graphSizes))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ContribDglGraphCompact With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> graphData, [Optional] [OptionalArgument] FSharpOption<bool> returnMapping, [Optional] [OptionalArgument] FSharpOption<IEnumerable<long>> graphSizes)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00403254_002D237(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403251_002D238(), graphData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403252_002D239(), returnMapping), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403253_002D240(), graphSizes), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ContribDglGraphCompact(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribGradientmultiplier : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal ContribGradientmultiplier(Arguments<Symbol> operatorArguments)
				: base("_contrib_gradientmultiplier", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribGradientmultiplier CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribGradientmultiplier(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribGradientmultiplier(OperatorArguments.AddReplace(args));
			}

			public ContribGradientmultiplier(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ContribGradientmultiplier(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ContribGradientmultiplier With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00403309_002D241(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403307_002D242(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403308_002D243(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ContribGradientmultiplier(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribBackwardGradientmultiplier : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal ContribBackwardGradientmultiplier(Arguments<Symbol> operatorArguments)
				: base("_contrib_backward_gradientmultiplier", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribBackwardGradientmultiplier CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribBackwardGradientmultiplier(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribBackwardGradientmultiplier(OperatorArguments.AddReplace(args));
			}

			public ContribBackwardGradientmultiplier(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ContribBackwardGradientmultiplier(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ContribBackwardGradientmultiplier With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00403350_002D244(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403348_002D245(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403349_002D246(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ContribBackwardGradientmultiplier(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribHawkesll : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lda => operatorArguments.GetInput("lda");

			public Symbol Alpha => operatorArguments.GetInput("alpha");

			public Symbol Beta => operatorArguments.GetInput("beta");

			public Symbol State => operatorArguments.GetInput("state");

			public Symbol Lags => operatorArguments.GetInput("lags");

			public Symbol Marks => operatorArguments.GetInput("marks");

			public Symbol ValidLength => operatorArguments.GetInput("valid_length");

			public Symbol MaxTime => operatorArguments.GetInput("max_time");

			internal ContribHawkesll(Arguments<Symbol> operatorArguments)
				: base("_contrib_hawkesll", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribHawkesll CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribHawkesll(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribHawkesll(OperatorArguments.AddReplace(args));
			}

			public ContribHawkesll([Optional] [OptionalArgument] FSharpOption<Symbol> lda, [Optional] [OptionalArgument] FSharpOption<Symbol> alpha, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<Symbol> state, [Optional] [OptionalArgument] FSharpOption<Symbol> lags, [Optional] [OptionalArgument] FSharpOption<Symbol> marks, [Optional] [OptionalArgument] FSharpOption<Symbol> validLength, [Optional] [OptionalArgument] FSharpOption<Symbol> maxTime)
			{
				Symbol lda2 = Operators.DefaultArg<Symbol>(lda, (Symbol)new ImplicitVariable());
				Symbol alpha2 = Operators.DefaultArg<Symbol>(alpha, (Symbol)new ImplicitVariable());
				Symbol beta2 = Operators.DefaultArg<Symbol>(beta, (Symbol)new ImplicitVariable());
				Symbol state2 = Operators.DefaultArg<Symbol>(state, (Symbol)new ImplicitVariable());
				Symbol lags2 = Operators.DefaultArg<Symbol>(lags, (Symbol)new ImplicitVariable());
				Symbol marks2 = Operators.DefaultArg<Symbol>(marks, (Symbol)new ImplicitVariable());
				Symbol validLength2 = Operators.DefaultArg<Symbol>(validLength, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(maxTime, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lda", OpArg<Symbol>.NewInput(lda2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewInput(alpha2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(beta2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("state", OpArg<Symbol>.NewInput(state2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lags", OpArg<Symbol>.NewInput(lags2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("marks", OpArg<Symbol>.NewInput(marks2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("valid_length", OpArg<Symbol>.NewInput(validLength2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_time", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))));
			}

			public ContribHawkesll With([Optional] [OptionalArgument] FSharpOption<Symbol> lda, [Optional] [OptionalArgument] FSharpOption<Symbol> alpha, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<Symbol> state, [Optional] [OptionalArgument] FSharpOption<Symbol> lags, [Optional] [OptionalArgument] FSharpOption<Symbol> marks, [Optional] [OptionalArgument] FSharpOption<Symbol> validLength, [Optional] [OptionalArgument] FSharpOption<Symbol> maxTime)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00403490_002D247(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403482_002D248(), lda), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403483_002D249(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403484_002D250(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403485_002D251(), state), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403486_002D252(), lags), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403487_002D253(), marks), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403488_002D254(), validLength), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403489_002D255(), maxTime), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new ContribHawkesll(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribBackwardHawkesll : SymbolOperator
		{
			internal ContribBackwardHawkesll(Arguments<Symbol> operatorArguments)
				: base("_contrib_backward_hawkesll", operatorArguments)
			{
			}

			public static ContribBackwardHawkesll CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribBackwardHawkesll(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribBackwardHawkesll(OperatorArguments.AddReplace(args));
			}

			public ContribBackwardHawkesll()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_00403498_002D256()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribIndexArray : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxesDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Axes => operatorArguments.GetParameter<FSharpOption<int[]>>("axes", AxesDefault);

			internal ContribIndexArray(Arguments<Symbol> operatorArguments)
				: base("_contrib_index_array", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribIndexArray CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribIndexArray(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribIndexArray(OperatorArguments.AddReplace(args));
			}

			public ContribIndexArray([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00403563_002D257(), axes))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ContribIndexArray With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00403582_002D258(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403580_002D259(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403581_002D260(), axes), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ContribIndexArray(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribIndexCopy : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol OldTensor => operatorArguments.GetInput("old_tensor");

			public Symbol IndexVector => operatorArguments.GetInput("index_vector");

			public Symbol NewTensor => operatorArguments.GetInput("new_tensor");

			internal ContribIndexCopy(Arguments<Symbol> operatorArguments)
				: base("_contrib_index_copy", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribIndexCopy CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribIndexCopy(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribIndexCopy(OperatorArguments.AddReplace(args));
			}

			public ContribIndexCopy([Optional] [OptionalArgument] FSharpOption<Symbol> oldTensor, [Optional] [OptionalArgument] FSharpOption<Symbol> indexVector, [Optional] [OptionalArgument] FSharpOption<Symbol> newTensor)
			{
				Symbol oldTensor2 = Operators.DefaultArg<Symbol>(oldTensor, (Symbol)new ImplicitVariable());
				Symbol indexVector2 = Operators.DefaultArg<Symbol>(indexVector, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(newTensor, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("old_tensor", OpArg<Symbol>.NewInput(oldTensor2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("index_vector", OpArg<Symbol>.NewInput(indexVector2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("new_tensor", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public ContribIndexCopy With([Optional] [OptionalArgument] FSharpOption<Symbol> oldTensor, [Optional] [OptionalArgument] FSharpOption<Symbol> indexVector, [Optional] [OptionalArgument] FSharpOption<Symbol> newTensor)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00403653_002D261(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403650_002D262(), oldTensor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403651_002D263(), indexVector), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403652_002D264(), newTensor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ContribIndexCopy(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribBackwardIndexCopy : SymbolOperator
		{
			internal ContribBackwardIndexCopy(Arguments<Symbol> operatorArguments)
				: base("_contrib_backward_index_copy", operatorArguments)
			{
			}

			public static ContribBackwardIndexCopy CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribBackwardIndexCopy(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribBackwardIndexCopy(OperatorArguments.AddReplace(args));
			}

			public ContribBackwardIndexCopy()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_00403661_002D265()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class KhatriRao : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol[] Args => operatorArguments.GetVarArg("args");

			internal KhatriRao(Arguments<Symbol> operatorArguments)
				: base("khatri_rao", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static KhatriRao CreateFromArguments(Arguments<Symbol> args)
			{
				return new KhatriRao(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new KhatriRao(OperatorArguments.AddReplace(args));
			}

			public KhatriRao(params Symbol[] args)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("args", OpArg<Symbol>.NewVarArg("num_args", args)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public KhatriRao With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> args)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00403720_002D266(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403719_002D267(), args), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new KhatriRao(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MultiLars : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double RescaleGradDefault => 1.0;

			public Symbol Lrs => operatorArguments.GetInput("lrs");

			public Symbol WeightsSumSq => operatorArguments.GetInput("weights_sum_sq");

			public Symbol GradsSumSq => operatorArguments.GetInput("grads_sum_sq");

			public Symbol Wds => operatorArguments.GetInput("wds");

			public double Eta
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("eta");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter eta is missing"));
				}
			}

			public double Eps
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("eps");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter eps is missing"));
				}
			}

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			internal MultiLars(Arguments<Symbol> operatorArguments)
				: base("multi_lars", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MultiLars CreateFromArguments(Arguments<Symbol> args)
			{
				return new MultiLars(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MultiLars(OperatorArguments.AddReplace(args));
			}

			public MultiLars(Symbol lrs, Symbol weightsSumSq, Symbol gradsSumSq, Symbol wds, double eta, double eps, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewInput(lrs)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weights_sum_sq", OpArg<Symbol>.NewInput(weightsSumSq)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grads_sum_sq", OpArg<Symbol>.NewInput(gradsSumSq)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewInput(wds)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)eta))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)eps))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00403753_002D268(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))
			{
			}

			public MultiLars(double eta, double eps, [Optional] [OptionalArgument] FSharpOption<Symbol> lrs, [Optional] [OptionalArgument] FSharpOption<Symbol> weightsSumSq, [Optional] [OptionalArgument] FSharpOption<Symbol> gradsSumSq, [Optional] [OptionalArgument] FSharpOption<Symbol> wds, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad)
			{
				Symbol lrs2 = Operators.DefaultArg<Symbol>(lrs, (Symbol)new ImplicitVariable());
				Symbol weightsSumSq2 = Operators.DefaultArg<Symbol>(weightsSumSq, (Symbol)new ImplicitVariable());
				Symbol gradsSumSq2 = Operators.DefaultArg<Symbol>(gradsSumSq, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(wds, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewInput(lrs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weights_sum_sq", OpArg<Symbol>.NewInput(weightsSumSq2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grads_sum_sq", OpArg<Symbol>.NewInput(gradsSumSq2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)eta))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)eps))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00403786_002D269(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))));
			}

			public MultiLars With([Optional] [OptionalArgument] FSharpOption<Symbol> lrs, [Optional] [OptionalArgument] FSharpOption<Symbol> weightsSumSq, [Optional] [OptionalArgument] FSharpOption<Symbol> gradsSumSq, [Optional] [OptionalArgument] FSharpOption<Symbol> wds, [Optional] [OptionalArgument] FSharpOption<double> eta, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00403830_002D270(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403823_002D271(), lrs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403824_002D272(), weightsSumSq), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403825_002D273(), gradsSumSq), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403826_002D274(), wds), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403827_002D275(), eta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403828_002D276(), eps), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403829_002D277(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))));
				return new MultiLars(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MultiSumSq : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int NumArrays
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_arrays");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_arrays is missing"));
				}
			}

			internal MultiSumSq(Arguments<Symbol> operatorArguments)
				: base("multi_sum_sq", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MultiSumSq CreateFromArguments(Arguments<Symbol> args)
			{
				return new MultiSumSq(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MultiSumSq(OperatorArguments.AddReplace(args));
			}

			public MultiSumSq(IEnumerable<Symbol> data, int numArrays)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_arrays", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numArrays))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public MultiSumSq(int numArrays, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00403859_002D4(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_arrays", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numArrays))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public MultiSumSq(int numArrays, params Symbol[] data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_arrays", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numArrays))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public MultiSumSq With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> numArrays)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00403893_002D278(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403891_002D279(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00403892_002D280(), numArrays), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new MultiSumSq(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribMultiBoxDetection : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool ClipDefault => true;

			public static double ThresholdDefault => 0.01;

			public static int BackgroundIdDefault => 0;

			public static double NmsThresholdDefault => 0.5;

			public static bool ForceSuppressDefault => false;

			public static double[] VariancesDefault => new double[4]
			{
				0.1,
				0.1,
				0.2,
				0.2
			};

			public static int NmsTopkDefault => -1;

			public Symbol ClsProb => operatorArguments.GetInput("cls_prob");

			public Symbol LocPred => operatorArguments.GetInput("loc_pred");

			public Symbol Anchor => operatorArguments.GetInput("anchor");

			public bool Clip => operatorArguments.GetParameter("clip", ClipDefault);

			public double Threshold => operatorArguments.GetParameter("threshold", ThresholdDefault);

			public int BackgroundId => operatorArguments.GetParameter("background_id", BackgroundIdDefault);

			public double NmsThreshold => operatorArguments.GetParameter("nms_threshold", NmsThresholdDefault);

			public bool ForceSuppress => operatorArguments.GetParameter("force_suppress", ForceSuppressDefault);

			public double[] Variances => operatorArguments.GetParameter("variances", VariancesDefault);

			public int NmsTopk => operatorArguments.GetParameter("nms_topk", NmsTopkDefault);

			internal ContribMultiBoxDetection(Arguments<Symbol> operatorArguments)
				: base("_contrib_MultiBoxDetection", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribMultiBoxDetection CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribMultiBoxDetection(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribMultiBoxDetection(OperatorArguments.AddReplace(args));
			}

			public ContribMultiBoxDetection([Optional] [OptionalArgument] FSharpOption<Symbol> clsProb, [Optional] [OptionalArgument] FSharpOption<Symbol> locPred, [Optional] [OptionalArgument] FSharpOption<Symbol> anchor, [Optional] [OptionalArgument] FSharpOption<bool> clip, [Optional] [OptionalArgument] FSharpOption<double> threshold, [Optional] [OptionalArgument] FSharpOption<int> backgroundId, [Optional] [OptionalArgument] FSharpOption<double> nmsThreshold, [Optional] [OptionalArgument] FSharpOption<bool> forceSuppress, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> variances, [Optional] [OptionalArgument] FSharpOption<int> nmsTopk)
			{
				Symbol clsProb2 = Operators.DefaultArg<Symbol>(clsProb, (Symbol)new ImplicitVariable());
				Symbol locPred2 = Operators.DefaultArg<Symbol>(locPred, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(anchor, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cls_prob", OpArg<Symbol>.NewInput(clsProb2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("loc_pred", OpArg<Symbol>.NewInput(locPred2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("anchor", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00403929_002D281(), clip))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("threshold", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00403930_002D282(), threshold))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("background_id", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00403931_002D283(), backgroundId))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("nms_threshold", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00403932_002D284(), nmsThreshold))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("force_suppress", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00403933_002D285(), forceSuppress))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("variances", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_00403934_002D286(), variances))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("nms_topk", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00403935_002D287(), nmsTopk))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))));
			}

			public ContribMultiBoxDetection With([Optional] [OptionalArgument] FSharpOption<Symbol> clsProb, [Optional] [OptionalArgument] FSharpOption<Symbol> locPred, [Optional] [OptionalArgument] FSharpOption<Symbol> anchor, [Optional] [OptionalArgument] FSharpOption<bool> clip, [Optional] [OptionalArgument] FSharpOption<double> threshold, [Optional] [OptionalArgument] FSharpOption<int> backgroundId, [Optional] [OptionalArgument] FSharpOption<double> nmsThreshold, [Optional] [OptionalArgument] FSharpOption<bool> forceSuppress, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> variances, [Optional] [OptionalArgument] FSharpOption<int> nmsTopk)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00404012_002D288(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404002_002D289(), clsProb), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404003_002D290(), locPred), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404004_002D291(), anchor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404005_002D292(), clip), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404006_002D293(), threshold), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404007_002D294(), backgroundId), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404008_002D295(), nmsThreshold), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404009_002D296(), forceSuppress), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404010_002D297(), variances), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404011_002D298(), nmsTopk), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))));
				return new ContribMultiBoxDetection(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribMultiBoxPrior : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double[] SizesDefault => new double[1]
			{
				1.0
			};

			public static double[] RatiosDefault => new double[1]
			{
				1.0
			};

			public static bool ClipDefault => false;

			public static double[] StepsDefault => new double[2]
			{
				-1.0,
				-1.0
			};

			public static double[] OffsetsDefault => new double[2]
			{
				0.5,
				0.5
			};

			public Symbol Data => operatorArguments.GetInput("data");

			public double[] Sizes => operatorArguments.GetParameter("sizes", SizesDefault);

			public double[] Ratios => operatorArguments.GetParameter("ratios", RatiosDefault);

			public bool Clip => operatorArguments.GetParameter("clip", ClipDefault);

			public double[] Steps => operatorArguments.GetParameter("steps", StepsDefault);

			public double[] Offsets => operatorArguments.GetParameter("offsets", OffsetsDefault);

			internal ContribMultiBoxPrior(Arguments<Symbol> operatorArguments)
				: base("_contrib_MultiBoxPrior", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribMultiBoxPrior CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribMultiBoxPrior(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribMultiBoxPrior(OperatorArguments.AddReplace(args));
			}

			public ContribMultiBoxPrior([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> sizes, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> ratios, [Optional] [OptionalArgument] FSharpOption<bool> clip, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> steps, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> offsets)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sizes", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_00404036_002D299(), sizes))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("ratios", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_00404037_002D300(), ratios))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00404038_002D301(), clip))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("steps", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_00404039_002D302(), steps))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("offsets", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_00404040_002D303(), offsets))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public ContribMultiBoxPrior With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> sizes, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> ratios, [Optional] [OptionalArgument] FSharpOption<bool> clip, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> steps, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> offsets)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00404091_002D304(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404085_002D305(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404086_002D306(), sizes), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404087_002D307(), ratios), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404088_002D308(), clip), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404089_002D309(), steps), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404090_002D310(), offsets), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new ContribMultiBoxPrior(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribMultiBoxTarget : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double OverlapThresholdDefault => 0.5;

			public static double IgnoreLabelDefault => -1.0;

			public static double NegativeMiningRatioDefault => -1.0;

			public static double NegativeMiningThreshDefault => 0.5;

			public static int MinimumNegativeSamplesDefault => 0;

			public static double[] VariancesDefault => new double[4]
			{
				0.1,
				0.1,
				0.2,
				0.2
			};

			public Symbol Anchor => operatorArguments.GetInput("anchor");

			public Symbol Label => operatorArguments.GetInput("label");

			public Symbol ClsPred => operatorArguments.GetInput("cls_pred");

			public double OverlapThreshold => operatorArguments.GetParameter("overlap_threshold", OverlapThresholdDefault);

			public double IgnoreLabel => operatorArguments.GetParameter("ignore_label", IgnoreLabelDefault);

			public double NegativeMiningRatio => operatorArguments.GetParameter("negative_mining_ratio", NegativeMiningRatioDefault);

			public double NegativeMiningThresh => operatorArguments.GetParameter("negative_mining_thresh", NegativeMiningThreshDefault);

			public int MinimumNegativeSamples => operatorArguments.GetParameter("minimum_negative_samples", MinimumNegativeSamplesDefault);

			public double[] Variances => operatorArguments.GetParameter("variances", VariancesDefault);

			internal ContribMultiBoxTarget(Arguments<Symbol> operatorArguments)
				: base("_contrib_MultiBoxTarget", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribMultiBoxTarget CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribMultiBoxTarget(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribMultiBoxTarget(OperatorArguments.AddReplace(args));
			}

			public ContribMultiBoxTarget([Optional] [OptionalArgument] FSharpOption<Symbol> anchor, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<Symbol> clsPred, [Optional] [OptionalArgument] FSharpOption<double> overlapThreshold, [Optional] [OptionalArgument] FSharpOption<double> ignoreLabel, [Optional] [OptionalArgument] FSharpOption<double> negativeMiningRatio, [Optional] [OptionalArgument] FSharpOption<double> negativeMiningThresh, [Optional] [OptionalArgument] FSharpOption<int> minimumNegativeSamples, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> variances)
			{
				Symbol anchor2 = Operators.DefaultArg<Symbol>(anchor, (Symbol)new ImplicitVariable());
				Symbol label2 = Operators.DefaultArg<Symbol>(label, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(clsPred, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("anchor", OpArg<Symbol>.NewInput(anchor2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(label2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cls_pred", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("overlap_threshold", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404125_002D311(), overlapThreshold))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("ignore_label", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404126_002D312(), ignoreLabel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("negative_mining_ratio", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404127_002D313(), negativeMiningRatio))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("negative_mining_thresh", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404128_002D314(), negativeMiningThresh))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("minimum_negative_samples", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00404129_002D315(), minimumNegativeSamples))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("variances", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_00404130_002D316(), variances))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))));
			}

			public ContribMultiBoxTarget With([Optional] [OptionalArgument] FSharpOption<Symbol> anchor, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<Symbol> clsPred, [Optional] [OptionalArgument] FSharpOption<double> overlapThreshold, [Optional] [OptionalArgument] FSharpOption<double> ignoreLabel, [Optional] [OptionalArgument] FSharpOption<double> negativeMiningRatio, [Optional] [OptionalArgument] FSharpOption<double> negativeMiningThresh, [Optional] [OptionalArgument] FSharpOption<int> minimumNegativeSamples, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> variances)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00404199_002D317(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404190_002D318(), anchor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404191_002D319(), label), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404192_002D320(), clsPred), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404193_002D321(), overlapThreshold), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404194_002D322(), ignoreLabel), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404195_002D323(), negativeMiningRatio), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404196_002D324(), negativeMiningThresh), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404197_002D325(), minimumNegativeSamples), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404198_002D326(), variances), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))));
				return new ContribMultiBoxTarget(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribGetnnz : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> AxisDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			internal ContribGetnnz(Arguments<Symbol> operatorArguments)
				: base("_contrib_getnnz", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribGetnnz CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribGetnnz(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribGetnnz(OperatorArguments.AddReplace(args));
			}

			public ContribGetnnz([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00404221_002D327(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ContribGetnnz With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00404240_002D328(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404238_002D329(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404239_002D330(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ContribGetnnz(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribGroupAdagradUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static double EpsilonDefault => 1E-05;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol History => operatorArguments.GetInput("history");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public double Epsilon => operatorArguments.GetParameter("epsilon", EpsilonDefault);

			internal ContribGroupAdagradUpdate(Arguments<Symbol> operatorArguments)
				: base("_contrib_group_adagrad_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribGroupAdagradUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribGroupAdagradUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribGroupAdagradUpdate(OperatorArguments.AddReplace(args));
			}

			public ContribGroupAdagradUpdate(Symbol weight, Symbol grad, Symbol history, double lr, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<double> epsilon)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("history", OpArg<Symbol>.NewInput(history)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404287_002D331(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404288_002D332(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404289_002D333(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))
			{
			}

			public ContribGroupAdagradUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> history, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<double> epsilon)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(history, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("history", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404335_002D334(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404336_002D335(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404337_002D336(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))));
			}

			public ContribGroupAdagradUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> history, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<double> epsilon)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00404387_002D337(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404380_002D338(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404381_002D339(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404382_002D340(), history), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404383_002D341(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404384_002D342(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404385_002D343(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404386_002D344(), epsilon), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))));
				return new ContribGroupAdagradUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class PreloadedMultiSgdUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static int NumWeightsDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public int NumWeights => operatorArguments.GetParameter("num_weights", NumWeightsDefault);

			internal PreloadedMultiSgdUpdate(Arguments<Symbol> operatorArguments)
				: base("preloaded_multi_sgd_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static PreloadedMultiSgdUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new PreloadedMultiSgdUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new PreloadedMultiSgdUpdate(OperatorArguments.AddReplace(args));
			}

			public PreloadedMultiSgdUpdate([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00404411_002D5(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404415_002D345(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404416_002D346(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00404417_002D347(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public PreloadedMultiSgdUpdate With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00404452_002D348(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404448_002D349(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404449_002D350(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404450_002D351(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404451_002D352(), numWeights), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new PreloadedMultiSgdUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class PreloadedMultiSgdMomUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double MomentumDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static int NumWeightsDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public int NumWeights => operatorArguments.GetParameter("num_weights", NumWeightsDefault);

			internal PreloadedMultiSgdMomUpdate(Arguments<Symbol> operatorArguments)
				: base("preloaded_multi_sgd_mom_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static PreloadedMultiSgdMomUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new PreloadedMultiSgdMomUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new PreloadedMultiSgdMomUpdate(OperatorArguments.AddReplace(args));
			}

			public PreloadedMultiSgdMomUpdate([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00404490_002D6(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404494_002D353(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404495_002D354(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404496_002D355(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00404497_002D356(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public PreloadedMultiSgdMomUpdate With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00404540_002D357(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404535_002D358(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404536_002D359(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404537_002D360(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404538_002D361(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404539_002D362(), numWeights), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new PreloadedMultiSgdMomUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class PreloadedMultiMpSgdUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static int NumWeightsDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public int NumWeights => operatorArguments.GetParameter("num_weights", NumWeightsDefault);

			internal PreloadedMultiMpSgdUpdate(Arguments<Symbol> operatorArguments)
				: base("preloaded_multi_mp_sgd_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static PreloadedMultiMpSgdUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new PreloadedMultiMpSgdUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new PreloadedMultiMpSgdUpdate(OperatorArguments.AddReplace(args));
			}

			public PreloadedMultiMpSgdUpdate([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00404564_002D7(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404568_002D363(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404569_002D364(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00404570_002D365(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public PreloadedMultiMpSgdUpdate With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00404605_002D366(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404601_002D367(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404602_002D368(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404603_002D369(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404604_002D370(), numWeights), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new PreloadedMultiMpSgdUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class PreloadedMultiMpSgdMomUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double MomentumDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static int NumWeightsDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public int NumWeights => operatorArguments.GetParameter("num_weights", NumWeightsDefault);

			internal PreloadedMultiMpSgdMomUpdate(Arguments<Symbol> operatorArguments)
				: base("preloaded_multi_mp_sgd_mom_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static PreloadedMultiMpSgdMomUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new PreloadedMultiMpSgdMomUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new PreloadedMultiMpSgdMomUpdate(OperatorArguments.AddReplace(args));
			}

			public PreloadedMultiMpSgdMomUpdate([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00404643_002D8(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404647_002D371(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404648_002D372(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404649_002D373(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00404650_002D374(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public PreloadedMultiMpSgdMomUpdate With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00404693_002D375(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404688_002D376(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404689_002D377(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404690_002D378(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404691_002D379(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404692_002D380(), numWeights), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new PreloadedMultiMpSgdMomUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribQuadratic : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double ADefault => 0.0;

			public static double BDefault => 0.0;

			public static double CDefault => 0.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public double A => operatorArguments.GetParameter("a", ADefault);

			public double B => operatorArguments.GetParameter("b", BDefault);

			public double C => operatorArguments.GetParameter("c", CDefault);

			internal ContribQuadratic(Arguments<Symbol> operatorArguments)
				: base("_contrib_quadratic", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribQuadratic CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribQuadratic(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribQuadratic(OperatorArguments.AddReplace(args));
			}

			public ContribQuadratic([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> a, [Optional] [OptionalArgument] FSharpOption<double> b, [Optional] [OptionalArgument] FSharpOption<double> c)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404733_002D381(), a))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404734_002D382(), b))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("c", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00404735_002D383(), c))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public ContribQuadratic With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> a, [Optional] [OptionalArgument] FSharpOption<double> b, [Optional] [OptionalArgument] FSharpOption<double> c)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00404770_002D384(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404766_002D385(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404767_002D386(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404768_002D387(), b), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404769_002D388(), c), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new ContribQuadratic(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribBackwardQuadratic : SymbolOperator
		{
			internal ContribBackwardQuadratic(Arguments<Symbol> operatorArguments)
				: base("_contrib_backward_quadratic", operatorArguments)
			{
			}

			public static ContribBackwardQuadratic CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribBackwardQuadratic(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribBackwardQuadratic(OperatorArguments.AddReplace(args));
			}

			public ContribBackwardQuadratic()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_00404778_002D389()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ResetArrays : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int NumArrays
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_arrays");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_arrays is missing"));
				}
			}

			internal ResetArrays(Arguments<Symbol> operatorArguments)
				: base("reset_arrays", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ResetArrays CreateFromArguments(Arguments<Symbol> args)
			{
				return new ResetArrays(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ResetArrays(OperatorArguments.AddReplace(args));
			}

			public ResetArrays(IEnumerable<Symbol> data, int numArrays)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_arrays", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numArrays))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ResetArrays(int numArrays, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00404809_002D9(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_arrays", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numArrays))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ResetArrays(int numArrays, params Symbol[] data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_arrays", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numArrays))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ResetArrays With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> numArrays)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00404843_002D390(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404841_002D391(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404842_002D392(), numArrays), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ResetArrays(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribROIAlign : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int SampleRatioDefault => -1;

			public static bool PositionSensitiveDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Rois => operatorArguments.GetInput("rois");

			public IEnumerable<int> PooledSize
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("pooled_size");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter pooled_size is missing"));
				}
			}

			public double SpatialScale
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("spatial_scale");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter spatial_scale is missing"));
				}
			}

			public int SampleRatio => operatorArguments.GetParameter("sample_ratio", SampleRatioDefault);

			public bool PositionSensitive => operatorArguments.GetParameter("position_sensitive", PositionSensitiveDefault);

			internal ContribROIAlign(Arguments<Symbol> operatorArguments)
				: base("_contrib_ROIAlign", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribROIAlign CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribROIAlign(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribROIAlign(OperatorArguments.AddReplace(args));
			}

			public ContribROIAlign(Symbol data, Symbol rois, IEnumerable<int> pooledSize, double spatialScale, [Optional] [OptionalArgument] FSharpOption<int> sampleRatio, [Optional] [OptionalArgument] FSharpOption<bool> positionSensitive)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(rois)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)pooledSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)spatialScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample_ratio", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00404890_002D393(), sampleRatio))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("position_sensitive", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00404891_002D394(), positionSensitive))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public ContribROIAlign(IEnumerable<int> pooledSize, double spatialScale, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> rois, [Optional] [OptionalArgument] FSharpOption<int> sampleRatio, [Optional] [OptionalArgument] FSharpOption<bool> positionSensitive)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rois, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)pooledSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)spatialScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample_ratio", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00404936_002D395(), sampleRatio))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("position_sensitive", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00404937_002D396(), positionSensitive))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public ContribROIAlign With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> rois, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pooledSize, [Optional] [OptionalArgument] FSharpOption<double> spatialScale, [Optional] [OptionalArgument] FSharpOption<int> sampleRatio, [Optional] [OptionalArgument] FSharpOption<bool> positionSensitive)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00404979_002D397(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404973_002D398(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404974_002D399(), rois), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404975_002D400(), pooledSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404976_002D401(), spatialScale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404977_002D402(), sampleRatio), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00404978_002D403(), positionSensitive), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new ContribROIAlign(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribRROIAlign : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int SamplingRatioDefault => -1;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Rois => operatorArguments.GetInput("rois");

			public IEnumerable<int> PooledSize
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("pooled_size");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter pooled_size is missing"));
				}
			}

			public double SpatialScale
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("spatial_scale");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter spatial_scale is missing"));
				}
			}

			public int SamplingRatio => operatorArguments.GetParameter("sampling_ratio", SamplingRatioDefault);

			internal ContribRROIAlign(Arguments<Symbol> operatorArguments)
				: base("_contrib_RROIAlign", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribRROIAlign CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribRROIAlign(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribRROIAlign(OperatorArguments.AddReplace(args));
			}

			public ContribRROIAlign(Symbol data, Symbol rois, IEnumerable<int> pooledSize, double spatialScale, [Optional] [OptionalArgument] FSharpOption<int> samplingRatio)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(rois)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)pooledSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)spatialScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sampling_ratio", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00405023_002D404(), samplingRatio))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public ContribRROIAlign(IEnumerable<int> pooledSize, double spatialScale, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> rois, [Optional] [OptionalArgument] FSharpOption<int> samplingRatio)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rois, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)pooledSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)spatialScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sampling_ratio", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00405065_002D405(), samplingRatio))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))));
			}

			public ContribRROIAlign With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> rois, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pooledSize, [Optional] [OptionalArgument] FSharpOption<double> spatialScale, [Optional] [OptionalArgument] FSharpOption<int> samplingRatio)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00405099_002D406(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405094_002D407(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405095_002D408(), rois), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405096_002D409(), pooledSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405097_002D410(), spatialScale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405098_002D411(), samplingRatio), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new ContribRROIAlign(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribRoundSte : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal ContribRoundSte(Arguments<Symbol> operatorArguments)
				: base("_contrib_round_ste", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribRoundSte CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribRoundSte(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribRoundSte(OperatorArguments.AddReplace(args));
			}

			public ContribRoundSte([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public ContribRoundSte With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00405145_002D412(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405144_002D413(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new ContribRoundSte(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribSignSte : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal ContribSignSte(Arguments<Symbol> operatorArguments)
				: base("_contrib_sign_ste", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribSignSte CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribSignSte(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribSignSte(OperatorArguments.AddReplace(args));
			}

			public ContribSignSte([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public ContribSignSte With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00405191_002D414(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405190_002D415(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new ContribSignSte(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribSyncBatchNorm : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double EpsDefault => 0.001;

			public static double MomentumDefault => 0.9;

			public static bool FixGammaDefault => true;

			public static bool UseGlobalStatsDefault => false;

			public static bool OutputMeanVarDefault => false;

			public static int NdevDefault => 1;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Gamma => operatorArguments.GetInput("gamma");

			public Symbol Beta => operatorArguments.GetInput("beta");

			public Symbol MovingMean => operatorArguments.GetInput("moving_mean");

			public Symbol MovingVar => operatorArguments.GetInput("moving_var");

			public string Key
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("key");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (string)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<string, string>((PrintfFormat<string, Unit, string, string>)(object)new PrintfFormat<string, Unit, string, string, Unit>("Required parameter key is missing"));
				}
			}

			public double Eps => operatorArguments.GetParameter("eps", EpsDefault);

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public bool FixGamma => operatorArguments.GetParameter("fix_gamma", FixGammaDefault);

			public bool UseGlobalStats => operatorArguments.GetParameter("use_global_stats", UseGlobalStatsDefault);

			public bool OutputMeanVar => operatorArguments.GetParameter("output_mean_var", OutputMeanVarDefault);

			public int Ndev => operatorArguments.GetParameter("ndev", NdevDefault);

			internal ContribSyncBatchNorm(Arguments<Symbol> operatorArguments)
				: base("_contrib_SyncBatchNorm", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribSyncBatchNorm CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribSyncBatchNorm(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribSyncBatchNorm(OperatorArguments.AddReplace(args));
			}

			public ContribSyncBatchNorm(Symbol data, Symbol gamma, Symbol beta, Symbol movingMean, Symbol movingVar, string key, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<bool> fixGamma, [Optional] [OptionalArgument] FSharpOption<bool> useGlobalStats, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar, [Optional] [OptionalArgument] FSharpOption<int> ndev)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(gamma)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(beta)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("moving_mean", OpArg<Symbol>.NewInput(movingMean)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("moving_var", OpArg<Symbol>.NewInput(movingVar)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("key", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)key))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00405281_002D416(), eps))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00405282_002D417(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("fix_gamma", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00405283_002D418(), fixGamma))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_global_stats", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00405284_002D419(), useGlobalStats))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00405285_002D420(), outputMeanVar))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("ndev", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00405286_002D421(), ndev))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))
			{
			}

			public ContribSyncBatchNorm(string key, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<Symbol> movingMean, [Optional] [OptionalArgument] FSharpOption<Symbol> movingVar, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<bool> fixGamma, [Optional] [OptionalArgument] FSharpOption<bool> useGlobalStats, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar, [Optional] [OptionalArgument] FSharpOption<int> ndev)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol gamma2 = Operators.DefaultArg<Symbol>(gamma, (Symbol)new ImplicitVariable());
				Symbol beta2 = Operators.DefaultArg<Symbol>(beta, (Symbol)new ImplicitVariable());
				Symbol movingMean2 = Operators.DefaultArg<Symbol>(movingMean, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(movingVar, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(gamma2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(beta2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("moving_mean", OpArg<Symbol>.NewInput(movingMean2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("moving_var", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("key", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)key))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00405377_002D422(), eps))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00405378_002D423(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("fix_gamma", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00405379_002D424(), fixGamma))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_global_stats", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00405380_002D425(), useGlobalStats))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00405381_002D426(), outputMeanVar))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("ndev", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00405382_002D427(), ndev))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))));
			}

			public ContribSyncBatchNorm With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<Symbol> movingMean, [Optional] [OptionalArgument] FSharpOption<Symbol> movingVar, [Optional] [OptionalArgument] FSharpOption<string> key, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<bool> fixGamma, [Optional] [OptionalArgument] FSharpOption<bool> useGlobalStats, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar, [Optional] [OptionalArgument] FSharpOption<int> ndev)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00405466_002D428(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405454_002D429(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405455_002D430(), gamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405456_002D431(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405457_002D432(), movingMean), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405458_002D433(), movingVar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<string, Tuple<string, OpArg<Symbol>>>((FSharpFunc<string, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405459_002D434(), key), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405460_002D435(), eps), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405461_002D436(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405462_002D437(), fixGamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405463_002D438(), useGlobalStats), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405464_002D439(), outputMeanVar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405465_002D440(), ndev), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))));
				return new ContribSyncBatchNorm(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribInterleavedMatmulSelfattQk : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol QueriesKeysValues => operatorArguments.GetInput("queries_keys_values");

			public int Heads
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("heads");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter heads is missing"));
				}
			}

			internal ContribInterleavedMatmulSelfattQk(Arguments<Symbol> operatorArguments)
				: base("_contrib_interleaved_matmul_selfatt_qk", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribInterleavedMatmulSelfattQk CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribInterleavedMatmulSelfattQk(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribInterleavedMatmulSelfattQk(OperatorArguments.AddReplace(args));
			}

			public ContribInterleavedMatmulSelfattQk(Symbol queriesKeysValues, int heads)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("queries_keys_values", OpArg<Symbol>.NewInput(queriesKeysValues)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("heads", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)heads))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ContribInterleavedMatmulSelfattQk(int heads, [Optional] [OptionalArgument] FSharpOption<Symbol> queriesKeysValues)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("queries_keys_values", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(queriesKeysValues, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("heads", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)heads))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ContribInterleavedMatmulSelfattQk With([Optional] [OptionalArgument] FSharpOption<Symbol> queriesKeysValues, [Optional] [OptionalArgument] FSharpOption<int> heads)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00405547_002D441(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405545_002D442(), queriesKeysValues), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405546_002D443(), heads), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ContribInterleavedMatmulSelfattQk(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribInterleavedMatmulSelfattValatt : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol QueriesKeysValues => operatorArguments.GetInput("queries_keys_values");

			public Symbol Attention => operatorArguments.GetInput("attention");

			public int Heads
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("heads");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter heads is missing"));
				}
			}

			internal ContribInterleavedMatmulSelfattValatt(Arguments<Symbol> operatorArguments)
				: base("_contrib_interleaved_matmul_selfatt_valatt", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribInterleavedMatmulSelfattValatt CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribInterleavedMatmulSelfattValatt(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribInterleavedMatmulSelfattValatt(OperatorArguments.AddReplace(args));
			}

			public ContribInterleavedMatmulSelfattValatt(Symbol queriesKeysValues, Symbol attention, int heads)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("queries_keys_values", OpArg<Symbol>.NewInput(queriesKeysValues)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("attention", OpArg<Symbol>.NewInput(attention)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("heads", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)heads))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ContribInterleavedMatmulSelfattValatt(int heads, [Optional] [OptionalArgument] FSharpOption<Symbol> queriesKeysValues, [Optional] [OptionalArgument] FSharpOption<Symbol> attention)
			{
				Symbol queriesKeysValues2 = Operators.DefaultArg<Symbol>(queriesKeysValues, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(attention, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("queries_keys_values", OpArg<Symbol>.NewInput(queriesKeysValues2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("attention", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("heads", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)heads))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public ContribInterleavedMatmulSelfattValatt With([Optional] [OptionalArgument] FSharpOption<Symbol> queriesKeysValues, [Optional] [OptionalArgument] FSharpOption<Symbol> attention, [Optional] [OptionalArgument] FSharpOption<int> heads)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00405646_002D444(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405643_002D445(), queriesKeysValues), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405644_002D446(), attention), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405645_002D447(), heads), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ContribInterleavedMatmulSelfattValatt(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribInterleavedMatmulEncdecQk : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Queries => operatorArguments.GetInput("queries");

			public Symbol KeysValues => operatorArguments.GetInput("keys_values");

			public int Heads
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("heads");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter heads is missing"));
				}
			}

			internal ContribInterleavedMatmulEncdecQk(Arguments<Symbol> operatorArguments)
				: base("_contrib_interleaved_matmul_encdec_qk", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribInterleavedMatmulEncdecQk CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribInterleavedMatmulEncdecQk(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribInterleavedMatmulEncdecQk(OperatorArguments.AddReplace(args));
			}

			public ContribInterleavedMatmulEncdecQk(Symbol queries, Symbol keysValues, int heads)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("queries", OpArg<Symbol>.NewInput(queries)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keys_values", OpArg<Symbol>.NewInput(keysValues)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("heads", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)heads))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ContribInterleavedMatmulEncdecQk(int heads, [Optional] [OptionalArgument] FSharpOption<Symbol> queries, [Optional] [OptionalArgument] FSharpOption<Symbol> keysValues)
			{
				Symbol queries2 = Operators.DefaultArg<Symbol>(queries, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(keysValues, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("queries", OpArg<Symbol>.NewInput(queries2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keys_values", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("heads", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)heads))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public ContribInterleavedMatmulEncdecQk With([Optional] [OptionalArgument] FSharpOption<Symbol> queries, [Optional] [OptionalArgument] FSharpOption<Symbol> keysValues, [Optional] [OptionalArgument] FSharpOption<int> heads)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00405743_002D448(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405740_002D449(), queries), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405741_002D450(), keysValues), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405742_002D451(), heads), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ContribInterleavedMatmulEncdecQk(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribInterleavedMatmulEncdecValatt : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol KeysValues => operatorArguments.GetInput("keys_values");

			public Symbol Attention => operatorArguments.GetInput("attention");

			public int Heads
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("heads");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter heads is missing"));
				}
			}

			internal ContribInterleavedMatmulEncdecValatt(Arguments<Symbol> operatorArguments)
				: base("_contrib_interleaved_matmul_encdec_valatt", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribInterleavedMatmulEncdecValatt CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribInterleavedMatmulEncdecValatt(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribInterleavedMatmulEncdecValatt(OperatorArguments.AddReplace(args));
			}

			public ContribInterleavedMatmulEncdecValatt(Symbol keysValues, Symbol attention, int heads)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keys_values", OpArg<Symbol>.NewInput(keysValues)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("attention", OpArg<Symbol>.NewInput(attention)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("heads", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)heads))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ContribInterleavedMatmulEncdecValatt(int heads, [Optional] [OptionalArgument] FSharpOption<Symbol> keysValues, [Optional] [OptionalArgument] FSharpOption<Symbol> attention)
			{
				Symbol keysValues2 = Operators.DefaultArg<Symbol>(keysValues, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(attention, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keys_values", OpArg<Symbol>.NewInput(keysValues2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("attention", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("heads", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)heads))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public ContribInterleavedMatmulEncdecValatt With([Optional] [OptionalArgument] FSharpOption<Symbol> keysValues, [Optional] [OptionalArgument] FSharpOption<Symbol> attention, [Optional] [OptionalArgument] FSharpOption<int> heads)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00405844_002D452(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405841_002D453(), keysValues), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405842_002D454(), attention), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405843_002D455(), heads), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ContribInterleavedMatmulEncdecValatt(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribDivSqrtDim : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal ContribDivSqrtDim(Arguments<Symbol> operatorArguments)
				: base("_contrib_div_sqrt_dim", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribDivSqrtDim CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribDivSqrtDim(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribDivSqrtDim(OperatorArguments.AddReplace(args));
			}

			public ContribDivSqrtDim([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public ContribDivSqrtDim With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00405874_002D456(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405873_002D457(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new ContribDivSqrtDim(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Foreach : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Fn => operatorArguments.GetInput("fn");

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int NumOutputs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_outputs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_outputs is missing"));
				}
			}

			public int NumOutData
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_out_data");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_out_data is missing"));
				}
			}

			public IEnumerable<long> InStateLocs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("in_state_locs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<long>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<long>, IEnumerable<long>>((PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>>)(object)new PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>, Unit>("Required parameter in_state_locs is missing"));
				}
			}

			public IEnumerable<long> InDataLocs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("in_data_locs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<long>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<long>, IEnumerable<long>>((PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>>)(object)new PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>, Unit>("Required parameter in_data_locs is missing"));
				}
			}

			public IEnumerable<long> RemainLocs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("remain_locs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<long>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<long>, IEnumerable<long>>((PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>>)(object)new PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>, Unit>("Required parameter remain_locs is missing"));
				}
			}

			internal Foreach(Arguments<Symbol> operatorArguments)
				: base("_foreach", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Foreach CreateFromArguments(Arguments<Symbol> args)
			{
				return new Foreach(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Foreach(OperatorArguments.AddReplace(args));
			}

			public Foreach(Symbol fn, IEnumerable<Symbol> data, int numOutputs, int numOutData, IEnumerable<long> inStateLocs, IEnumerable<long> inDataLocs, IEnumerable<long> remainLocs)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("fn", OpArg<Symbol>.NewInput(fn)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutputs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_out_data", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutData))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("in_state_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)inStateLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("in_data_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)inDataLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("remain_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)remainLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))
			{
			}

			public Foreach(int numOutputs, int numOutData, IEnumerable<long> inStateLocs, IEnumerable<long> inDataLocs, IEnumerable<long> remainLocs, [Optional] [OptionalArgument] FSharpOption<Symbol> fn, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data)
			{
				Symbol fn2 = Operators.DefaultArg<Symbol>(fn, (Symbol)new ImplicitVariable());
				Symbol[] item = Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00405927_002D10(), data), ArrayModule.Empty<Symbol>());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("fn", OpArg<Symbol>.NewInput(fn2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutputs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_out_data", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutData))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("in_state_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)inStateLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("in_data_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)inDataLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("remain_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)remainLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))));
			}

			public Foreach With([Optional] [OptionalArgument] FSharpOption<Symbol> fn, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> numOutputs, [Optional] [OptionalArgument] FSharpOption<int> numOutData, [Optional] [OptionalArgument] FSharpOption<IEnumerable<long>> inStateLocs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<long>> inDataLocs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<long>> remainLocs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00405977_002D458(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405970_002D459(), fn), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405971_002D460(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405972_002D461(), numOutputs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405973_002D462(), numOutData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405974_002D463(), inStateLocs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405975_002D464(), inDataLocs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00405976_002D465(), remainLocs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))));
				return new Foreach(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class WhileLoop : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Cond => operatorArguments.GetInput("cond");

			public Symbol Func => operatorArguments.GetInput("func");

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int NumOutputs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_outputs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_outputs is missing"));
				}
			}

			public int NumOutData
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_out_data");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_out_data is missing"));
				}
			}

			public int MaxIterations
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("max_iterations");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter max_iterations is missing"));
				}
			}

			public IEnumerable<long> CondInputLocs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("cond_input_locs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<long>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<long>, IEnumerable<long>>((PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>>)(object)new PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>, Unit>("Required parameter cond_input_locs is missing"));
				}
			}

			public IEnumerable<long> FuncInputLocs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("func_input_locs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<long>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<long>, IEnumerable<long>>((PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>>)(object)new PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>, Unit>("Required parameter func_input_locs is missing"));
				}
			}

			public IEnumerable<long> FuncVarLocs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("func_var_locs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<long>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<long>, IEnumerable<long>>((PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>>)(object)new PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>, Unit>("Required parameter func_var_locs is missing"));
				}
			}

			internal WhileLoop(Arguments<Symbol> operatorArguments)
				: base("_while_loop", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static WhileLoop CreateFromArguments(Arguments<Symbol> args)
			{
				return new WhileLoop(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new WhileLoop(OperatorArguments.AddReplace(args));
			}

			public WhileLoop(Symbol cond, Symbol func, IEnumerable<Symbol> data, int numOutputs, int numOutData, int maxIterations, IEnumerable<long> condInputLocs, IEnumerable<long> funcInputLocs, IEnumerable<long> funcVarLocs)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cond", OpArg<Symbol>.NewInput(cond)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("func", OpArg<Symbol>.NewInput(func)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutputs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_out_data", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutData))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_iterations", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)maxIterations))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cond_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)condInputLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("func_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)funcInputLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("func_var_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)funcVarLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))
			{
			}

			public WhileLoop(int numOutputs, int numOutData, int maxIterations, IEnumerable<long> condInputLocs, IEnumerable<long> funcInputLocs, IEnumerable<long> funcVarLocs, [Optional] [OptionalArgument] FSharpOption<Symbol> cond, [Optional] [OptionalArgument] FSharpOption<Symbol> func, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data)
			{
				Symbol cond2 = Operators.DefaultArg<Symbol>(cond, (Symbol)new ImplicitVariable());
				Symbol func2 = Operators.DefaultArg<Symbol>(func, (Symbol)new ImplicitVariable());
				Symbol[] item = Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00406041_002D11(), data), ArrayModule.Empty<Symbol>());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cond", OpArg<Symbol>.NewInput(cond2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("func", OpArg<Symbol>.NewInput(func2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutputs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_out_data", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutData))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_iterations", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)maxIterations))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cond_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)condInputLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("func_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)funcInputLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("func_var_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)funcVarLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))));
			}

			public WhileLoop With([Optional] [OptionalArgument] FSharpOption<Symbol> cond, [Optional] [OptionalArgument] FSharpOption<Symbol> func, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> numOutputs, [Optional] [OptionalArgument] FSharpOption<int> numOutData, [Optional] [OptionalArgument] FSharpOption<int> maxIterations, [Optional] [OptionalArgument] FSharpOption<IEnumerable<long>> condInputLocs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<long>> funcInputLocs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<long>> funcVarLocs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406103_002D466(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406094_002D467(), cond), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406095_002D468(), func), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406096_002D469(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406097_002D470(), numOutputs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406098_002D471(), numOutData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406099_002D472(), maxIterations), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406100_002D473(), condInputLocs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406101_002D474(), funcInputLocs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406102_002D475(), funcVarLocs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))));
				return new WhileLoop(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Cond : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Cond => operatorArguments.GetInput("cond");

			public Symbol ThenBranch => operatorArguments.GetInput("then_branch");

			public Symbol ElseBranch => operatorArguments.GetInput("else_branch");

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int NumOutputs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_outputs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_outputs is missing"));
				}
			}

			public IEnumerable<long> CondInputLocs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("cond_input_locs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<long>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<long>, IEnumerable<long>>((PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>>)(object)new PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>, Unit>("Required parameter cond_input_locs is missing"));
				}
			}

			public IEnumerable<long> ThenInputLocs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("then_input_locs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<long>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<long>, IEnumerable<long>>((PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>>)(object)new PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>, Unit>("Required parameter then_input_locs is missing"));
				}
			}

			public IEnumerable<long> ElseInputLocs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("else_input_locs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<long>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<long>, IEnumerable<long>>((PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>>)(object)new PrintfFormat<IEnumerable<long>, Unit, string, IEnumerable<long>, Unit>("Required parameter else_input_locs is missing"));
				}
			}

			internal Cond(Arguments<Symbol> operatorArguments)
				: base("_cond", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Cond CreateFromArguments(Arguments<Symbol> args)
			{
				return new Cond(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Cond(OperatorArguments.AddReplace(args));
			}

			public Cond(Symbol cond, Symbol thenBranch, Symbol elseBranch, IEnumerable<Symbol> data, int numOutputs, IEnumerable<long> condInputLocs, IEnumerable<long> thenInputLocs, IEnumerable<long> elseInputLocs)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cond", OpArg<Symbol>.NewInput(cond)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("then_branch", OpArg<Symbol>.NewInput(thenBranch)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("else_branch", OpArg<Symbol>.NewInput(elseBranch)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutputs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cond_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)condInputLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("then_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)thenInputLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("else_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)elseInputLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))
			{
			}

			public Cond(int numOutputs, IEnumerable<long> condInputLocs, IEnumerable<long> thenInputLocs, IEnumerable<long> elseInputLocs, [Optional] [OptionalArgument] FSharpOption<Symbol> cond, [Optional] [OptionalArgument] FSharpOption<Symbol> thenBranch, [Optional] [OptionalArgument] FSharpOption<Symbol> elseBranch, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data)
			{
				Symbol cond2 = Operators.DefaultArg<Symbol>(cond, (Symbol)new ImplicitVariable());
				Symbol thenBranch2 = Operators.DefaultArg<Symbol>(thenBranch, (Symbol)new ImplicitVariable());
				Symbol elseBranch2 = Operators.DefaultArg<Symbol>(elseBranch, (Symbol)new ImplicitVariable());
				Symbol[] item = Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00406163_002D12(), data), ArrayModule.Empty<Symbol>());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cond", OpArg<Symbol>.NewInput(cond2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("then_branch", OpArg<Symbol>.NewInput(thenBranch2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("else_branch", OpArg<Symbol>.NewInput(elseBranch2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutputs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cond_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)condInputLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("then_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)thenInputLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("else_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)elseInputLocs))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))));
			}

			public Cond With([Optional] [OptionalArgument] FSharpOption<Symbol> cond, [Optional] [OptionalArgument] FSharpOption<Symbol> thenBranch, [Optional] [OptionalArgument] FSharpOption<Symbol> elseBranch, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> numOutputs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<long>> condInputLocs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<long>> thenInputLocs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<long>> elseInputLocs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406219_002D476(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406211_002D477(), cond), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406212_002D478(), thenBranch), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406213_002D479(), elseBranch), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406214_002D480(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406215_002D481(), numOutputs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406216_002D482(), condInputLocs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406217_002D483(), thenInputLocs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406218_002D484(), elseInputLocs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new Cond(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Custom : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public string OpType
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("op_type");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (string)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<string, string>((PrintfFormat<string, Unit, string, string>)(object)new PrintfFormat<string, Unit, string, string, Unit>("Required parameter op_type is missing"));
				}
			}

			internal Custom(Arguments<Symbol> operatorArguments)
				: base("Custom", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Custom CreateFromArguments(Arguments<Symbol> args)
			{
				return new Custom(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Custom(OperatorArguments.AddReplace(args));
			}

			public Custom(IEnumerable<Symbol> data, string opType)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("op_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)opType))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Custom(string opType, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00406258_002D13(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("op_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)opType))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Custom(string opType, params Symbol[] data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("op_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)opType))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Custom With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<string> opType)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406297_002D485(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406295_002D486(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<string, Tuple<string, OpArg<Symbol>>>((FSharpFunc<string, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406296_002D487(), opType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Custom(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class FusedOp : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			internal FusedOp(Arguments<Symbol> operatorArguments)
				: base("_FusedOp", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static FusedOp CreateFromArguments(Arguments<Symbol> args)
			{
				return new FusedOp(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new FusedOp(OperatorArguments.AddReplace(args));
			}

			public FusedOp(params Symbol[] data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", data)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public FusedOp With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406319_002D488(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406318_002D489(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new FusedOp(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class FusedOpHelper : SymbolOperator
		{
			internal FusedOpHelper(Arguments<Symbol> operatorArguments)
				: base("_FusedOpHelper", operatorArguments)
			{
			}

			public static FusedOpHelper CreateFromArguments(Arguments<Symbol> args)
			{
				return new FusedOpHelper(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new FusedOpHelper(OperatorArguments.AddReplace(args));
			}

			public FusedOpHelper()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_00406327_002D490()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class FusedOpOutHelper : SymbolOperator
		{
			internal FusedOpOutHelper(Arguments<Symbol> operatorArguments)
				: base("_FusedOpOutHelper", operatorArguments)
			{
			}

			public static FusedOpOutHelper CreateFromArguments(Arguments<Symbol> args)
			{
				return new FusedOpOutHelper(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new FusedOpOutHelper(OperatorArguments.AddReplace(args));
			}

			public FusedOpOutHelper()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_00406337_002D491()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class IdentityAttachKLSparseReg : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double SparsenessTargetDefault => 0.1;

			public static double PenaltyDefault => 0.001;

			public static double MomentumDefault => 0.9;

			public Symbol Data => operatorArguments.GetInput("data");

			public double SparsenessTarget => operatorArguments.GetParameter("sparseness_target", SparsenessTargetDefault);

			public double Penalty => operatorArguments.GetParameter("penalty", PenaltyDefault);

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			internal IdentityAttachKLSparseReg(Arguments<Symbol> operatorArguments)
				: base("IdentityAttachKLSparseReg", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static IdentityAttachKLSparseReg CreateFromArguments(Arguments<Symbol> args)
			{
				return new IdentityAttachKLSparseReg(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new IdentityAttachKLSparseReg(OperatorArguments.AddReplace(args));
			}

			public IdentityAttachKLSparseReg([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> sparsenessTarget, [Optional] [OptionalArgument] FSharpOption<double> penalty, [Optional] [OptionalArgument] FSharpOption<double> momentum)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sparseness_target", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00406359_002D492(), sparsenessTarget))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("penalty", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00406360_002D493(), penalty))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00406361_002D494(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public IdentityAttachKLSparseReg With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> sparsenessTarget, [Optional] [OptionalArgument] FSharpOption<double> penalty, [Optional] [OptionalArgument] FSharpOption<double> momentum)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406396_002D495(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406392_002D496(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406393_002D497(), sparsenessTarget), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406394_002D498(), penalty), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406395_002D499(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new IdentityAttachKLSparseReg(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageCrop : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public int X
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("x");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter x is missing"));
				}
			}

			public int Y
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("y");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter y is missing"));
				}
			}

			public int Width
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("width");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter width is missing"));
				}
			}

			public int Height
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("height");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter height is missing"));
				}
			}

			internal ImageCrop(Arguments<Symbol> operatorArguments)
				: base("_image_crop", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageCrop CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageCrop(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageCrop(OperatorArguments.AddReplace(args));
			}

			public ImageCrop(Symbol data, int x, int y, int width, int height)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("y", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)y))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("width", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)width))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("height", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)height))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public ImageCrop(int x, int y, int width, int height, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("y", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)y))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("width", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)width))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("height", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)height))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public ImageCrop With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> x, [Optional] [OptionalArgument] FSharpOption<int> y, [Optional] [OptionalArgument] FSharpOption<int> width, [Optional] [OptionalArgument] FSharpOption<int> height)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406530_002D500(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406525_002D501(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406526_002D502(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406527_002D503(), y), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406528_002D504(), width), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406529_002D505(), height), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new ImageCrop(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageToTensor : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal ImageToTensor(Arguments<Symbol> operatorArguments)
				: base("_image_to_tensor", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageToTensor CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageToTensor(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageToTensor(OperatorArguments.AddReplace(args));
			}

			public ImageToTensor([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public ImageToTensor With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406605_002D506(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406604_002D507(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new ImageToTensor(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageNormalize : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double[] MeanDefault => new double[4]
			{
				0.0,
				0.0,
				0.0,
				0.0
			};

			public static double[] StdDefault => new double[4]
			{
				1.0,
				1.0,
				1.0,
				1.0
			};

			public Symbol Data => operatorArguments.GetInput("data");

			public double[] Mean => operatorArguments.GetParameter("mean", MeanDefault);

			public double[] Std => operatorArguments.GetParameter("std", StdDefault);

			internal ImageNormalize(Arguments<Symbol> operatorArguments)
				: base("_image_normalize", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageNormalize CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageNormalize(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageNormalize(OperatorArguments.AddReplace(args));
			}

			public ImageNormalize([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> mean, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> std)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_00406685_002D508(), mean))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("std", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_00406686_002D509(), std))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ImageNormalize With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> mean, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> std)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406713_002D510(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406710_002D511(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406711_002D512(), mean), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406712_002D513(), std), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ImageNormalize(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageFlipLeftRight : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal ImageFlipLeftRight(Arguments<Symbol> operatorArguments)
				: base("_image_flip_left_right", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageFlipLeftRight CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageFlipLeftRight(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageFlipLeftRight(OperatorArguments.AddReplace(args));
			}

			public ImageFlipLeftRight([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public ImageFlipLeftRight With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406739_002D514(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406738_002D515(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new ImageFlipLeftRight(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageRandomFlipLeftRight : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal ImageRandomFlipLeftRight(Arguments<Symbol> operatorArguments)
				: base("_image_random_flip_left_right", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageRandomFlipLeftRight CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageRandomFlipLeftRight(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageRandomFlipLeftRight(OperatorArguments.AddReplace(args));
			}

			public ImageRandomFlipLeftRight([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public ImageRandomFlipLeftRight With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406765_002D516(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406764_002D517(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new ImageRandomFlipLeftRight(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageFlipTopBottom : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal ImageFlipTopBottom(Arguments<Symbol> operatorArguments)
				: base("_image_flip_top_bottom", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageFlipTopBottom CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageFlipTopBottom(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageFlipTopBottom(OperatorArguments.AddReplace(args));
			}

			public ImageFlipTopBottom([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public ImageFlipTopBottom With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406791_002D518(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406790_002D519(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new ImageFlipTopBottom(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageRandomFlipTopBottom : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal ImageRandomFlipTopBottom(Arguments<Symbol> operatorArguments)
				: base("_image_random_flip_top_bottom", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageRandomFlipTopBottom CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageRandomFlipTopBottom(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageRandomFlipTopBottom(OperatorArguments.AddReplace(args));
			}

			public ImageRandomFlipTopBottom([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public ImageRandomFlipTopBottom With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406817_002D520(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406816_002D521(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new ImageRandomFlipTopBottom(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageRandomBrightness : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double MinFactor
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("min_factor");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter min_factor is missing"));
				}
			}

			public double MaxFactor
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("max_factor");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter max_factor is missing"));
				}
			}

			internal ImageRandomBrightness(Arguments<Symbol> operatorArguments)
				: base("_image_random_brightness", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageRandomBrightness CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageRandomBrightness(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageRandomBrightness(OperatorArguments.AddReplace(args));
			}

			public ImageRandomBrightness(Symbol data, double minFactor, double maxFactor)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)minFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)maxFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ImageRandomBrightness(double minFactor, double maxFactor, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)minFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)maxFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ImageRandomBrightness With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> minFactor, [Optional] [OptionalArgument] FSharpOption<double> maxFactor)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406875_002D522(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406872_002D523(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406873_002D524(), minFactor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406874_002D525(), maxFactor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ImageRandomBrightness(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageRandomContrast : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double MinFactor
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("min_factor");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter min_factor is missing"));
				}
			}

			public double MaxFactor
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("max_factor");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter max_factor is missing"));
				}
			}

			internal ImageRandomContrast(Arguments<Symbol> operatorArguments)
				: base("_image_random_contrast", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageRandomContrast CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageRandomContrast(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageRandomContrast(OperatorArguments.AddReplace(args));
			}

			public ImageRandomContrast(Symbol data, double minFactor, double maxFactor)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)minFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)maxFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ImageRandomContrast(double minFactor, double maxFactor, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)minFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)maxFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ImageRandomContrast With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> minFactor, [Optional] [OptionalArgument] FSharpOption<double> maxFactor)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406933_002D526(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406930_002D527(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406931_002D528(), minFactor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406932_002D529(), maxFactor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ImageRandomContrast(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageRandomSaturation : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double MinFactor
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("min_factor");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter min_factor is missing"));
				}
			}

			public double MaxFactor
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("max_factor");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter max_factor is missing"));
				}
			}

			internal ImageRandomSaturation(Arguments<Symbol> operatorArguments)
				: base("_image_random_saturation", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageRandomSaturation CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageRandomSaturation(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageRandomSaturation(OperatorArguments.AddReplace(args));
			}

			public ImageRandomSaturation(Symbol data, double minFactor, double maxFactor)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)minFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)maxFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ImageRandomSaturation(double minFactor, double maxFactor, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)minFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)maxFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ImageRandomSaturation With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> minFactor, [Optional] [OptionalArgument] FSharpOption<double> maxFactor)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00406991_002D530(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406988_002D531(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406989_002D532(), minFactor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00406990_002D533(), maxFactor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ImageRandomSaturation(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageRandomHue : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double MinFactor
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("min_factor");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter min_factor is missing"));
				}
			}

			public double MaxFactor
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("max_factor");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter max_factor is missing"));
				}
			}

			internal ImageRandomHue(Arguments<Symbol> operatorArguments)
				: base("_image_random_hue", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageRandomHue CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageRandomHue(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageRandomHue(OperatorArguments.AddReplace(args));
			}

			public ImageRandomHue(Symbol data, double minFactor, double maxFactor)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)minFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)maxFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ImageRandomHue(double minFactor, double maxFactor, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)minFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)maxFactor))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ImageRandomHue With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> minFactor, [Optional] [OptionalArgument] FSharpOption<double> maxFactor)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00407049_002D534(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407046_002D535(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407047_002D536(), minFactor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407048_002D537(), maxFactor), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ImageRandomHue(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageRandomColorJitter : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Brightness
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("brightness");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter brightness is missing"));
				}
			}

			public double Contrast
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("contrast");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter contrast is missing"));
				}
			}

			public double Saturation
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("saturation");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter saturation is missing"));
				}
			}

			public double Hue
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("hue");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter hue is missing"));
				}
			}

			internal ImageRandomColorJitter(Arguments<Symbol> operatorArguments)
				: base("_image_random_color_jitter", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageRandomColorJitter CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageRandomColorJitter(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageRandomColorJitter(OperatorArguments.AddReplace(args));
			}

			public ImageRandomColorJitter(Symbol data, double brightness, double contrast, double saturation, double hue)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("brightness", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)brightness))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("contrast", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)contrast))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("saturation", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)saturation))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("hue", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)hue))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public ImageRandomColorJitter(double brightness, double contrast, double saturation, double hue, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("brightness", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)brightness))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("contrast", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)contrast))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("saturation", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)saturation))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("hue", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)hue))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public ImageRandomColorJitter With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> brightness, [Optional] [OptionalArgument] FSharpOption<double> contrast, [Optional] [OptionalArgument] FSharpOption<double> saturation, [Optional] [OptionalArgument] FSharpOption<double> hue)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00407129_002D538(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407124_002D539(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407125_002D540(), brightness), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407126_002D541(), contrast), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407127_002D542(), saturation), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407128_002D543(), hue), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new ImageRandomColorJitter(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageAdjustLighting : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public IEnumerable<double> Alpha
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("alpha");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter alpha is missing"));
				}
			}

			internal ImageAdjustLighting(Arguments<Symbol> operatorArguments)
				: base("_image_adjust_lighting", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageAdjustLighting CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageAdjustLighting(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageAdjustLighting(OperatorArguments.AddReplace(args));
			}

			public ImageAdjustLighting(Symbol data, IEnumerable<double> alpha)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ImageAdjustLighting(IEnumerable<double> alpha, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ImageAdjustLighting With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> alpha)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00407176_002D544(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407174_002D545(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407175_002D546(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ImageAdjustLighting(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageRandomLighting : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double AlphaStdDefault => 0.05;

			public Symbol Data => operatorArguments.GetInput("data");

			public double AlphaStd => operatorArguments.GetParameter("alpha_std", AlphaStdDefault);

			internal ImageRandomLighting(Arguments<Symbol> operatorArguments)
				: base("_image_random_lighting", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageRandomLighting CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageRandomLighting(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageRandomLighting(OperatorArguments.AddReplace(args));
			}

			public ImageRandomLighting([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> alphaStd)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha_std", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00407194_002D547(), alphaStd))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ImageRandomLighting With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> alphaStd)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00407213_002D548(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407211_002D549(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407212_002D550(), alphaStd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ImageRandomLighting(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ImageResize : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] SizeDefault => new int[0];

			public static bool KeepRatioDefault => false;

			public static int InterpDefault => 1;

			public Symbol Data => operatorArguments.GetInput("data");

			public int[] Size => operatorArguments.GetParameter("size", SizeDefault);

			public bool KeepRatio => operatorArguments.GetParameter("keep_ratio", KeepRatioDefault);

			public int Interp => operatorArguments.GetParameter("interp", InterpDefault);

			internal ImageResize(Arguments<Symbol> operatorArguments)
				: base("_image_resize", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ImageResize CreateFromArguments(Arguments<Symbol> args)
			{
				return new ImageResize(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ImageResize(OperatorArguments.AddReplace(args));
			}

			public ImageResize([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<bool> keepRatio, [Optional] [OptionalArgument] FSharpOption<int> interp)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00407268_002D551(), size))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keep_ratio", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00407269_002D552(), keepRatio))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("interp", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00407270_002D553(), interp))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public ImageResize With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<bool> keepRatio, [Optional] [OptionalArgument] FSharpOption<int> interp)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00407305_002D554(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407301_002D555(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407302_002D556(), size), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407303_002D557(), keepRatio), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407304_002D558(), interp), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new ImageResize(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LeakyReLU : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static GeneratedArgumentTypes.LeakyReLUType ActTypeDefault => GeneratedArgumentTypes.LeakyReLUType.Leaky;

			public static double SlopeDefault => 0.25;

			public static double LowerBoundDefault => 0.125;

			public static double UpperBoundDefault => 0.334;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Gamma => operatorArguments.GetInput("gamma");

			public GeneratedArgumentTypes.LeakyReLUType ActType => operatorArguments.GetParameter("act_type", ActTypeDefault);

			public double Slope => operatorArguments.GetParameter("slope", SlopeDefault);

			public double LowerBound => operatorArguments.GetParameter("lower_bound", LowerBoundDefault);

			public double UpperBound => operatorArguments.GetParameter("upper_bound", UpperBoundDefault);

			internal LeakyReLU(Arguments<Symbol> operatorArguments)
				: base("LeakyReLU", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LeakyReLU CreateFromArguments(Arguments<Symbol> args)
			{
				return new LeakyReLU(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LeakyReLU(OperatorArguments.AddReplace(args));
			}

			public LeakyReLU([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.LeakyReLUType> actType, [Optional] [OptionalArgument] FSharpOption<double> slope, [Optional] [OptionalArgument] FSharpOption<double> lowerBound, [Optional] [OptionalArgument] FSharpOption<double> upperBound)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(gamma, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("act_type", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.LeakyReLUType, object>((FSharpFunc<GeneratedArgumentTypes.LeakyReLUType, object>)new operatorArguments_00407349_002D559(), actType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("slope", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00407350_002D560(), slope))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lower_bound", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00407351_002D561(), lowerBound))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("upper_bound", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00407352_002D562(), upperBound))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public LeakyReLU With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.LeakyReLUType> actType, [Optional] [OptionalArgument] FSharpOption<double> slope, [Optional] [OptionalArgument] FSharpOption<double> lowerBound, [Optional] [OptionalArgument] FSharpOption<double> upperBound)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00407400_002D563(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407394_002D564(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407395_002D565(), gamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.LeakyReLUType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.LeakyReLUType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407396_002D566(), actType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407397_002D567(), slope), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407398_002D568(), lowerBound), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407399_002D569(), upperBound), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new LeakyReLU(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SoftmaxCrossEntropy : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Label => operatorArguments.GetInput("label");

			internal SoftmaxCrossEntropy(Arguments<Symbol> operatorArguments)
				: base("softmax_cross_entropy", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SoftmaxCrossEntropy CreateFromArguments(Arguments<Symbol> args)
			{
				return new SoftmaxCrossEntropy(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SoftmaxCrossEntropy(OperatorArguments.AddReplace(args));
			}

			public SoftmaxCrossEntropy([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(label, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public SoftmaxCrossEntropy With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00407463_002D570(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407461_002D571(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407462_002D572(), label), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new SoftmaxCrossEntropy(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Activation : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public GeneratedArgumentTypes.ActType ActType
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("act_type");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return IntrinsicFunctions.UnboxGeneric<GeneratedArgumentTypes.ActType>(v);
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<GeneratedArgumentTypes.ActType, GeneratedArgumentTypes.ActType>((PrintfFormat<GeneratedArgumentTypes.ActType, Unit, string, GeneratedArgumentTypes.ActType>)(object)new PrintfFormat<GeneratedArgumentTypes.ActType, Unit, string, GeneratedArgumentTypes.ActType, Unit>("Required parameter act_type is missing"));
				}
			}

			internal Activation(Arguments<Symbol> operatorArguments)
				: base("Activation", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Activation CreateFromArguments(Arguments<Symbol> args)
			{
				return new Activation(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Activation(OperatorArguments.AddReplace(args));
			}

			public Activation(Symbol data, GeneratedArgumentTypes.ActType actType)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("act_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)actType))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Activation(GeneratedArgumentTypes.ActType actType, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("act_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)actType))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Activation With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ActType> actType)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00407530_002D573(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407528_002D574(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ActType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ActType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407529_002D575(), actType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Activation(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BatchNorm : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double EpsDefault => 0.001;

			public static double MomentumDefault => 0.9;

			public static bool FixGammaDefault => true;

			public static bool UseGlobalStatsDefault => false;

			public static bool OutputMeanVarDefault => false;

			public static int AxisDefault => 1;

			public static bool CudnnOffDefault => false;

			public static FSharpOption<double> MinCalibRangeDefault => null;

			public static FSharpOption<double> MaxCalibRangeDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Gamma => operatorArguments.GetInput("gamma");

			public Symbol Beta => operatorArguments.GetInput("beta");

			public Symbol MovingMean => operatorArguments.GetInput("moving_mean");

			public Symbol MovingVar => operatorArguments.GetInput("moving_var");

			public double Eps => operatorArguments.GetParameter("eps", EpsDefault);

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public bool FixGamma => operatorArguments.GetParameter("fix_gamma", FixGammaDefault);

			public bool UseGlobalStats => operatorArguments.GetParameter("use_global_stats", UseGlobalStatsDefault);

			public bool OutputMeanVar => operatorArguments.GetParameter("output_mean_var", OutputMeanVarDefault);

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			public bool CudnnOff => operatorArguments.GetParameter("cudnn_off", CudnnOffDefault);

			public FSharpOption<double> MinCalibRange => operatorArguments.GetParameter<FSharpOption<double>>("min_calib_range", MinCalibRangeDefault);

			public FSharpOption<double> MaxCalibRange => operatorArguments.GetParameter<FSharpOption<double>>("max_calib_range", MaxCalibRangeDefault);

			internal BatchNorm(Arguments<Symbol> operatorArguments)
				: base("BatchNorm", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BatchNorm CreateFromArguments(Arguments<Symbol> args)
			{
				return new BatchNorm(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BatchNorm(OperatorArguments.AddReplace(args));
			}

			public BatchNorm([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<Symbol> movingMean, [Optional] [OptionalArgument] FSharpOption<Symbol> movingVar, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<bool> fixGamma, [Optional] [OptionalArgument] FSharpOption<bool> useGlobalStats, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<double> minCalibRange, [Optional] [OptionalArgument] FSharpOption<double> maxCalibRange)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol gamma2 = Operators.DefaultArg<Symbol>(gamma, (Symbol)new ImplicitVariable());
				Symbol beta2 = Operators.DefaultArg<Symbol>(beta, (Symbol)new ImplicitVariable());
				Symbol movingMean2 = Operators.DefaultArg<Symbol>(movingMean, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(movingVar, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(gamma2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(beta2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("moving_mean", OpArg<Symbol>.NewInput(movingMean2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("moving_var", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00407629_002D576(), eps))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00407630_002D577(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("fix_gamma", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00407631_002D578(), fixGamma))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_global_stats", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00407632_002D579(), useGlobalStats))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00407633_002D580(), outputMeanVar))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00407634_002D581(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00407635_002D582(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_calib_range", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00407636_002D583(), minCalibRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_calib_range", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00407637_002D584(), maxCalibRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))));
			}

			public BatchNorm With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<Symbol> movingMean, [Optional] [OptionalArgument] FSharpOption<Symbol> movingVar, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<bool> fixGamma, [Optional] [OptionalArgument] FSharpOption<bool> useGlobalStats, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<double> minCalibRange, [Optional] [OptionalArgument] FSharpOption<double> maxCalibRange)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00407740_002D585(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407726_002D586(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407727_002D587(), gamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407728_002D588(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407729_002D589(), movingMean), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407730_002D590(), movingVar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407731_002D591(), eps), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407732_002D592(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407733_002D593(), fixGamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407734_002D594(), useGlobalStats), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407735_002D595(), outputMeanVar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407736_002D596(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407737_002D597(), cudnnOff), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407738_002D598(), minCalibRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407739_002D599(), maxCalibRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))))));
				return new BatchNorm(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Concat : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int DimDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int Dim => operatorArguments.GetParameter("dim", DimDefault);

			internal Concat(Arguments<Symbol> operatorArguments)
				: base("Concat", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Concat CreateFromArguments(Arguments<Symbol> args)
			{
				return new Concat(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Concat(OperatorArguments.AddReplace(args));
			}

			public Concat([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> dim)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00407790_002D14(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dim", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00407794_002D600(), dim))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Concat With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> dim)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00407813_002D601(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407811_002D602(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407812_002D603(), dim), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Concat(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RnnParamConcat : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int DimDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int Dim => operatorArguments.GetParameter("dim", DimDefault);

			internal RnnParamConcat(Arguments<Symbol> operatorArguments)
				: base("_rnn_param_concat", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RnnParamConcat CreateFromArguments(Arguments<Symbol> args)
			{
				return new RnnParamConcat(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RnnParamConcat(OperatorArguments.AddReplace(args));
			}

			public RnnParamConcat([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> dim)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_00407824_002D15(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dim", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00407828_002D604(), dim))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public RnnParamConcat With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> dim)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00407847_002D605(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407845_002D606(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00407846_002D607(), dim), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new RnnParamConcat(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Convolution : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] StrideDefault => new int[0];

			public static int[] DilateDefault => new int[0];

			public static int[] PadDefault => new int[0];

			public static int NumGroupDefault => 1;

			public static long WorkspaceDefault => 1024L;

			public static bool NoBiasDefault => false;

			public static FSharpOption<GeneratedArgumentTypes.CudnnTune> CudnnTuneDefault => null;

			public static bool CudnnOffDefault => false;

			public static FSharpOption<GeneratedArgumentTypes.ConvolutionLayout> LayoutDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Bias => operatorArguments.GetInput("bias");

			public IEnumerable<int> Kernel
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("kernel");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter kernel is missing"));
				}
			}

			public int NumFilter
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_filter");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_filter is missing"));
				}
			}

			public int[] Stride => operatorArguments.GetParameter("stride", StrideDefault);

			public int[] Dilate => operatorArguments.GetParameter("dilate", DilateDefault);

			public int[] Pad => operatorArguments.GetParameter("pad", PadDefault);

			public int NumGroup => operatorArguments.GetParameter("num_group", NumGroupDefault);

			public long Workspace => operatorArguments.GetParameter("workspace", WorkspaceDefault);

			public bool NoBias => operatorArguments.GetParameter("no_bias", NoBiasDefault);

			public FSharpOption<GeneratedArgumentTypes.CudnnTune> CudnnTune => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.CudnnTune>>("cudnn_tune", CudnnTuneDefault);

			public bool CudnnOff => operatorArguments.GetParameter("cudnn_off", CudnnOffDefault);

			public FSharpOption<GeneratedArgumentTypes.ConvolutionLayout> Layout => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.ConvolutionLayout>>("layout", LayoutDefault);

			internal Convolution(Arguments<Symbol> operatorArguments)
				: base("Convolution", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Convolution CreateFromArguments(Arguments<Symbol> args)
			{
				return new Convolution(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Convolution(OperatorArguments.AddReplace(args));
			}

			public Convolution(Symbol data, Symbol weight, Symbol bias, IEnumerable<int> kernel, int numFilter, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.CudnnTune> cudnnTune, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ConvolutionLayout> layout)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(bias)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00407965_002D608(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00407966_002D609(), dilate))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00407967_002D610(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00407968_002D611(), numGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_00407969_002D612(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00407970_002D613(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_tune", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.CudnnTune, object>((FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>)new operatorArguments_00407971_002D614(), cudnnTune))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00407972_002D615(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ConvolutionLayout, object>((FSharpFunc<GeneratedArgumentTypes.ConvolutionLayout, object>)new operatorArguments_00407973_002D616(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))))
			{
			}

			public Convolution(IEnumerable<int> kernel, int numFilter, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.CudnnTune> cudnnTune, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ConvolutionLayout> layout)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(bias, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408090_002D617(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408091_002D618(), dilate))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408092_002D619(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00408093_002D620(), numGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_00408094_002D621(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408095_002D622(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_tune", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.CudnnTune, object>((FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>)new operatorArguments_00408096_002D623(), cudnnTune))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408097_002D624(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ConvolutionLayout, object>((FSharpFunc<GeneratedArgumentTypes.ConvolutionLayout, object>)new operatorArguments_00408098_002D625(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))));
			}

			public Convolution With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> kernel, [Optional] [OptionalArgument] FSharpOption<int> numFilter, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.CudnnTune> cudnnTune, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ConvolutionLayout> layout)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00408204_002D626(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408190_002D627(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408191_002D628(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408192_002D629(), bias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408193_002D630(), kernel), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408194_002D631(), numFilter), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408195_002D632(), stride), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408196_002D633(), dilate), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408197_002D634(), pad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408198_002D635(), numGroup), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408199_002D636(), workspace), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408200_002D637(), noBias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.CudnnTune, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.CudnnTune, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408201_002D638(), cudnnTune), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408202_002D639(), cudnnOff), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ConvolutionLayout, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ConvolutionLayout, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408203_002D640(), layout), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))))));
				return new Convolution(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class CTCLoss : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool UseDataLengthsDefault => false;

			public static bool UseLabelLengthsDefault => false;

			public static GeneratedArgumentTypes.BlankLabel BlankLabelDefault => GeneratedArgumentTypes.BlankLabel.First;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Label => operatorArguments.GetInput("label");

			public Symbol DataLengths => operatorArguments.GetInput("data_lengths");

			public Symbol LabelLengths => operatorArguments.GetInput("label_lengths");

			public bool UseDataLengths => operatorArguments.GetParameter("use_data_lengths", UseDataLengthsDefault);

			public bool UseLabelLengths => operatorArguments.GetParameter("use_label_lengths", UseLabelLengthsDefault);

			public GeneratedArgumentTypes.BlankLabel BlankLabel => operatorArguments.GetParameter("blank_label", BlankLabelDefault);

			internal CTCLoss(Arguments<Symbol> operatorArguments)
				: base("CTCLoss", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static CTCLoss CreateFromArguments(Arguments<Symbol> args)
			{
				return new CTCLoss(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new CTCLoss(OperatorArguments.AddReplace(args));
			}

			public CTCLoss([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<Symbol> dataLengths, [Optional] [OptionalArgument] FSharpOption<Symbol> labelLengths, [Optional] [OptionalArgument] FSharpOption<bool> useDataLengths, [Optional] [OptionalArgument] FSharpOption<bool> useLabelLengths, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.BlankLabel> blankLabel)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol label2 = Operators.DefaultArg<Symbol>(label, (Symbol)new ImplicitVariable());
				Symbol dataLengths2 = Operators.DefaultArg<Symbol>(dataLengths, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(labelLengths, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(label2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data_lengths", OpArg<Symbol>.NewInput(dataLengths2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("label_lengths", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_data_lengths", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408283_002D641(), useDataLengths))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_label_lengths", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408284_002D642(), useLabelLengths))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("blank_label", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.BlankLabel, object>((FSharpFunc<GeneratedArgumentTypes.BlankLabel, object>)new operatorArguments_00408285_002D643(), blankLabel))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))));
			}

			public CTCLoss With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<Symbol> dataLengths, [Optional] [OptionalArgument] FSharpOption<Symbol> labelLengths, [Optional] [OptionalArgument] FSharpOption<bool> useDataLengths, [Optional] [OptionalArgument] FSharpOption<bool> useLabelLengths, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.BlankLabel> blankLabel)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00408335_002D644(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408328_002D645(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408329_002D646(), label), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408330_002D647(), dataLengths), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408331_002D648(), labelLengths), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408332_002D649(), useDataLengths), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408333_002D650(), useLabelLengths), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.BlankLabel, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.BlankLabel, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408334_002D651(), blankLabel), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))));
				return new CTCLoss(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class CuDNNBatchNorm : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double EpsDefault => 0.001;

			public static double MomentumDefault => 0.9;

			public static bool FixGammaDefault => true;

			public static bool UseGlobalStatsDefault => false;

			public static bool OutputMeanVarDefault => false;

			public static int AxisDefault => 1;

			public static bool CudnnOffDefault => false;

			public static FSharpOption<double> MinCalibRangeDefault => null;

			public static FSharpOption<double> MaxCalibRangeDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Gamma => operatorArguments.GetInput("gamma");

			public Symbol Beta => operatorArguments.GetInput("beta");

			public Symbol MovingMean => operatorArguments.GetInput("moving_mean");

			public Symbol MovingVar => operatorArguments.GetInput("moving_var");

			public double Eps => operatorArguments.GetParameter("eps", EpsDefault);

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public bool FixGamma => operatorArguments.GetParameter("fix_gamma", FixGammaDefault);

			public bool UseGlobalStats => operatorArguments.GetParameter("use_global_stats", UseGlobalStatsDefault);

			public bool OutputMeanVar => operatorArguments.GetParameter("output_mean_var", OutputMeanVarDefault);

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			public bool CudnnOff => operatorArguments.GetParameter("cudnn_off", CudnnOffDefault);

			public FSharpOption<double> MinCalibRange => operatorArguments.GetParameter<FSharpOption<double>>("min_calib_range", MinCalibRangeDefault);

			public FSharpOption<double> MaxCalibRange => operatorArguments.GetParameter<FSharpOption<double>>("max_calib_range", MaxCalibRangeDefault);

			internal CuDNNBatchNorm(Arguments<Symbol> operatorArguments)
				: base("CuDNNBatchNorm", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static CuDNNBatchNorm CreateFromArguments(Arguments<Symbol> args)
			{
				return new CuDNNBatchNorm(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new CuDNNBatchNorm(OperatorArguments.AddReplace(args));
			}

			public CuDNNBatchNorm([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<Symbol> movingMean, [Optional] [OptionalArgument] FSharpOption<Symbol> movingVar, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<bool> fixGamma, [Optional] [OptionalArgument] FSharpOption<bool> useGlobalStats, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<double> minCalibRange, [Optional] [OptionalArgument] FSharpOption<double> maxCalibRange)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol gamma2 = Operators.DefaultArg<Symbol>(gamma, (Symbol)new ImplicitVariable());
				Symbol beta2 = Operators.DefaultArg<Symbol>(beta, (Symbol)new ImplicitVariable());
				Symbol movingMean2 = Operators.DefaultArg<Symbol>(movingMean, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(movingVar, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(gamma2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(beta2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("moving_mean", OpArg<Symbol>.NewInput(movingMean2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("moving_var", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00408383_002D652(), eps))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00408384_002D653(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("fix_gamma", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408385_002D654(), fixGamma))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_global_stats", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408386_002D655(), useGlobalStats))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408387_002D656(), outputMeanVar))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00408388_002D657(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408389_002D658(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_calib_range", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00408390_002D659(), minCalibRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_calib_range", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00408391_002D660(), maxCalibRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))));
			}

			public CuDNNBatchNorm With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<Symbol> movingMean, [Optional] [OptionalArgument] FSharpOption<Symbol> movingVar, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<bool> fixGamma, [Optional] [OptionalArgument] FSharpOption<bool> useGlobalStats, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<double> minCalibRange, [Optional] [OptionalArgument] FSharpOption<double> maxCalibRange)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00408494_002D661(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408480_002D662(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408481_002D663(), gamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408482_002D664(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408483_002D665(), movingMean), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408484_002D666(), movingVar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408485_002D667(), eps), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408486_002D668(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408487_002D669(), fixGamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408488_002D670(), useGlobalStats), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408489_002D671(), outputMeanVar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408490_002D672(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408491_002D673(), cudnnOff), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408492_002D674(), minCalibRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408493_002D675(), maxCalibRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))))));
				return new CuDNNBatchNorm(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Deconvolution : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] StrideDefault => new int[0];

			public static int[] DilateDefault => new int[0];

			public static int[] PadDefault => new int[0];

			public static int[] AdjDefault => new int[0];

			public static int[] TargetShapeDefault => new int[0];

			public static int NumGroupDefault => 1;

			public static long WorkspaceDefault => 512L;

			public static bool NoBiasDefault => true;

			public static FSharpOption<GeneratedArgumentTypes.CudnnTune> CudnnTuneDefault => null;

			public static bool CudnnOffDefault => false;

			public static FSharpOption<GeneratedArgumentTypes.DeconvolutionLayout> LayoutDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Bias => operatorArguments.GetInput("bias");

			public IEnumerable<int> Kernel
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("kernel");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter kernel is missing"));
				}
			}

			public int NumFilter
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_filter");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_filter is missing"));
				}
			}

			public int[] Stride => operatorArguments.GetParameter("stride", StrideDefault);

			public int[] Dilate => operatorArguments.GetParameter("dilate", DilateDefault);

			public int[] Pad => operatorArguments.GetParameter("pad", PadDefault);

			public int[] Adj => operatorArguments.GetParameter("adj", AdjDefault);

			public int[] TargetShape => operatorArguments.GetParameter("target_shape", TargetShapeDefault);

			public int NumGroup => operatorArguments.GetParameter("num_group", NumGroupDefault);

			public long Workspace => operatorArguments.GetParameter("workspace", WorkspaceDefault);

			public bool NoBias => operatorArguments.GetParameter("no_bias", NoBiasDefault);

			public FSharpOption<GeneratedArgumentTypes.CudnnTune> CudnnTune => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.CudnnTune>>("cudnn_tune", CudnnTuneDefault);

			public bool CudnnOff => operatorArguments.GetParameter("cudnn_off", CudnnOffDefault);

			public FSharpOption<GeneratedArgumentTypes.DeconvolutionLayout> Layout => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.DeconvolutionLayout>>("layout", LayoutDefault);

			internal Deconvolution(Arguments<Symbol> operatorArguments)
				: base("Deconvolution", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Deconvolution CreateFromArguments(Arguments<Symbol> args)
			{
				return new Deconvolution(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Deconvolution(OperatorArguments.AddReplace(args));
			}

			public Deconvolution(Symbol data, Symbol weight, Symbol bias, IEnumerable<int> kernel, int numFilter, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> adj, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> targetShape, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.CudnnTune> cudnnTune, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.DeconvolutionLayout> layout)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(bias)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408541_002D676(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408542_002D677(), dilate))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408543_002D678(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("adj", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408544_002D679(), adj))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("target_shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408545_002D680(), targetShape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00408546_002D681(), numGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_00408547_002D682(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408548_002D683(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_tune", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.CudnnTune, object>((FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>)new operatorArguments_00408549_002D684(), cudnnTune))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408550_002D685(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.DeconvolutionLayout, object>((FSharpFunc<GeneratedArgumentTypes.DeconvolutionLayout, object>)new operatorArguments_00408551_002D686(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))))))
			{
			}

			public Deconvolution(IEnumerable<int> kernel, int numFilter, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> adj, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> targetShape, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.CudnnTune> cudnnTune, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.DeconvolutionLayout> layout)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(bias, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408597_002D687(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408598_002D688(), dilate))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408599_002D689(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("adj", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408600_002D690(), adj))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("target_shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408601_002D691(), targetShape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00408602_002D692(), numGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_00408603_002D693(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408604_002D694(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_tune", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.CudnnTune, object>((FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>)new operatorArguments_00408605_002D695(), cudnnTune))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408606_002D696(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.DeconvolutionLayout, object>((FSharpFunc<GeneratedArgumentTypes.DeconvolutionLayout, object>)new operatorArguments_00408607_002D697(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))))));
			}

			public Deconvolution With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> kernel, [Optional] [OptionalArgument] FSharpOption<int> numFilter, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> adj, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> targetShape, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.CudnnTune> cudnnTune, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.DeconvolutionLayout> layout)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00408726_002D698(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408710_002D699(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408711_002D700(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408712_002D701(), bias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408713_002D702(), kernel), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408714_002D703(), numFilter), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408715_002D704(), stride), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408716_002D705(), dilate), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408717_002D706(), pad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408718_002D707(), adj), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408719_002D708(), targetShape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408720_002D709(), numGroup), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408721_002D710(), workspace), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408722_002D711(), noBias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.CudnnTune, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.CudnnTune, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408723_002D712(), cudnnTune), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408724_002D713(), cudnnOff), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.DeconvolutionLayout, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.DeconvolutionLayout, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408725_002D714(), layout), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))))))));
				return new Deconvolution(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Dropout : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double PDefault => 0.5;

			public static GeneratedArgumentTypes.DropoutMode ModeDefault => GeneratedArgumentTypes.DropoutMode.Training;

			public static int[] AxesDefault => new int[0];

			public static FSharpOption<bool> CudnnOffDefault => FSharpOption<bool>.Some(false);

			public Symbol Data => operatorArguments.GetInput("data");

			public double P => operatorArguments.GetParameter("p", PDefault);

			public GeneratedArgumentTypes.DropoutMode Mode => operatorArguments.GetParameter("mode", ModeDefault);

			public int[] Axes => operatorArguments.GetParameter("axes", AxesDefault);

			public FSharpOption<bool> CudnnOff => operatorArguments.GetParameter<FSharpOption<bool>>("cudnn_off", CudnnOffDefault);

			internal Dropout(Arguments<Symbol> operatorArguments)
				: base("Dropout", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Dropout CreateFromArguments(Arguments<Symbol> args)
			{
				return new Dropout(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Dropout(OperatorArguments.AddReplace(args));
			}

			public Dropout([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> p, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.DropoutMode> mode, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00408779_002D715(), p))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.DropoutMode, object>((FSharpFunc<GeneratedArgumentTypes.DropoutMode, object>)new operatorArguments_00408780_002D716(), mode))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00408781_002D717(), axes))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408782_002D718(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public Dropout With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> p, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.DropoutMode> mode, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00408825_002D719(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408820_002D720(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408821_002D721(), p), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.DropoutMode, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.DropoutMode, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408822_002D722(), mode), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408823_002D723(), axes), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408824_002D724(), cudnnOff), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new Dropout(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class FullyConnected : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool NoBiasDefault => false;

			public static bool FlattenDefault => true;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Bias => operatorArguments.GetInput("bias");

			public int NumHidden
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_hidden");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_hidden is missing"));
				}
			}

			public bool NoBias => operatorArguments.GetParameter("no_bias", NoBiasDefault);

			public bool Flatten => operatorArguments.GetParameter("flatten", FlattenDefault);

			internal FullyConnected(Arguments<Symbol> operatorArguments)
				: base("FullyConnected", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static FullyConnected CreateFromArguments(Arguments<Symbol> args)
			{
				return new FullyConnected(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new FullyConnected(OperatorArguments.AddReplace(args));
			}

			public FullyConnected(Symbol data, Symbol weight, Symbol bias, int numHidden, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<bool> flatten)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(bias)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_hidden", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numHidden))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408883_002D725(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("flatten", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408884_002D726(), flatten))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public FullyConnected(int numHidden, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<bool> flatten)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(bias, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_hidden", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numHidden))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408941_002D727(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("flatten", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00408942_002D728(), flatten))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public FullyConnected With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<int> numHidden, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<bool> flatten)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00408984_002D729(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408978_002D730(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408979_002D731(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408980_002D732(), bias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408981_002D733(), numHidden), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408982_002D734(), noBias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00408983_002D735(), flatten), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new FullyConnected(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class GroupNorm : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int NumGroupsDefault => 1;

			public static double EpsDefault => 1E-05;

			public static bool OutputMeanVarDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Gamma => operatorArguments.GetInput("gamma");

			public Symbol Beta => operatorArguments.GetInput("beta");

			public int NumGroups => operatorArguments.GetParameter("num_groups", NumGroupsDefault);

			public double Eps => operatorArguments.GetParameter("eps", EpsDefault);

			public bool OutputMeanVar => operatorArguments.GetParameter("output_mean_var", OutputMeanVarDefault);

			internal GroupNorm(Arguments<Symbol> operatorArguments)
				: base("GroupNorm", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static GroupNorm CreateFromArguments(Arguments<Symbol> args)
			{
				return new GroupNorm(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new GroupNorm(OperatorArguments.AddReplace(args));
			}

			public GroupNorm([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<int> numGroups, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol gamma2 = Operators.DefaultArg<Symbol>(gamma, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(beta, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(gamma2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_groups", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00409026_002D736(), numGroups))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00409027_002D737(), eps))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00409028_002D738(), outputMeanVar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public GroupNorm With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<int> numGroups, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00409073_002D739(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409067_002D740(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409068_002D741(), gamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409069_002D742(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409070_002D743(), numGroups), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409071_002D744(), eps), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409072_002D745(), outputMeanVar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new GroupNorm(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LayerNorm : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int AxisDefault => -1;

			public static double EpsDefault => 1E-05;

			public static bool OutputMeanVarDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Gamma => operatorArguments.GetInput("gamma");

			public Symbol Beta => operatorArguments.GetInput("beta");

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			public double Eps => operatorArguments.GetParameter("eps", EpsDefault);

			public bool OutputMeanVar => operatorArguments.GetParameter("output_mean_var", OutputMeanVarDefault);

			internal LayerNorm(Arguments<Symbol> operatorArguments)
				: base("LayerNorm", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LayerNorm CreateFromArguments(Arguments<Symbol> args)
			{
				return new LayerNorm(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LayerNorm(OperatorArguments.AddReplace(args));
			}

			public LayerNorm([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol gamma2 = Operators.DefaultArg<Symbol>(gamma, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(beta, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(gamma2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00409128_002D746(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00409129_002D747(), eps))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00409130_002D748(), outputMeanVar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public LayerNorm With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00409175_002D749(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409169_002D750(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409170_002D751(), gamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409171_002D752(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409172_002D753(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409173_002D754(), eps), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409174_002D755(), outputMeanVar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new LayerNorm(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LogSoftmax : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int AxisDefault => -1;

			public static FSharpOption<double> TemperatureDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public static FSharpOption<bool> UseLengthDefault => FSharpOption<bool>.Some(false);

			public Symbol Data => operatorArguments.GetInput("data");

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			public FSharpOption<double> Temperature => operatorArguments.GetParameter<FSharpOption<double>>("temperature", TemperatureDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			public FSharpOption<bool> UseLength => operatorArguments.GetParameter<FSharpOption<bool>>("use_length", UseLengthDefault);

			internal LogSoftmax(Arguments<Symbol> operatorArguments)
				: base("log_softmax", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LogSoftmax CreateFromArguments(Arguments<Symbol> args)
			{
				return new LogSoftmax(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LogSoftmax(OperatorArguments.AddReplace(args));
			}

			public LogSoftmax([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<double> temperature, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> useLength)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00409212_002D756(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("temperature", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00409213_002D757(), temperature))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_00409214_002D758(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_length", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00409215_002D759(), useLength))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public LogSoftmax With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<double> temperature, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> useLength)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00409258_002D760(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409253_002D761(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409254_002D762(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409255_002D763(), temperature), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409256_002D764(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409257_002D765(), useLength), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new LogSoftmax(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LRN : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double AlphaDefault => 0.0001;

			public static double BetaDefault => 0.75;

			public static double KnormDefault => 2.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public int Nsize
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("nsize");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter nsize is missing"));
				}
			}

			public double Alpha => operatorArguments.GetParameter("alpha", AlphaDefault);

			public double Beta => operatorArguments.GetParameter("beta", BetaDefault);

			public double Knorm => operatorArguments.GetParameter("knorm", KnormDefault);

			internal LRN(Arguments<Symbol> operatorArguments)
				: base("LRN", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LRN CreateFromArguments(Arguments<Symbol> args)
			{
				return new LRN(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LRN(OperatorArguments.AddReplace(args));
			}

			public LRN(Symbol data, int nsize, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<double> beta, [Optional] [OptionalArgument] FSharpOption<double> knorm)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("nsize", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)nsize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00409297_002D766(), alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00409298_002D767(), beta))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("knorm", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00409299_002D768(), knorm))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public LRN(int nsize, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<double> beta, [Optional] [OptionalArgument] FSharpOption<double> knorm)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("nsize", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)nsize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00409335_002D769(), alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00409336_002D770(), beta))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("knorm", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00409337_002D771(), knorm))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public LRN With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> nsize, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<double> beta, [Optional] [OptionalArgument] FSharpOption<double> knorm)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00409377_002D772(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409372_002D773(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409373_002D774(), nsize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409374_002D775(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409375_002D776(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409376_002D777(), knorm), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new LRN(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Moments : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxesDefault => null;

			public static bool KeepdimsDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Axes => operatorArguments.GetParameter<FSharpOption<int[]>>("axes", AxesDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			internal Moments(Arguments<Symbol> operatorArguments)
				: base("moments", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Moments CreateFromArguments(Arguments<Symbol> args)
			{
				return new Moments(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Moments(OperatorArguments.AddReplace(args));
			}

			public Moments([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00409416_002D778(), axes))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00409417_002D779(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public Moments With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00409444_002D780(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409441_002D781(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409442_002D782(), axes), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409443_002D783(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new Moments(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Pooling : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] KernelDefault => new int[0];

			public static GeneratedArgumentTypes.PoolType PoolTypeDefault => GeneratedArgumentTypes.PoolType.Max;

			public static bool GlobalPoolDefault => false;

			public static bool CudnnOffDefault => false;

			public static GeneratedArgumentTypes.PoolingConvention PoolingConventionDefault => GeneratedArgumentTypes.PoolingConvention.Valid;

			public static int[] StrideDefault => new int[0];

			public static int[] PadDefault => new int[0];

			public static FSharpOption<int> PValueDefault => null;

			public static FSharpOption<bool> CountIncludePadDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.PoolingLayout> LayoutDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public int[] Kernel => operatorArguments.GetParameter("kernel", KernelDefault);

			public GeneratedArgumentTypes.PoolType PoolType => operatorArguments.GetParameter("pool_type", PoolTypeDefault);

			public bool GlobalPool => operatorArguments.GetParameter("global_pool", GlobalPoolDefault);

			public bool CudnnOff => operatorArguments.GetParameter("cudnn_off", CudnnOffDefault);

			public GeneratedArgumentTypes.PoolingConvention PoolingConvention => operatorArguments.GetParameter("pooling_convention", PoolingConventionDefault);

			public int[] Stride => operatorArguments.GetParameter("stride", StrideDefault);

			public int[] Pad => operatorArguments.GetParameter("pad", PadDefault);

			public FSharpOption<int> PValue => operatorArguments.GetParameter<FSharpOption<int>>("p_value", PValueDefault);

			public FSharpOption<bool> CountIncludePad => operatorArguments.GetParameter<FSharpOption<bool>>("count_include_pad", CountIncludePadDefault);

			public FSharpOption<GeneratedArgumentTypes.PoolingLayout> Layout => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.PoolingLayout>>("layout", LayoutDefault);

			internal Pooling(Arguments<Symbol> operatorArguments)
				: base("Pooling", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Pooling CreateFromArguments(Arguments<Symbol> args)
			{
				return new Pooling(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Pooling(OperatorArguments.AddReplace(args));
			}

			public Pooling([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> kernel, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PoolType> poolType, [Optional] [OptionalArgument] FSharpOption<bool> globalPool, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PoolingConvention> poolingConvention, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> pValue, [Optional] [OptionalArgument] FSharpOption<bool> countIncludePad, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PoolingLayout> layout)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00409530_002D784(), kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pool_type", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.PoolType, object>((FSharpFunc<GeneratedArgumentTypes.PoolType, object>)new operatorArguments_00409531_002D785(), poolType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("global_pool", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00409532_002D786(), globalPool))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00409533_002D787(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pooling_convention", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.PoolingConvention, object>((FSharpFunc<GeneratedArgumentTypes.PoolingConvention, object>)new operatorArguments_00409534_002D788(), poolingConvention))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00409535_002D789(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_00409536_002D790(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("p_value", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00409537_002D791(), pValue))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("count_include_pad", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00409538_002D792(), countIncludePad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.PoolingLayout, object>((FSharpFunc<GeneratedArgumentTypes.PoolingLayout, object>)new operatorArguments_00409539_002D793(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))))
			{
			}

			public Pooling With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> kernel, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PoolType> poolType, [Optional] [OptionalArgument] FSharpOption<bool> globalPool, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PoolingConvention> poolingConvention, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> pValue, [Optional] [OptionalArgument] FSharpOption<bool> countIncludePad, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PoolingLayout> layout)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00409633_002D794(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409622_002D795(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409623_002D796(), kernel), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.PoolType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.PoolType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409624_002D797(), poolType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409625_002D798(), globalPool), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409626_002D799(), cudnnOff), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.PoolingConvention, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.PoolingConvention, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409627_002D800(), poolingConvention), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409628_002D801(), stride), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409629_002D802(), pad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409630_002D803(), pValue), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409631_002D804(), countIncludePad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.PoolingLayout, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.PoolingLayout, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409632_002D805(), layout), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))))));
				return new Pooling(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Softmax : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int AxisDefault => -1;

			public static FSharpOption<double> TemperatureDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public static FSharpOption<bool> UseLengthDefault => FSharpOption<bool>.Some(false);

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Length => operatorArguments.GetInput("length");

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			public FSharpOption<double> Temperature => operatorArguments.GetParameter<FSharpOption<double>>("temperature", TemperatureDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			public FSharpOption<bool> UseLength => operatorArguments.GetParameter<FSharpOption<bool>>("use_length", UseLengthDefault);

			internal Softmax(Arguments<Symbol> operatorArguments)
				: base("softmax", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Softmax CreateFromArguments(Arguments<Symbol> args)
			{
				return new Softmax(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Softmax(OperatorArguments.AddReplace(args));
			}

			public Softmax([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> length, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<double> temperature, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> useLength)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(length, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("length", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00409683_002D806(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("temperature", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00409684_002D807(), temperature))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_00409685_002D808(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_length", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00409686_002D809(), useLength))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public Softmax With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> length, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<double> temperature, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> useLength)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00409734_002D810(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409728_002D811(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409729_002D812(), length), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409730_002D813(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409731_002D814(), temperature), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409732_002D815(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409733_002D816(), useLength), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new Softmax(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SoftmaxActivation : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static GeneratedArgumentTypes.SoftmaxActivationMode ModeDefault => GeneratedArgumentTypes.SoftmaxActivationMode.Instance;

			public Symbol Data => operatorArguments.GetInput("data");

			public GeneratedArgumentTypes.SoftmaxActivationMode Mode => operatorArguments.GetParameter("mode", ModeDefault);

			internal SoftmaxActivation(Arguments<Symbol> operatorArguments)
				: base("SoftmaxActivation", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SoftmaxActivation CreateFromArguments(Arguments<Symbol> args)
			{
				return new SoftmaxActivation(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SoftmaxActivation(OperatorArguments.AddReplace(args));
			}

			public SoftmaxActivation([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.SoftmaxActivationMode> mode)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.SoftmaxActivationMode, object>((FSharpFunc<GeneratedArgumentTypes.SoftmaxActivationMode, object>)new operatorArguments_00409775_002D817(), mode))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public SoftmaxActivation With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.SoftmaxActivationMode> mode)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00409794_002D818(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409792_002D819(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.SoftmaxActivationMode, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.SoftmaxActivationMode, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409793_002D820(), mode), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new SoftmaxActivation(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Softmin : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int AxisDefault => -1;

			public static FSharpOption<double> TemperatureDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public static FSharpOption<bool> UseLengthDefault => FSharpOption<bool>.Some(false);

			public Symbol Data => operatorArguments.GetInput("data");

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			public FSharpOption<double> Temperature => operatorArguments.GetParameter<FSharpOption<double>>("temperature", TemperatureDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			public FSharpOption<bool> UseLength => operatorArguments.GetParameter<FSharpOption<bool>>("use_length", UseLengthDefault);

			internal Softmin(Arguments<Symbol> operatorArguments)
				: base("softmin", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Softmin CreateFromArguments(Arguments<Symbol> args)
			{
				return new Softmin(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Softmin(OperatorArguments.AddReplace(args));
			}

			public Softmin([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<double> temperature, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> useLength)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00409841_002D821(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("temperature", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_00409842_002D822(), temperature))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_00409843_002D823(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_length", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_00409844_002D824(), useLength))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public Softmin With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<double> temperature, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> useLength)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_00409887_002D825(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409882_002D826(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409883_002D827(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409884_002D828(), temperature), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409885_002D829(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_00409886_002D830(), useLength), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new Softmin(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class UpSampling : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int NumFilterDefault => 0;

			public static GeneratedArgumentTypes.MultiInputMode MultiInputModeDefault => GeneratedArgumentTypes.MultiInputMode.Concat;

			public static long WorkspaceDefault => 512L;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int Scale
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scale");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter scale is missing"));
				}
			}

			public GeneratedArgumentTypes.SampleType SampleType
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("sample_type");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return IntrinsicFunctions.UnboxGeneric<GeneratedArgumentTypes.SampleType>(v);
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<GeneratedArgumentTypes.SampleType, GeneratedArgumentTypes.SampleType>((PrintfFormat<GeneratedArgumentTypes.SampleType, Unit, string, GeneratedArgumentTypes.SampleType>)(object)new PrintfFormat<GeneratedArgumentTypes.SampleType, Unit, string, GeneratedArgumentTypes.SampleType, Unit>("Required parameter sample_type is missing"));
				}
			}

			public int NumFilter => operatorArguments.GetParameter("num_filter", NumFilterDefault);

			public GeneratedArgumentTypes.MultiInputMode MultiInputMode => operatorArguments.GetParameter("multi_input_mode", MultiInputModeDefault);

			public long Workspace => operatorArguments.GetParameter("workspace", WorkspaceDefault);

			internal UpSampling(Arguments<Symbol> operatorArguments)
				: base("UpSampling", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static UpSampling CreateFromArguments(Arguments<Symbol> args)
			{
				return new UpSampling(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new UpSampling(OperatorArguments.AddReplace(args));
			}

			public UpSampling(IEnumerable<Symbol> data, int scale, GeneratedArgumentTypes.SampleType sampleType, [Optional] [OptionalArgument] FSharpOption<int> numFilter, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.MultiInputMode> multiInputMode, [Optional] [OptionalArgument] FSharpOption<long> workspace)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sampleType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_00409963_002D831(), numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("multi_input_mode", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.MultiInputMode, object>((FSharpFunc<GeneratedArgumentTypes.MultiInputMode, object>)new operatorArguments_00409964_002D832(), multiInputMode))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_00409965_002D833(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public UpSampling(int scale, GeneratedArgumentTypes.SampleType sampleType, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> numFilter, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.MultiInputMode> multiInputMode, [Optional] [OptionalArgument] FSharpOption<long> workspace)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_004010032_002D16(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sampleType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004010038_002D834(), numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("multi_input_mode", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.MultiInputMode, object>((FSharpFunc<GeneratedArgumentTypes.MultiInputMode, object>)new operatorArguments_004010039_002D835(), multiInputMode))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_004010040_002D836(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public UpSampling With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> scale, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.SampleType> sampleType, [Optional] [OptionalArgument] FSharpOption<int> numFilter, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.MultiInputMode> multiInputMode, [Optional] [OptionalArgument] FSharpOption<long> workspace)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010085_002D837(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010079_002D838(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010080_002D839(), scale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.SampleType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.SampleType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010081_002D840(), sampleType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010082_002D841(), numFilter), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.MultiInputMode, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.MultiInputMode, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010083_002D842(), multiInputMode), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010084_002D843(), workspace), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new UpSampling(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiSvd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("A");

			internal NpiSvd(Arguments<Symbol> operatorArguments)
				: base("_npi_svd", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiSvd CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiSvd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiSvd(OperatorArguments.AddReplace(args));
			}

			public NpiSvd([Optional] [OptionalArgument] FSharpOption<Symbol> A)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiSvd With([Optional] [OptionalArgument] FSharpOption<Symbol> A)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010111_002D844(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010110_002D845(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiSvd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiCholesky : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("A");

			internal NpiCholesky(Arguments<Symbol> operatorArguments)
				: base("_npi_cholesky", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiCholesky CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiCholesky(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiCholesky(OperatorArguments.AddReplace(args));
			}

			public NpiCholesky([Optional] [OptionalArgument] FSharpOption<Symbol> A)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiCholesky With([Optional] [OptionalArgument] FSharpOption<Symbol> A)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010137_002D846(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010136_002D847(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiCholesky(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiBooleanMaskAssignScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Mask => operatorArguments.GetInput("mask");

			public double Value
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("value");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter value is missing"));
				}
			}

			internal NpiBooleanMaskAssignScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_boolean_mask_assign_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiBooleanMaskAssignScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiBooleanMaskAssignScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiBooleanMaskAssignScalar(OperatorArguments.AddReplace(args));
			}

			public NpiBooleanMaskAssignScalar(Symbol data, Symbol mask, double value)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mask", OpArg<Symbol>.NewInput(mask)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("value", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)value))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpiBooleanMaskAssignScalar(double value, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> mask)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(mask, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mask", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("value", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)value))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public NpiBooleanMaskAssignScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> mask, [Optional] [OptionalArgument] FSharpOption<double> value)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010196_002D848(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010193_002D849(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010194_002D850(), mask), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010195_002D851(), value), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpiBooleanMaskAssignScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiBooleanMaskAssignTensor : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Mask => operatorArguments.GetInput("mask");

			public Symbol Value => operatorArguments.GetInput("value");

			internal NpiBooleanMaskAssignTensor(Arguments<Symbol> operatorArguments)
				: base("_npi_boolean_mask_assign_tensor", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiBooleanMaskAssignTensor CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiBooleanMaskAssignTensor(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiBooleanMaskAssignTensor(OperatorArguments.AddReplace(args));
			}

			public NpiBooleanMaskAssignTensor([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> mask, [Optional] [OptionalArgument] FSharpOption<Symbol> value)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol mask2 = Operators.DefaultArg<Symbol>(mask, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(value, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mask", OpArg<Symbol>.NewInput(mask2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("value", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public NpiBooleanMaskAssignTensor With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> mask, [Optional] [OptionalArgument] FSharpOption<Symbol> value)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010240_002D852(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010237_002D853(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010238_002D854(), mask), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010239_002D855(), value), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpiBooleanMaskAssignTensor(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiArgmax : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			internal NpiArgmax(Arguments<Symbol> operatorArguments)
				: base("_npi_argmax", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiArgmax CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiArgmax(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiArgmax(OperatorArguments.AddReplace(args));
			}

			public NpiArgmax([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004010257_002D856(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004010258_002D857(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpiArgmax With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010285_002D858(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010282_002D859(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010283_002D860(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010284_002D861(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpiArgmax(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiArgmin : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			internal NpiArgmin(Arguments<Symbol> operatorArguments)
				: base("_npi_argmin", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiArgmin CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiArgmin(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiArgmin(OperatorArguments.AddReplace(args));
			}

			public NpiArgmin([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004010302_002D862(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004010303_002D863(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpiArgmin With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010330_002D864(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010327_002D865(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010328_002D866(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010329_002D867(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpiArgmin(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpSum : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static FSharpOption<DataType> DtypeDefault => null;

			public static bool KeepdimsDefault => false;

			public static FSharpOption<double> InitialDefault => null;

			public Symbol A => operatorArguments.GetInput("a");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public FSharpOption<DataType> Dtype => operatorArguments.GetParameter<FSharpOption<DataType>>("dtype", DtypeDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public FSharpOption<double> Initial => operatorArguments.GetParameter<FSharpOption<double>>("initial", InitialDefault);

			internal NpSum(Arguments<Symbol> operatorArguments)
				: base("_np_sum", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpSum CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpSum(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpSum(OperatorArguments.AddReplace(args));
			}

			public NpSum([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<double> initial)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004010354_002D868(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004010355_002D869(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004010356_002D870(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("initial", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004010357_002D871(), initial))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public NpSum With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<double> initial)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010400_002D872(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010395_002D873(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010396_002D874(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010397_002D875(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010398_002D876(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010399_002D877(), initial), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new NpSum(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpMax : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public static FSharpOption<double> InitialDefault => null;

			public Symbol A => operatorArguments.GetInput("a");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public FSharpOption<double> Initial => operatorArguments.GetParameter<FSharpOption<double>>("initial", InitialDefault);

			internal NpMax(Arguments<Symbol> operatorArguments)
				: base("_np_max", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpMax CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpMax(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpMax(OperatorArguments.AddReplace(args));
			}

			public NpMax([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<double> initial)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004010422_002D878(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004010423_002D879(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("initial", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004010424_002D880(), initial))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public NpMax With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<double> initial)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010459_002D881(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010455_002D882(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010456_002D883(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010457_002D884(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010458_002D885(), initial), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new NpMax(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpMin : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public static FSharpOption<double> InitialDefault => null;

			public Symbol A => operatorArguments.GetInput("a");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public FSharpOption<double> Initial => operatorArguments.GetParameter<FSharpOption<double>>("initial", InitialDefault);

			internal NpMin(Arguments<Symbol> operatorArguments)
				: base("_np_min", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpMin CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpMin(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpMin(OperatorArguments.AddReplace(args));
			}

			public NpMin([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<double> initial)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004010481_002D886(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004010482_002D887(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("initial", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004010483_002D888(), initial))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public NpMin With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<double> initial)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010518_002D889(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010514_002D890(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010515_002D891(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010516_002D892(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010517_002D893(), initial), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new NpMin(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpProd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static FSharpOption<DataType> DtypeDefault => null;

			public static bool KeepdimsDefault => false;

			public static FSharpOption<double> InitialDefault => null;

			public Symbol A => operatorArguments.GetInput("a");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public FSharpOption<DataType> Dtype => operatorArguments.GetParameter<FSharpOption<DataType>>("dtype", DtypeDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public FSharpOption<double> Initial => operatorArguments.GetParameter<FSharpOption<double>>("initial", InitialDefault);

			internal NpProd(Arguments<Symbol> operatorArguments)
				: base("_np_prod", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpProd CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpProd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpProd(OperatorArguments.AddReplace(args));
			}

			public NpProd([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<double> initial)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004010539_002D894(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004010540_002D895(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004010541_002D896(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("initial", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004010542_002D897(), initial))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public NpProd With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<double> initial)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010585_002D898(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010580_002D899(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010581_002D900(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010582_002D901(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010583_002D902(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010584_002D903(), initial), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new NpProd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiMean : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static FSharpOption<DataType> DtypeDefault => null;

			public static bool KeepdimsDefault => false;

			public static FSharpOption<double> InitialDefault => null;

			public Symbol A => operatorArguments.GetInput("a");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public FSharpOption<DataType> Dtype => operatorArguments.GetParameter<FSharpOption<DataType>>("dtype", DtypeDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public FSharpOption<double> Initial => operatorArguments.GetParameter<FSharpOption<double>>("initial", InitialDefault);

			internal NpiMean(Arguments<Symbol> operatorArguments)
				: base("_npi_mean", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiMean CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiMean(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiMean(OperatorArguments.AddReplace(args));
			}

			public NpiMean([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<double> initial)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004010606_002D904(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004010607_002D905(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004010608_002D906(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("initial", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004010609_002D907(), initial))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public NpiMean With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<double> initial)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010652_002D908(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010647_002D909(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010648_002D910(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010649_002D911(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010650_002D912(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010651_002D913(), initial), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new NpiMean(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiStd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static FSharpOption<DataType> DtypeDefault => null;

			public static int DdofDefault => 0;

			public static bool KeepdimsDefault => false;

			public Symbol A => operatorArguments.GetInput("a");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public FSharpOption<DataType> Dtype => operatorArguments.GetParameter<FSharpOption<DataType>>("dtype", DtypeDefault);

			public int Ddof => operatorArguments.GetParameter("ddof", DdofDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			internal NpiStd(Arguments<Symbol> operatorArguments)
				: base("_npi_std", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiStd CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiStd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiStd(OperatorArguments.AddReplace(args));
			}

			public NpiStd([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<int> ddof, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004010673_002D914(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004010674_002D915(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("ddof", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004010675_002D916(), ddof))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004010676_002D917(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public NpiStd With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<int> ddof, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010719_002D918(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010714_002D919(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010715_002D920(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010716_002D921(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010717_002D922(), ddof), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010718_002D923(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new NpiStd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiVar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static FSharpOption<DataType> DtypeDefault => null;

			public static int DdofDefault => 0;

			public static bool KeepdimsDefault => false;

			public Symbol A => operatorArguments.GetInput("a");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public FSharpOption<DataType> Dtype => operatorArguments.GetParameter<FSharpOption<DataType>>("dtype", DtypeDefault);

			public int Ddof => operatorArguments.GetParameter("ddof", DdofDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			internal NpiVar(Arguments<Symbol> operatorArguments)
				: base("_npi_var", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiVar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiVar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiVar(OperatorArguments.AddReplace(args));
			}

			public NpiVar([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<int> ddof, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004010740_002D924(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004010741_002D925(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("ddof", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004010742_002D926(), ddof))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004010743_002D927(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public NpiVar With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<int> ddof, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010786_002D928(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010781_002D929(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010782_002D930(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010783_002D931(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010784_002D932(), ddof), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010785_002D933(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new NpiVar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpBroadcastTo : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public Symbol Array => operatorArguments.GetInput("array");

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			internal NpBroadcastTo(Arguments<Symbol> operatorArguments)
				: base("_np_broadcast_to", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpBroadcastTo CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpBroadcastTo(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpBroadcastTo(OperatorArguments.AddReplace(args));
			}

			public NpBroadcastTo([Optional] [OptionalArgument] FSharpOption<Symbol> array, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("array", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(array, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004010801_002D934(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpBroadcastTo With([Optional] [OptionalArgument] FSharpOption<Symbol> array, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010820_002D935(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010818_002D936(), array), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010819_002D937(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpBroadcastTo(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpCumsum : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> AxisDefault => null;

			public static FSharpOption<DataType> DtypeDefault => null;

			public Symbol A => operatorArguments.GetInput("a");

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			public FSharpOption<DataType> Dtype => operatorArguments.GetParameter<FSharpOption<DataType>>("dtype", DtypeDefault);

			internal NpCumsum(Arguments<Symbol> operatorArguments)
				: base("_np_cumsum", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpCumsum CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpCumsum(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpCumsum(OperatorArguments.AddReplace(args));
			}

			public NpCumsum([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004010840_002D938(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004010841_002D939(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpCumsum With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010868_002D940(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010865_002D941(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010866_002D942(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010867_002D943(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpCumsum(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiDiff : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int NDefault => 1;

			public static int AxisDefault => -1;

			public Symbol A => operatorArguments.GetInput("a");

			public int N => operatorArguments.GetParameter("n", NDefault);

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			internal NpiDiff(Arguments<Symbol> operatorArguments)
				: base("_npi_diff", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiDiff CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiDiff(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiDiff(OperatorArguments.AddReplace(args));
			}

			public NpiDiff([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<int> n, [Optional] [OptionalArgument] FSharpOption<int> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004010885_002D944(), n))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004010886_002D945(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpiDiff With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<int> n, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010913_002D946(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010910_002D947(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010911_002D948(), n), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010912_002D949(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpiDiff(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpDot : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("a");

			public Symbol B => operatorArguments.GetInput("b");

			internal NpDot(Arguments<Symbol> operatorArguments)
				: base("_np_dot", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpDot CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpDot(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpDot(OperatorArguments.AddReplace(args));
			}

			public NpDot([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> b)
			{
				Symbol a2 = Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(b, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpDot With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> b)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004010964_002D950(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010962_002D951(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004010963_002D952(), b), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpDot(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiEinsum : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static string SubscriptsDefault => "";

			public static int OptimizeDefault => 0;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public string Subscripts => operatorArguments.GetParameter("subscripts", SubscriptsDefault);

			public int Optimize => operatorArguments.GetParameter("optimize", OptimizeDefault);

			internal NpiEinsum(Arguments<Symbol> operatorArguments)
				: base("_npi_einsum", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiEinsum CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiEinsum(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiEinsum(OperatorArguments.AddReplace(args));
			}

			public NpiEinsum([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<string> subscripts, [Optional] [OptionalArgument] FSharpOption<int> optimize)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_004010980_002D17(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("subscripts", OpArg<Symbol>.NewParameter(OptionModule.Map<string, object>((FSharpFunc<string, object>)new operatorArguments_004010984_002D953(), subscripts))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("optimize", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004010985_002D954(), optimize))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpiEinsum With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<string> subscripts, [Optional] [OptionalArgument] FSharpOption<int> optimize)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011012_002D955(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011009_002D956(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<string, Tuple<string, OpArg<Symbol>>>((FSharpFunc<string, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011010_002D957(), subscripts), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011011_002D958(), optimize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpiEinsum(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiEqual : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiEqual(Arguments<Symbol> operatorArguments)
				: base("_npi_equal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiEqual CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiEqual(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiEqual(OperatorArguments.AddReplace(args));
			}

			public NpiEqual([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiEqual With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011044_002D959(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011042_002D960(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011043_002D961(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiEqual(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiNotEqual : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiNotEqual(Arguments<Symbol> operatorArguments)
				: base("_npi_not_equal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiNotEqual CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiNotEqual(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiNotEqual(OperatorArguments.AddReplace(args));
			}

			public NpiNotEqual([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiNotEqual With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011076_002D962(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011074_002D963(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011075_002D964(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiNotEqual(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiGreater : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiGreater(Arguments<Symbol> operatorArguments)
				: base("_npi_greater", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiGreater CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiGreater(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiGreater(OperatorArguments.AddReplace(args));
			}

			public NpiGreater([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiGreater With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011108_002D965(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011106_002D966(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011107_002D967(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiGreater(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLess : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiLess(Arguments<Symbol> operatorArguments)
				: base("_npi_less", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLess CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLess(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLess(OperatorArguments.AddReplace(args));
			}

			public NpiLess([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiLess With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011140_002D968(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011138_002D969(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011139_002D970(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiLess(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiGreaterEqual : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiGreaterEqual(Arguments<Symbol> operatorArguments)
				: base("_npi_greater_equal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiGreaterEqual CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiGreaterEqual(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiGreaterEqual(OperatorArguments.AddReplace(args));
			}

			public NpiGreaterEqual([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiGreaterEqual With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011172_002D971(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011170_002D972(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011171_002D973(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiGreaterEqual(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLessEqual : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiLessEqual(Arguments<Symbol> operatorArguments)
				: base("_npi_less_equal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLessEqual CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLessEqual(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLessEqual(OperatorArguments.AddReplace(args));
			}

			public NpiLessEqual([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiLessEqual With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011204_002D974(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011202_002D975(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011203_002D976(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiLessEqual(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiEqualScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiEqualScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_equal_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiEqualScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiEqualScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiEqualScalar(OperatorArguments.AddReplace(args));
			}

			public NpiEqualScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiEqualScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiEqualScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011245_002D977(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011243_002D978(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011244_002D979(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiEqualScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiNotEqualScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiNotEqualScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_not_equal_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiNotEqualScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiNotEqualScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiNotEqualScalar(OperatorArguments.AddReplace(args));
			}

			public NpiNotEqualScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiNotEqualScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiNotEqualScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011286_002D980(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011284_002D981(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011285_002D982(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiNotEqualScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiGreaterScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiGreaterScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_greater_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiGreaterScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiGreaterScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiGreaterScalar(OperatorArguments.AddReplace(args));
			}

			public NpiGreaterScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiGreaterScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiGreaterScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011327_002D983(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011325_002D984(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011326_002D985(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiGreaterScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLessScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiLessScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_less_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLessScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLessScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLessScalar(OperatorArguments.AddReplace(args));
			}

			public NpiLessScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiLessScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiLessScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011368_002D986(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011366_002D987(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011367_002D988(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiLessScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiGreaterEqualScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiGreaterEqualScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_greater_equal_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiGreaterEqualScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiGreaterEqualScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiGreaterEqualScalar(OperatorArguments.AddReplace(args));
			}

			public NpiGreaterEqualScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiGreaterEqualScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiGreaterEqualScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011409_002D989(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011407_002D990(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011408_002D991(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiGreaterEqualScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLessEqualScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiLessEqualScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_less_equal_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLessEqualScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLessEqualScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLessEqualScalar(OperatorArguments.AddReplace(args));
			}

			public NpiLessEqualScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiLessEqualScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiLessEqualScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011450_002D992(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011448_002D993(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011449_002D994(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiLessEqualScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiAdd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiAdd(Arguments<Symbol> operatorArguments)
				: base("_npi_add", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiAdd CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiAdd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiAdd(OperatorArguments.AddReplace(args));
			}

			public NpiAdd([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiAdd With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011482_002D995(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011480_002D996(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011481_002D997(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiAdd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiSubtract : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiSubtract(Arguments<Symbol> operatorArguments)
				: base("_npi_subtract", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiSubtract CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiSubtract(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiSubtract(OperatorArguments.AddReplace(args));
			}

			public NpiSubtract([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiSubtract With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011514_002D998(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011512_002D999(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011513_002D1000(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiSubtract(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiMultiply : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiMultiply(Arguments<Symbol> operatorArguments)
				: base("_npi_multiply", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiMultiply CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiMultiply(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiMultiply(OperatorArguments.AddReplace(args));
			}

			public NpiMultiply([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiMultiply With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011546_002D1001(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011544_002D1002(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011545_002D1003(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiMultiply(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiMod : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiMod(Arguments<Symbol> operatorArguments)
				: base("_npi_mod", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiMod CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiMod(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiMod(OperatorArguments.AddReplace(args));
			}

			public NpiMod([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiMod With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011578_002D1004(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011576_002D1005(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011577_002D1006(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiMod(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiPower : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiPower(Arguments<Symbol> operatorArguments)
				: base("_npi_power", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiPower CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiPower(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiPower(OperatorArguments.AddReplace(args));
			}

			public NpiPower([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiPower With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011610_002D1007(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011608_002D1008(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011609_002D1009(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiPower(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiAddScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiAddScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_add_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiAddScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiAddScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiAddScalar(OperatorArguments.AddReplace(args));
			}

			public NpiAddScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiAddScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiAddScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011651_002D1010(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011649_002D1011(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011650_002D1012(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiAddScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiSubtractScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiSubtractScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_subtract_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiSubtractScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiSubtractScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiSubtractScalar(OperatorArguments.AddReplace(args));
			}

			public NpiSubtractScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiSubtractScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiSubtractScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011692_002D1013(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011690_002D1014(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011691_002D1015(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiSubtractScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiRsubtractScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiRsubtractScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_rsubtract_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiRsubtractScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiRsubtractScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiRsubtractScalar(OperatorArguments.AddReplace(args));
			}

			public NpiRsubtractScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRsubtractScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRsubtractScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011733_002D1016(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011731_002D1017(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011732_002D1018(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiRsubtractScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiMultiplyScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiMultiplyScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_multiply_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiMultiplyScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiMultiplyScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiMultiplyScalar(OperatorArguments.AddReplace(args));
			}

			public NpiMultiplyScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiMultiplyScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiMultiplyScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011774_002D1019(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011772_002D1020(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011773_002D1021(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiMultiplyScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiModScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiModScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_mod_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiModScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiModScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiModScalar(OperatorArguments.AddReplace(args));
			}

			public NpiModScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiModScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiModScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011815_002D1022(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011813_002D1023(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011814_002D1024(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiModScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiRmodScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiRmodScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_rmod_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiRmodScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiRmodScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiRmodScalar(OperatorArguments.AddReplace(args));
			}

			public NpiRmodScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRmodScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRmodScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011856_002D1025(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011854_002D1026(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011855_002D1027(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiRmodScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiPowerScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiPowerScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_power_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiPowerScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiPowerScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiPowerScalar(OperatorArguments.AddReplace(args));
			}

			public NpiPowerScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiPowerScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiPowerScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011897_002D1028(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011895_002D1029(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011896_002D1030(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiPowerScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiRpowerScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiRpowerScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_rpower_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiRpowerScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiRpowerScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiRpowerScalar(OperatorArguments.AddReplace(args));
			}

			public NpiRpowerScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRpowerScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRpowerScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011938_002D1031(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011936_002D1032(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011937_002D1033(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiRpowerScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiCopysign : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiCopysign(Arguments<Symbol> operatorArguments)
				: base("_npi_copysign", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiCopysign CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiCopysign(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiCopysign(OperatorArguments.AddReplace(args));
			}

			public NpiCopysign([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiCopysign With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004011973_002D1034(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011971_002D1035(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004011972_002D1036(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiCopysign(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLcm : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiLcm(Arguments<Symbol> operatorArguments)
				: base("_npi_lcm", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLcm CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLcm(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLcm(OperatorArguments.AddReplace(args));
			}

			public NpiLcm([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiLcm With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012005_002D1037(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012003_002D1038(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012004_002D1039(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiLcm(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLcmScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public int Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiLcmScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_lcm_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLcmScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLcmScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLcmScalar(OperatorArguments.AddReplace(args));
			}

			public NpiLcmScalar(Symbol data, int scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiLcmScalar(int scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiLcmScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012046_002D1040(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012044_002D1041(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012045_002D1042(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiLcmScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiBitwiseXor : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiBitwiseXor(Arguments<Symbol> operatorArguments)
				: base("_npi_bitwise_xor", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiBitwiseXor CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiBitwiseXor(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiBitwiseXor(OperatorArguments.AddReplace(args));
			}

			public NpiBitwiseXor([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiBitwiseXor With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012078_002D1043(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012076_002D1044(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012077_002D1045(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiBitwiseXor(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiBitwiseOr : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiBitwiseOr(Arguments<Symbol> operatorArguments)
				: base("_npi_bitwise_or", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiBitwiseOr CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiBitwiseOr(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiBitwiseOr(OperatorArguments.AddReplace(args));
			}

			public NpiBitwiseOr([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiBitwiseOr With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012110_002D1046(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012108_002D1047(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012109_002D1048(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiBitwiseOr(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiBitwiseXorScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public int Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiBitwiseXorScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_bitwise_xor_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiBitwiseXorScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiBitwiseXorScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiBitwiseXorScalar(OperatorArguments.AddReplace(args));
			}

			public NpiBitwiseXorScalar(Symbol data, int scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiBitwiseXorScalar(int scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiBitwiseXorScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012151_002D1049(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012149_002D1050(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012150_002D1051(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiBitwiseXorScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiBitwiseOrScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public int Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiBitwiseOrScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_bitwise_or_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiBitwiseOrScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiBitwiseOrScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiBitwiseOrScalar(OperatorArguments.AddReplace(args));
			}

			public NpiBitwiseOrScalar(Symbol data, int scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiBitwiseOrScalar(int scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiBitwiseOrScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012192_002D1052(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012190_002D1053(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012191_002D1054(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiBitwiseOrScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiCopysignScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiCopysignScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_copysign_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiCopysignScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiCopysignScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiCopysignScalar(OperatorArguments.AddReplace(args));
			}

			public NpiCopysignScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiCopysignScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiCopysignScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012233_002D1055(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012231_002D1056(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012232_002D1057(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiCopysignScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiRcopysignScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiRcopysignScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_rcopysign_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiRcopysignScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiRcopysignScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiRcopysignScalar(OperatorArguments.AddReplace(args));
			}

			public NpiRcopysignScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRcopysignScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRcopysignScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012274_002D1058(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012272_002D1059(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012273_002D1060(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiRcopysignScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiArctan2 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X1 => operatorArguments.GetInput("x1");

			public Symbol X2 => operatorArguments.GetInput("x2");

			internal NpiArctan2(Arguments<Symbol> operatorArguments)
				: base("_npi_arctan2", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiArctan2 CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiArctan2(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiArctan2(OperatorArguments.AddReplace(args));
			}

			public NpiArctan2([Optional] [OptionalArgument] FSharpOption<Symbol> x1, [Optional] [OptionalArgument] FSharpOption<Symbol> x2)
			{
				Symbol x3 = Operators.DefaultArg<Symbol>(x1, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(x2, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x1", OpArg<Symbol>.NewInput(x3)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x2", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiArctan2 With([Optional] [OptionalArgument] FSharpOption<Symbol> x1, [Optional] [OptionalArgument] FSharpOption<Symbol> x2)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012306_002D1061(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012304_002D1062(), x1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012305_002D1063(), x2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiArctan2(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiArctan2Scalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiArctan2Scalar(Arguments<Symbol> operatorArguments)
				: base("_npi_arctan2_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiArctan2Scalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiArctan2Scalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiArctan2Scalar(OperatorArguments.AddReplace(args));
			}

			public NpiArctan2Scalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiArctan2Scalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiArctan2Scalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012347_002D1064(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012345_002D1065(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012346_002D1066(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiArctan2Scalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiRarctan2Scalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiRarctan2Scalar(Arguments<Symbol> operatorArguments)
				: base("_npi_rarctan2_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiRarctan2Scalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiRarctan2Scalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiRarctan2Scalar(OperatorArguments.AddReplace(args));
			}

			public NpiRarctan2Scalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRarctan2Scalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRarctan2Scalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012388_002D1067(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012386_002D1068(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012387_002D1069(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiRarctan2Scalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiHypot : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X1 => operatorArguments.GetInput("x1");

			public Symbol X2 => operatorArguments.GetInput("x2");

			internal NpiHypot(Arguments<Symbol> operatorArguments)
				: base("_npi_hypot", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiHypot CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiHypot(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiHypot(OperatorArguments.AddReplace(args));
			}

			public NpiHypot([Optional] [OptionalArgument] FSharpOption<Symbol> x1, [Optional] [OptionalArgument] FSharpOption<Symbol> x2)
			{
				Symbol x3 = Operators.DefaultArg<Symbol>(x1, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(x2, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x1", OpArg<Symbol>.NewInput(x3)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x2", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiHypot With([Optional] [OptionalArgument] FSharpOption<Symbol> x1, [Optional] [OptionalArgument] FSharpOption<Symbol> x2)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012420_002D1070(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012418_002D1071(), x1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012419_002D1072(), x2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiHypot(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLdexp : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiLdexp(Arguments<Symbol> operatorArguments)
				: base("_npi_ldexp", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLdexp CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLdexp(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLdexp(OperatorArguments.AddReplace(args));
			}

			public NpiLdexp([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiLdexp With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012452_002D1073(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012450_002D1074(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012451_002D1075(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiLdexp(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLdexpScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiLdexpScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_ldexp_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLdexpScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLdexpScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLdexpScalar(OperatorArguments.AddReplace(args));
			}

			public NpiLdexpScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiLdexpScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiLdexpScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012493_002D1076(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012491_002D1077(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012492_002D1078(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiLdexpScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiRldexpScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiRldexpScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_rldexp_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiRldexpScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiRldexpScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiRldexpScalar(OperatorArguments.AddReplace(args));
			}

			public NpiRldexpScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRldexpScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRldexpScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012534_002D1079(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012532_002D1080(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012533_002D1081(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiRldexpScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpxRelu : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal NpxRelu(Arguments<Symbol> operatorArguments)
				: base("_npx_relu", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpxRelu CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpxRelu(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpxRelu(OperatorArguments.AddReplace(args));
			}

			public NpxRelu([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpxRelu With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012563_002D1082(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012562_002D1083(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpxRelu(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpxSigmoid : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal NpxSigmoid(Arguments<Symbol> operatorArguments)
				: base("_npx_sigmoid", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpxSigmoid CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpxSigmoid(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpxSigmoid(OperatorArguments.AddReplace(args));
			}

			public NpxSigmoid([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpxSigmoid With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012592_002D1084(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012591_002D1085(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpxSigmoid(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpCopy : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("a");

			internal NpCopy(Arguments<Symbol> operatorArguments)
				: base("_np_copy", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpCopy CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpCopy(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpCopy(OperatorArguments.AddReplace(args));
			}

			public NpCopy([Optional] [OptionalArgument] FSharpOption<Symbol> a)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpCopy With([Optional] [OptionalArgument] FSharpOption<Symbol> a)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012618_002D1086(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012617_002D1087(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpCopy(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiNegative : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiNegative(Arguments<Symbol> operatorArguments)
				: base("_npi_negative", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiNegative CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiNegative(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiNegative(OperatorArguments.AddReplace(args));
			}

			public NpiNegative([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiNegative With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012645_002D1088(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012644_002D1089(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiNegative(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiReciprocal : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiReciprocal(Arguments<Symbol> operatorArguments)
				: base("_npi_reciprocal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiReciprocal CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiReciprocal(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiReciprocal(OperatorArguments.AddReplace(args));
			}

			public NpiReciprocal([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiReciprocal With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012672_002D1090(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012671_002D1091(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiReciprocal(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiAbsolute : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiAbsolute(Arguments<Symbol> operatorArguments)
				: base("_npi_absolute", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiAbsolute CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiAbsolute(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiAbsolute(OperatorArguments.AddReplace(args));
			}

			public NpiAbsolute([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiAbsolute With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012701_002D1092(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012700_002D1093(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiAbsolute(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiSign : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiSign(Arguments<Symbol> operatorArguments)
				: base("_npi_sign", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiSign CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiSign(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiSign(OperatorArguments.AddReplace(args));
			}

			public NpiSign([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiSign With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012731_002D1094(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012730_002D1095(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiSign(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiRint : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiRint(Arguments<Symbol> operatorArguments)
				: base("_npi_rint", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiRint CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiRint(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiRint(OperatorArguments.AddReplace(args));
			}

			public NpiRint([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiRint With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012760_002D1096(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012759_002D1097(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiRint(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiCeil : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiCeil(Arguments<Symbol> operatorArguments)
				: base("_npi_ceil", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiCeil CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiCeil(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiCeil(OperatorArguments.AddReplace(args));
			}

			public NpiCeil([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiCeil With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012790_002D1098(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012789_002D1099(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiCeil(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiFloor : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiFloor(Arguments<Symbol> operatorArguments)
				: base("_npi_floor", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiFloor CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiFloor(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiFloor(OperatorArguments.AddReplace(args));
			}

			public NpiFloor([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiFloor With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012820_002D1100(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012819_002D1101(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiFloor(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiTrunc : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiTrunc(Arguments<Symbol> operatorArguments)
				: base("_npi_trunc", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiTrunc CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiTrunc(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiTrunc(OperatorArguments.AddReplace(args));
			}

			public NpiTrunc([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiTrunc With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012851_002D1102(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012850_002D1103(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiTrunc(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiFix : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiFix(Arguments<Symbol> operatorArguments)
				: base("_npi_fix", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiFix CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiFix(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiFix(OperatorArguments.AddReplace(args));
			}

			public NpiFix([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiFix With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012882_002D1104(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012881_002D1105(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiFix(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiSquare : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiSquare(Arguments<Symbol> operatorArguments)
				: base("_npi_square", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiSquare CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiSquare(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiSquare(OperatorArguments.AddReplace(args));
			}

			public NpiSquare([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiSquare With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012911_002D1106(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012910_002D1107(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiSquare(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiSqrt : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiSqrt(Arguments<Symbol> operatorArguments)
				: base("_npi_sqrt", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiSqrt CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiSqrt(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiSqrt(OperatorArguments.AddReplace(args));
			}

			public NpiSqrt([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiSqrt With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012940_002D1108(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012939_002D1109(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiSqrt(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiCbrt : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiCbrt(Arguments<Symbol> operatorArguments)
				: base("_npi_cbrt", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiCbrt CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiCbrt(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiCbrt(OperatorArguments.AddReplace(args));
			}

			public NpiCbrt([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiCbrt With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012969_002D1110(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012968_002D1111(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiCbrt(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiExp : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiExp(Arguments<Symbol> operatorArguments)
				: base("_npi_exp", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiExp CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiExp(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiExp(OperatorArguments.AddReplace(args));
			}

			public NpiExp([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiExp With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004012998_002D1112(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004012997_002D1113(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiExp(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLog : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiLog(Arguments<Symbol> operatorArguments)
				: base("_npi_log", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLog CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLog(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLog(OperatorArguments.AddReplace(args));
			}

			public NpiLog([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiLog With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013026_002D1114(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013025_002D1115(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiLog(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLog10 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiLog10(Arguments<Symbol> operatorArguments)
				: base("_npi_log10", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLog10 CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLog10(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLog10(OperatorArguments.AddReplace(args));
			}

			public NpiLog10([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiLog10 With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013054_002D1116(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013053_002D1117(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiLog10(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLog2 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiLog2(Arguments<Symbol> operatorArguments)
				: base("_npi_log2", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLog2 CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLog2(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLog2(OperatorArguments.AddReplace(args));
			}

			public NpiLog2([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiLog2 With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013082_002D1118(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013081_002D1119(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiLog2(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLog1p : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiLog1p(Arguments<Symbol> operatorArguments)
				: base("_npi_log1p", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLog1p CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLog1p(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLog1p(OperatorArguments.AddReplace(args));
			}

			public NpiLog1p([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiLog1p With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013110_002D1120(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013109_002D1121(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiLog1p(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiExpm1 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiExpm1(Arguments<Symbol> operatorArguments)
				: base("_npi_expm1", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiExpm1 CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiExpm1(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiExpm1(OperatorArguments.AddReplace(args));
			}

			public NpiExpm1([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiExpm1 With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013136_002D1122(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013135_002D1123(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiExpm1(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLogicalNot : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiLogicalNot(Arguments<Symbol> operatorArguments)
				: base("_npi_logical_not", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLogicalNot CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLogicalNot(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLogicalNot(OperatorArguments.AddReplace(args));
			}

			public NpiLogicalNot([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiLogicalNot With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013159_002D1124(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013158_002D1125(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiLogicalNot(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiSin : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiSin(Arguments<Symbol> operatorArguments)
				: base("_npi_sin", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiSin CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiSin(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiSin(OperatorArguments.AddReplace(args));
			}

			public NpiSin([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiSin With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013188_002D1126(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013187_002D1127(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiSin(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiCos : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiCos(Arguments<Symbol> operatorArguments)
				: base("_npi_cos", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiCos CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiCos(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiCos(OperatorArguments.AddReplace(args));
			}

			public NpiCos([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiCos With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013217_002D1128(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013216_002D1129(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiCos(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiTan : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiTan(Arguments<Symbol> operatorArguments)
				: base("_npi_tan", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiTan CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiTan(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiTan(OperatorArguments.AddReplace(args));
			}

			public NpiTan([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiTan With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013246_002D1130(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013245_002D1131(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiTan(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiArcsin : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiArcsin(Arguments<Symbol> operatorArguments)
				: base("_npi_arcsin", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiArcsin CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiArcsin(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiArcsin(OperatorArguments.AddReplace(args));
			}

			public NpiArcsin([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiArcsin With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013275_002D1132(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013274_002D1133(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiArcsin(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiArccos : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiArccos(Arguments<Symbol> operatorArguments)
				: base("_npi_arccos", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiArccos CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiArccos(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiArccos(OperatorArguments.AddReplace(args));
			}

			public NpiArccos([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiArccos With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013307_002D1134(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013306_002D1135(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiArccos(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiArctan : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiArctan(Arguments<Symbol> operatorArguments)
				: base("_npi_arctan", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiArctan CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiArctan(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiArctan(OperatorArguments.AddReplace(args));
			}

			public NpiArctan([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiArctan With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013336_002D1136(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013335_002D1137(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiArctan(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiDegrees : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiDegrees(Arguments<Symbol> operatorArguments)
				: base("_npi_degrees", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiDegrees CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiDegrees(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiDegrees(OperatorArguments.AddReplace(args));
			}

			public NpiDegrees([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiDegrees With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013365_002D1138(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013364_002D1139(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiDegrees(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiRadians : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiRadians(Arguments<Symbol> operatorArguments)
				: base("_npi_radians", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiRadians CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiRadians(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiRadians(OperatorArguments.AddReplace(args));
			}

			public NpiRadians([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiRadians With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013394_002D1140(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013393_002D1141(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiRadians(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiSinh : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiSinh(Arguments<Symbol> operatorArguments)
				: base("_npi_sinh", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiSinh CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiSinh(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiSinh(OperatorArguments.AddReplace(args));
			}

			public NpiSinh([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiSinh With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013423_002D1142(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013422_002D1143(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiSinh(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiCosh : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiCosh(Arguments<Symbol> operatorArguments)
				: base("_npi_cosh", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiCosh CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiCosh(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiCosh(OperatorArguments.AddReplace(args));
			}

			public NpiCosh([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiCosh With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013452_002D1144(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013451_002D1145(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiCosh(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiTanh : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiTanh(Arguments<Symbol> operatorArguments)
				: base("_npi_tanh", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiTanh CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiTanh(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiTanh(OperatorArguments.AddReplace(args));
			}

			public NpiTanh([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiTanh With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013481_002D1146(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013480_002D1147(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiTanh(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiArcsinh : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiArcsinh(Arguments<Symbol> operatorArguments)
				: base("_npi_arcsinh", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiArcsinh CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiArcsinh(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiArcsinh(OperatorArguments.AddReplace(args));
			}

			public NpiArcsinh([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiArcsinh With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013509_002D1148(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013508_002D1149(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiArcsinh(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiArccosh : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiArccosh(Arguments<Symbol> operatorArguments)
				: base("_npi_arccosh", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiArccosh CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiArccosh(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiArccosh(OperatorArguments.AddReplace(args));
			}

			public NpiArccosh([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiArccosh With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013537_002D1150(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013536_002D1151(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiArccosh(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiArctanh : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpiArctanh(Arguments<Symbol> operatorArguments)
				: base("_npi_arctanh", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiArctanh CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiArctanh(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiArctanh(OperatorArguments.AddReplace(args));
			}

			public NpiArctanh([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiArctanh With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013565_002D1152(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013564_002D1153(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiArctanh(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiAround : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int DecimalsDefault => 0;

			public Symbol X => operatorArguments.GetInput("x");

			public int Decimals => operatorArguments.GetParameter("decimals", DecimalsDefault);

			internal NpiAround(Arguments<Symbol> operatorArguments)
				: base("_npi_around", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiAround CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiAround(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiAround(OperatorArguments.AddReplace(args));
			}

			public NpiAround([Optional] [OptionalArgument] FSharpOption<Symbol> x, [Optional] [OptionalArgument] FSharpOption<int> decimals)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("decimals", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004013580_002D1154(), decimals))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiAround With([Optional] [OptionalArgument] FSharpOption<Symbol> x, [Optional] [OptionalArgument] FSharpOption<int> decimals)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013599_002D1155(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013597_002D1156(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013598_002D1157(), decimals), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiAround(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiNanToNum : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool CopyDefault => true;

			public static double NanDefault => 0.0;

			public static FSharpOption<double> PosinfDefault => null;

			public static FSharpOption<double> NeginfDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public new bool Copy => operatorArguments.GetParameter("copy", CopyDefault);

			public double Nan => operatorArguments.GetParameter("nan", NanDefault);

			public FSharpOption<double> Posinf => operatorArguments.GetParameter<FSharpOption<double>>("posinf", PosinfDefault);

			public FSharpOption<double> Neginf => operatorArguments.GetParameter<FSharpOption<double>>("neginf", NeginfDefault);

			internal NpiNanToNum(Arguments<Symbol> operatorArguments)
				: base("_npi_nan_to_num", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiNanToNum CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiNanToNum(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiNanToNum(OperatorArguments.AddReplace(args));
			}

			public NpiNanToNum([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<bool> copy, [Optional] [OptionalArgument] FSharpOption<double> nan, [Optional] [OptionalArgument] FSharpOption<double> posinf, [Optional] [OptionalArgument] FSharpOption<double> neginf)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("copy", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004013623_002D1158(), copy))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("nan", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004013624_002D1159(), nan))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("posinf", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004013625_002D1160(), posinf))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("neginf", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004013626_002D1161(), neginf))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public NpiNanToNum With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<bool> copy, [Optional] [OptionalArgument] FSharpOption<double> nan, [Optional] [OptionalArgument] FSharpOption<double> posinf, [Optional] [OptionalArgument] FSharpOption<double> neginf)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013669_002D1162(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013664_002D1163(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013665_002D1164(), copy), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013666_002D1165(), nan), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013667_002D1166(), posinf), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013668_002D1167(), neginf), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new NpiNanToNum(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiBackwardNanToNum : SymbolOperator
		{
			internal NpiBackwardNanToNum(Arguments<Symbol> operatorArguments)
				: base("_npi_backward_nan_to_num", operatorArguments)
			{
			}

			public static NpiBackwardNanToNum CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiBackwardNanToNum(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiBackwardNanToNum(OperatorArguments.AddReplace(args));
			}

			public NpiBackwardNanToNum()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_004013677_002D1168()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiZeros : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static DataType DtypeDefault => DataType.Float32;

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiZeros(Arguments<Symbol> operatorArguments)
				: base("_npi_zeros", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiZeros CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiZeros(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiZeros(OperatorArguments.AddReplace(args));
			}

			public NpiZeros([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004013692_002D1169(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004013693_002D1170(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiZeros With([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013715_002D1171(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013713_002D1172(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013714_002D1173(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiZeros(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiOnes : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static DataType DtypeDefault => DataType.Float32;

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiOnes(Arguments<Symbol> operatorArguments)
				: base("_npi_ones", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiOnes CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiOnes(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiOnes(OperatorArguments.AddReplace(args));
			}

			public NpiOnes([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004013729_002D1174(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004013730_002D1175(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiOnes With([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013752_002D1176(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013750_002D1177(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013751_002D1178(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiOnes(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiIdentity : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static DataType DtypeDefault => DataType.Float32;

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiIdentity(Arguments<Symbol> operatorArguments)
				: base("_npi_identity", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiIdentity CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiIdentity(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiIdentity(OperatorArguments.AddReplace(args));
			}

			public NpiIdentity([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004013766_002D1179(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004013767_002D1180(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiIdentity With([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013789_002D1181(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013787_002D1182(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013788_002D1183(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiIdentity(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpZerosLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("a");

			internal NpZerosLike(Arguments<Symbol> operatorArguments)
				: base("_np_zeros_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpZerosLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpZerosLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpZerosLike(OperatorArguments.AddReplace(args));
			}

			public NpZerosLike([Optional] [OptionalArgument] FSharpOption<Symbol> a)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpZerosLike With([Optional] [OptionalArgument] FSharpOption<Symbol> a)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013812_002D1184(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013811_002D1185(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpZerosLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpOnesLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("a");

			internal NpOnesLike(Arguments<Symbol> operatorArguments)
				: base("_np_ones_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpOnesLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpOnesLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpOnesLike(OperatorArguments.AddReplace(args));
			}

			public NpOnesLike([Optional] [OptionalArgument] FSharpOption<Symbol> a)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpOnesLike With([Optional] [OptionalArgument] FSharpOption<Symbol> a)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013835_002D1186(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013834_002D1187(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpOnesLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiArange : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<double> StopDefault => null;

			public static double StepDefault => 1.0;

			public static int RepeatDefault => 1;

			public static bool InferRangeDefault => false;

			public static DataType DtypeDefault => DataType.Float32;

			public double Start
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("start");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter start is missing"));
				}
			}

			public FSharpOption<double> Stop => operatorArguments.GetParameter<FSharpOption<double>>("stop", StopDefault);

			public double Step => operatorArguments.GetParameter("step", StepDefault);

			public int Repeat => operatorArguments.GetParameter("repeat", RepeatDefault);

			public bool InferRange => operatorArguments.GetParameter("infer_range", InferRangeDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiArange(Arguments<Symbol> operatorArguments)
				: base("_npi_arange", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiArange CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiArange(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiArange(OperatorArguments.AddReplace(args));
			}

			public NpiArange(double start, [Optional] [OptionalArgument] FSharpOption<double> stop, [Optional] [OptionalArgument] FSharpOption<double> step, [Optional] [OptionalArgument] FSharpOption<int> repeat, [Optional] [OptionalArgument] FSharpOption<bool> inferRange, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("start", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)start))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stop", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004013857_002D1188(), stop))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004013858_002D1189(), step))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("repeat", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004013859_002D1190(), repeat))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("infer_range", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004013860_002D1191(), inferRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004013861_002D1192(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public NpiArange With([Optional] [OptionalArgument] FSharpOption<double> start, [Optional] [OptionalArgument] FSharpOption<double> stop, [Optional] [OptionalArgument] FSharpOption<double> step, [Optional] [OptionalArgument] FSharpOption<int> repeat, [Optional] [OptionalArgument] FSharpOption<bool> inferRange, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013912_002D1193(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013906_002D1194(), start), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013907_002D1195(), stop), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013908_002D1196(), step), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013909_002D1197(), repeat), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013910_002D1198(), inferRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013911_002D1199(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new NpiArange(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiEye : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static long KDefault => 0L;

			public static DataType DtypeDefault => DataType.Float32;

			public long N
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("N");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (long)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<long, long>((PrintfFormat<long, Unit, string, long>)(object)new PrintfFormat<long, Unit, string, long, Unit>("Required parameter N is missing"));
				}
			}

			public long M
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("M");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (long)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<long, long>((PrintfFormat<long, Unit, string, long>)(object)new PrintfFormat<long, Unit, string, long, Unit>("Required parameter M is missing"));
				}
			}

			public long K => operatorArguments.GetParameter("k", KDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiEye(Arguments<Symbol> operatorArguments)
				: base("_npi_eye", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiEye CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiEye(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiEye(OperatorArguments.AddReplace(args));
			}

			public NpiEye(long N, long M, [Optional] [OptionalArgument] FSharpOption<long> k, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("N", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)N))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("M", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)M))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_004013932_002D1200(), k))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004013933_002D1201(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public NpiEye With([Optional] [OptionalArgument] FSharpOption<long> N, [Optional] [OptionalArgument] FSharpOption<long> M, [Optional] [OptionalArgument] FSharpOption<long> k, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013965_002D1202(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013961_002D1203(), N), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013962_002D1204(), M), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013963_002D1205(), k), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013964_002D1206(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new NpiEye(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiIndices : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static DataType DtypeDefault => DataType.Int32;

			public IEnumerable<int> Dimensions
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("dimensions");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter dimensions is missing"));
				}
			}

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiIndices(Arguments<Symbol> operatorArguments)
				: base("_npi_indices", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiIndices CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiIndices(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiIndices(OperatorArguments.AddReplace(args));
			}

			public NpiIndices(IEnumerable<int> dimensions, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dimensions", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)dimensions))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004013980_002D1207(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiIndices With([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dimensions, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004013999_002D1208(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013997_002D1209(), dimensions), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004013998_002D1210(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiIndices(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiLogspace : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool EndpointDefault => true;

			public static double LbaseDefault => 10.0;

			public static DataType DtypeDefault => DataType.Float32;

			public double Start
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("start");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter start is missing"));
				}
			}

			public double Stop
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("stop");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter stop is missing"));
				}
			}

			public int Num
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num is missing"));
				}
			}

			public bool Endpoint => operatorArguments.GetParameter("endpoint", EndpointDefault);

			public double Lbase => operatorArguments.GetParameter("base", LbaseDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiLogspace(Arguments<Symbol> operatorArguments)
				: base("_npi_logspace", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiLogspace CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiLogspace(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiLogspace(OperatorArguments.AddReplace(args));
			}

			public NpiLogspace(double start, double stop, int num, [Optional] [OptionalArgument] FSharpOption<bool> endpoint, [Optional] [OptionalArgument] FSharpOption<double> lbase, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("start", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)start))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stop", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)stop))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)num))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("endpoint", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004014024_002D1211(), endpoint))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("base", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004014025_002D1212(), lbase))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004014026_002D1213(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public NpiLogspace With([Optional] [OptionalArgument] FSharpOption<double> start, [Optional] [OptionalArgument] FSharpOption<double> stop, [Optional] [OptionalArgument] FSharpOption<int> num, [Optional] [OptionalArgument] FSharpOption<bool> endpoint, [Optional] [OptionalArgument] FSharpOption<double> lbase, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014071_002D1214(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014065_002D1215(), start), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014066_002D1216(), stop), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014067_002D1217(), num), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014068_002D1218(), endpoint), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014069_002D1219(), lbase), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014070_002D1220(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new NpiLogspace(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpTranspose : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxesDefault => null;

			public Symbol A => operatorArguments.GetInput("a");

			public FSharpOption<int[]> Axes => operatorArguments.GetParameter<FSharpOption<int[]>>("axes", AxesDefault);

			internal NpTranspose(Arguments<Symbol> operatorArguments)
				: base("_np_transpose", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpTranspose CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpTranspose(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpTranspose(OperatorArguments.AddReplace(args));
			}

			public NpTranspose([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004014086_002D1221(), axes))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpTranspose With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014105_002D1222(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014103_002D1223(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014104_002D1224(), axes), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpTranspose(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpReshape : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static string OrderDefault => "C";

			public Symbol A => operatorArguments.GetInput("a");

			public IEnumerable<int> Newshape
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("newshape");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter newshape is missing"));
				}
			}

			public string Order => operatorArguments.GetParameter("order", OrderDefault);

			internal NpReshape(Arguments<Symbol> operatorArguments)
				: base("_np_reshape", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpReshape CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpReshape(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpReshape(OperatorArguments.AddReplace(args));
			}

			public NpReshape(Symbol a, IEnumerable<int> newshape, [Optional] [OptionalArgument] FSharpOption<string> order)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("newshape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)newshape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("order", OpArg<Symbol>.NewParameter(OptionModule.Map<string, object>((FSharpFunc<string, object>)new operatorArguments_004014125_002D1225(), order))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpReshape(IEnumerable<int> newshape, [Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<string> order)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("newshape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)newshape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("order", OpArg<Symbol>.NewParameter(OptionModule.Map<string, object>((FSharpFunc<string, object>)new operatorArguments_004014142_002D1226(), order))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpReshape With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> newshape, [Optional] [OptionalArgument] FSharpOption<string> order)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014166_002D1227(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014163_002D1228(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014164_002D1229(), newshape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<string, Tuple<string, OpArg<Symbol>>>((FSharpFunc<string, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014165_002D1230(), order), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpReshape(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpxReshape : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool ReverseDefault => false;

			public static string OrderDefault => "C";

			public Symbol A => operatorArguments.GetInput("a");

			public IEnumerable<int> Newshape
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("newshape");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter newshape is missing"));
				}
			}

			public bool Reverse => operatorArguments.GetParameter("reverse", ReverseDefault);

			public string Order => operatorArguments.GetParameter("order", OrderDefault);

			internal NpxReshape(Arguments<Symbol> operatorArguments)
				: base("_npx_reshape", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpxReshape CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpxReshape(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpxReshape(OperatorArguments.AddReplace(args));
			}

			public NpxReshape(Symbol a, IEnumerable<int> newshape, [Optional] [OptionalArgument] FSharpOption<bool> reverse, [Optional] [OptionalArgument] FSharpOption<string> order)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("newshape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)newshape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("reverse", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004014188_002D1231(), reverse))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("order", OpArg<Symbol>.NewParameter(OptionModule.Map<string, object>((FSharpFunc<string, object>)new operatorArguments_004014189_002D1232(), order))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public NpxReshape(IEnumerable<int> newshape, [Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<bool> reverse, [Optional] [OptionalArgument] FSharpOption<string> order)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("newshape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)newshape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("reverse", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004014208_002D1233(), reverse))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("order", OpArg<Symbol>.NewParameter(OptionModule.Map<string, object>((FSharpFunc<string, object>)new operatorArguments_004014209_002D1234(), order))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public NpxReshape With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> newshape, [Optional] [OptionalArgument] FSharpOption<bool> reverse, [Optional] [OptionalArgument] FSharpOption<string> order)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014241_002D1235(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014237_002D1236(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014238_002D1237(), newshape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014239_002D1238(), reverse), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<string, Tuple<string, OpArg<Symbol>>>((FSharpFunc<string, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014240_002D1239(), order), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new NpxReshape(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpSqueeze : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public Symbol A => operatorArguments.GetInput("a");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			internal NpSqueeze(Arguments<Symbol> operatorArguments)
				: base("_np_squeeze", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpSqueeze CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpSqueeze(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpSqueeze(OperatorArguments.AddReplace(args));
			}

			public NpSqueeze([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004014256_002D1240(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpSqueeze With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014275_002D1241(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014273_002D1242(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014274_002D1243(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpSqueeze(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiConcatenate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int DimDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int Dim => operatorArguments.GetParameter("dim", DimDefault);

			internal NpiConcatenate(Arguments<Symbol> operatorArguments)
				: base("_npi_concatenate", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiConcatenate CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiConcatenate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiConcatenate(OperatorArguments.AddReplace(args));
			}

			public NpiConcatenate([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> dim)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_004014289_002D18(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dim", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004014293_002D1244(), dim))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiConcatenate With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> dim)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014312_002D1245(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014310_002D1246(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014311_002D1247(), dim), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiConcatenate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiStack : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int AxisDefault => 0;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			internal NpiStack(Arguments<Symbol> operatorArguments)
				: base("_npi_stack", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiStack CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiStack(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiStack(OperatorArguments.AddReplace(args));
			}

			public NpiStack([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_004014339_002D19(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004014343_002D1248(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiStack With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014362_002D1249(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014360_002D1250(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014361_002D1251(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiStack(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiColumnStack : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			internal NpiColumnStack(Arguments<Symbol> operatorArguments)
				: base("_npi_column_stack", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiColumnStack CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiColumnStack(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiColumnStack(OperatorArguments.AddReplace(args));
			}

			public NpiColumnStack(params Symbol[] data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", data)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiColumnStack With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014387_002D1252(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014386_002D1253(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiColumnStack(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiVstack : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			internal NpiVstack(Arguments<Symbol> operatorArguments)
				: base("_npi_vstack", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiVstack CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiVstack(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiVstack(OperatorArguments.AddReplace(args));
			}

			public NpiVstack(params Symbol[] data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", data)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpiVstack With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014412_002D1254(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014411_002D1255(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpiVstack(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiDstack : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int DimDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int Dim => operatorArguments.GetParameter("dim", DimDefault);

			internal NpiDstack(Arguments<Symbol> operatorArguments)
				: base("_npi_dstack", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiDstack CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiDstack(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiDstack(OperatorArguments.AddReplace(args));
			}

			public NpiDstack([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> dim)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_004014426_002D20(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dim", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004014430_002D1256(), dim))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiDstack With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> dim)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014449_002D1257(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014447_002D1258(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014448_002D1259(), dim), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiDstack(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpRoll : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> ShiftDefault => null;

			public static FSharpOption<int[]> AxisDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Shift => operatorArguments.GetParameter<FSharpOption<int[]>>("shift", ShiftDefault);

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			internal NpRoll(Arguments<Symbol> operatorArguments)
				: base("_np_roll", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpRoll CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpRoll(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpRoll(OperatorArguments.AddReplace(args));
			}

			public NpRoll([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shift, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shift", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004014466_002D1260(), shift))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004014467_002D1261(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpRoll With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shift, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014494_002D1262(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014491_002D1263(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014492_002D1264(), shift), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014493_002D1265(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpRoll(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiFlip : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public IEnumerable<int> Axis
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("axis");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter axis is missing"));
				}
			}

			internal NpiFlip(Arguments<Symbol> operatorArguments)
				: base("_npi_flip", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiFlip CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiFlip(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiFlip(OperatorArguments.AddReplace(args));
			}

			public NpiFlip(Symbol data, IEnumerable<int> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiFlip(IEnumerable<int> axis, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiFlip With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014535_002D1266(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014533_002D1267(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014534_002D1268(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiFlip(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpMoveaxis : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("a");

			public IEnumerable<int> Source
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("source");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter source is missing"));
				}
			}

			public IEnumerable<int> Destination
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("destination");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter destination is missing"));
				}
			}

			internal NpMoveaxis(Arguments<Symbol> operatorArguments)
				: base("_np_moveaxis", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpMoveaxis CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpMoveaxis(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpMoveaxis(OperatorArguments.AddReplace(args));
			}

			public NpMoveaxis(Symbol a, IEnumerable<int> source, IEnumerable<int> destination)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("source", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)source))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("destination", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)destination))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpMoveaxis(IEnumerable<int> source, IEnumerable<int> destination, [Optional] [OptionalArgument] FSharpOption<Symbol> a)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("source", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)source))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("destination", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)destination))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpMoveaxis With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> source, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> destination)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014597_002D1269(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014594_002D1270(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014595_002D1271(), source), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014596_002D1272(), destination), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpMoveaxis(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiRot90 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int KDefault => 1;

			public static FSharpOption<int[]> AxesDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public int K => operatorArguments.GetParameter("k", KDefault);

			public FSharpOption<int[]> Axes => operatorArguments.GetParameter<FSharpOption<int[]>>("axes", AxesDefault);

			internal NpiRot90(Arguments<Symbol> operatorArguments)
				: base("_npi_rot90", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiRot90 CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiRot90(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiRot90(OperatorArguments.AddReplace(args));
			}

			public NpiRot90([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> k, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004014614_002D1273(), k))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004014615_002D1274(), axes))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpiRot90 With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> k, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014642_002D1275(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014639_002D1276(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014640_002D1277(), k), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014641_002D1278(), axes), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpiRot90(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiHsplit : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int AxisDefault => 1;

			public static bool SqueezeAxisDefault => false;

			public static int SectionsDefault => 0;

			public Symbol Data => operatorArguments.GetInput("data");

			public IEnumerable<int> Indices
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("indices");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter indices is missing"));
				}
			}

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			public bool SqueezeAxis => operatorArguments.GetParameter("squeeze_axis", SqueezeAxisDefault);

			public int Sections => operatorArguments.GetParameter("sections", SectionsDefault);

			internal NpiHsplit(Arguments<Symbol> operatorArguments)
				: base("_npi_hsplit", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiHsplit CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiHsplit(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiHsplit(OperatorArguments.AddReplace(args));
			}

			public NpiHsplit(Symbol data, IEnumerable<int> indices, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> squeezeAxis, [Optional] [OptionalArgument] FSharpOption<int> sections)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)indices))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004014663_002D1279(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("squeeze_axis", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004014664_002D1280(), squeezeAxis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sections", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004014665_002D1281(), sections))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public NpiHsplit(IEnumerable<int> indices, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> squeezeAxis, [Optional] [OptionalArgument] FSharpOption<int> sections)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)indices))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004014683_002D1282(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("squeeze_axis", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004014684_002D1283(), squeezeAxis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sections", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004014685_002D1284(), sections))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public NpiHsplit With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> indices, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> squeezeAxis, [Optional] [OptionalArgument] FSharpOption<int> sections)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014725_002D1285(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014720_002D1286(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014721_002D1287(), indices), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014722_002D1288(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014723_002D1289(), squeezeAxis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014724_002D1290(), sections), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new NpiHsplit(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiHsplitBackward : SymbolOperator
		{
			internal NpiHsplitBackward(Arguments<Symbol> operatorArguments)
				: base("_npi_hsplit_backward", operatorArguments)
			{
			}

			public static NpiHsplitBackward CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiHsplitBackward(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiHsplitBackward(OperatorArguments.AddReplace(args));
			}

			public NpiHsplitBackward()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_004014733_002D1291()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpDiag : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int KDefault => 0;

			public Symbol Data => operatorArguments.GetInput("data");

			public int K => operatorArguments.GetParameter("k", KDefault);

			internal NpDiag(Arguments<Symbol> operatorArguments)
				: base("_np_diag", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpDiag CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpDiag(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpDiag(OperatorArguments.AddReplace(args));
			}

			public NpDiag([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> k)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004014750_002D1292(), k))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpDiag With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> k)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014769_002D1293(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014767_002D1294(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014768_002D1295(), k), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpDiag(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpDiagflat : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int KDefault => 0;

			public Symbol Data => operatorArguments.GetInput("data");

			public int K => operatorArguments.GetParameter("k", KDefault);

			internal NpDiagflat(Arguments<Symbol> operatorArguments)
				: base("_np_diagflat", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpDiagflat CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpDiagflat(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpDiagflat(OperatorArguments.AddReplace(args));
			}

			public NpDiagflat([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> k)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004014784_002D1296(), k))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpDiagflat With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> k)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014803_002D1297(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014801_002D1298(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014802_002D1299(), k), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpDiagflat(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiShareMemory : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("a");

			public Symbol B => operatorArguments.GetInput("b");

			internal NpiShareMemory(Arguments<Symbol> operatorArguments)
				: base("_npi_share_memory", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiShareMemory CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiShareMemory(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiShareMemory(OperatorArguments.AddReplace(args));
			}

			public NpiShareMemory([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> b)
			{
				Symbol a2 = Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(b, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiShareMemory With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> b)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014835_002D1300(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014833_002D1301(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014834_002D1302(), b), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiShareMemory(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpxNonzero : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol X => operatorArguments.GetInput("x");

			internal NpxNonzero(Arguments<Symbol> operatorArguments)
				: base("_npx_nonzero", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpxNonzero CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpxNonzero(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpxNonzero(OperatorArguments.AddReplace(args));
			}

			public NpxNonzero([Optional] [OptionalArgument] FSharpOption<Symbol> x)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public NpxNonzero With([Optional] [OptionalArgument] FSharpOption<Symbol> x)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014858_002D1303(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014857_002D1304(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new NpxNonzero(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiTensordot : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("a");

			public Symbol B => operatorArguments.GetInput("b");

			public IEnumerable<int> AAxesSummed
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("a_axes_summed");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter a_axes_summed is missing"));
				}
			}

			public IEnumerable<int> BAxesSummed
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("b_axes_summed");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter b_axes_summed is missing"));
				}
			}

			internal NpiTensordot(Arguments<Symbol> operatorArguments)
				: base("_npi_tensordot", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiTensordot CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiTensordot(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiTensordot(OperatorArguments.AddReplace(args));
			}

			public NpiTensordot(Symbol a, Symbol b, IEnumerable<int> aAxesSummed, IEnumerable<int> bAxesSummed)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewInput(b)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a_axes_summed", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)aAxesSummed))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("b_axes_summed", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)bAxesSummed))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public NpiTensordot(IEnumerable<int> aAxesSummed, IEnumerable<int> bAxesSummed, [Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> b)
			{
				Symbol a2 = Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(b, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a_axes_summed", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)aAxesSummed))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("b_axes_summed", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)bAxesSummed))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public NpiTensordot With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> b, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> aAxesSummed, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> bAxesSummed)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014922_002D1305(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014918_002D1306(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014919_002D1307(), b), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014920_002D1308(), aAxesSummed), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014921_002D1309(), bAxesSummed), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new NpiTensordot(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiTensordotIntAxes : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("a");

			public Symbol B => operatorArguments.GetInput("b");

			public int Axes
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("axes");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter axes is missing"));
				}
			}

			internal NpiTensordotIntAxes(Arguments<Symbol> operatorArguments)
				: base("_npi_tensordot_int_axes", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiTensordotIntAxes CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiTensordotIntAxes(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiTensordotIntAxes(OperatorArguments.AddReplace(args));
			}

			public NpiTensordotIntAxes(Symbol a, Symbol b, int axes)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewInput(b)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)axes))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public NpiTensordotIntAxes(int axes, [Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> b)
			{
				Symbol a2 = Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(b, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)axes))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public NpiTensordotIntAxes With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> b, [Optional] [OptionalArgument] FSharpOption<int> axes)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004014975_002D1310(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014972_002D1311(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014973_002D1312(), b), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004014974_002D1313(), axes), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpiTensordotIntAxes(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpTrace : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int OffsetDefault => 0;

			public static int Axis1Default => 0;

			public static int Axis2Default => 1;

			public Symbol Data => operatorArguments.GetInput("data");

			public int Offset => operatorArguments.GetParameter("offset", OffsetDefault);

			public int Axis1 => operatorArguments.GetParameter("axis1", Axis1Default);

			public int Axis2 => operatorArguments.GetParameter("axis2", Axis2Default);

			internal NpTrace(Arguments<Symbol> operatorArguments)
				: base("_np_trace", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpTrace CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpTrace(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpTrace(OperatorArguments.AddReplace(args));
			}

			public NpTrace([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> offset, [Optional] [OptionalArgument] FSharpOption<int> axis1, [Optional] [OptionalArgument] FSharpOption<int> axis2)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004015014_002D1314(), offset))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis1", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004015015_002D1315(), axis1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis2", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004015016_002D1316(), axis2))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public NpTrace With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> offset, [Optional] [OptionalArgument] FSharpOption<int> axis1, [Optional] [OptionalArgument] FSharpOption<int> axis2)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015051_002D1317(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015047_002D1318(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015048_002D1319(), offset), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015049_002D1320(), axis1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015050_002D1321(), axis2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new NpTrace(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiTril : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int KDefault => 0;

			public Symbol Data => operatorArguments.GetInput("data");

			public int K => operatorArguments.GetParameter("k", KDefault);

			internal NpiTril(Arguments<Symbol> operatorArguments)
				: base("_npi_tril", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiTril CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiTril(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiTril(OperatorArguments.AddReplace(args));
			}

			public NpiTril([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> k)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004015066_002D1322(), k))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiTril With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> k)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015085_002D1323(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015083_002D1324(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015084_002D1325(), k), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiTril(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiTrueDivide : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NpiTrueDivide(Arguments<Symbol> operatorArguments)
				: base("_npi_true_divide", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiTrueDivide CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiTrueDivide(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiTrueDivide(OperatorArguments.AddReplace(args));
			}

			public NpiTrueDivide([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NpiTrueDivide With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015117_002D1326(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015115_002D1327(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015116_002D1328(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiTrueDivide(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiTrueDivideScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiTrueDivideScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_true_divide_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiTrueDivideScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiTrueDivideScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiTrueDivideScalar(OperatorArguments.AddReplace(args));
			}

			public NpiTrueDivideScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiTrueDivideScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiTrueDivideScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015158_002D1329(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015156_002D1330(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015157_002D1331(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiTrueDivideScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiRtrueDivideScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NpiRtrueDivideScalar(Arguments<Symbol> operatorArguments)
				: base("_npi_rtrue_divide_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiRtrueDivideScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiRtrueDivideScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiRtrueDivideScalar(OperatorArguments.AddReplace(args));
			}

			public NpiRtrueDivideScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRtrueDivideScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiRtrueDivideScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015199_002D1332(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015197_002D1333(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015198_002D1334(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiRtrueDivideScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiUnique : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool ReturnIndexDefault => false;

			public static bool ReturnInverseDefault => false;

			public static bool ReturnCountsDefault => false;

			public static FSharpOption<int> AxisDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public bool ReturnIndex => operatorArguments.GetParameter("return_index", ReturnIndexDefault);

			public bool ReturnInverse => operatorArguments.GetParameter("return_inverse", ReturnInverseDefault);

			public bool ReturnCounts => operatorArguments.GetParameter("return_counts", ReturnCountsDefault);

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			internal NpiUnique(Arguments<Symbol> operatorArguments)
				: base("_npi_unique", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiUnique CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiUnique(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiUnique(OperatorArguments.AddReplace(args));
			}

			public NpiUnique([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<bool> returnIndex, [Optional] [OptionalArgument] FSharpOption<bool> returnInverse, [Optional] [OptionalArgument] FSharpOption<bool> returnCounts, [Optional] [OptionalArgument] FSharpOption<int> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("return_index", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004015220_002D1335(), returnIndex))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("return_inverse", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004015221_002D1336(), returnInverse))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("return_counts", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004015222_002D1337(), returnCounts))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004015223_002D1338(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public NpiUnique With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<bool> returnIndex, [Optional] [OptionalArgument] FSharpOption<bool> returnInverse, [Optional] [OptionalArgument] FSharpOption<bool> returnCounts, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015266_002D1339(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015261_002D1340(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015262_002D1341(), returnIndex), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015263_002D1342(), returnInverse), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015264_002D1343(), returnCounts), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015265_002D1344(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new NpiUnique(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiWhere : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Condition => operatorArguments.GetInput("condition");

			public Symbol X => operatorArguments.GetInput("x");

			public Symbol Y => operatorArguments.GetInput("y");

			internal NpiWhere(Arguments<Symbol> operatorArguments)
				: base("_npi_where", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiWhere CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiWhere(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiWhere(OperatorArguments.AddReplace(args));
			}

			public NpiWhere([Optional] [OptionalArgument] FSharpOption<Symbol> condition, [Optional] [OptionalArgument] FSharpOption<Symbol> x, [Optional] [OptionalArgument] FSharpOption<Symbol> y)
			{
				Symbol condition2 = Operators.DefaultArg<Symbol>(condition, (Symbol)new ImplicitVariable());
				Symbol x2 = Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(y, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("condition", OpArg<Symbol>.NewInput(condition2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("y", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public NpiWhere With([Optional] [OptionalArgument] FSharpOption<Symbol> condition, [Optional] [OptionalArgument] FSharpOption<Symbol> x, [Optional] [OptionalArgument] FSharpOption<Symbol> y)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015307_002D1345(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015304_002D1346(), condition), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015305_002D1347(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015306_002D1348(), y), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new NpiWhere(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiHanning : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static DataType DtypeDefault => DataType.Float32;

			public int M
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("M");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter M is missing"));
				}
			}

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiHanning(Arguments<Symbol> operatorArguments)
				: base("_npi_hanning", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiHanning CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiHanning(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiHanning(OperatorArguments.AddReplace(args));
			}

			public NpiHanning(int M, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("M", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)M))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004015322_002D1349(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiHanning With([Optional] [OptionalArgument] FSharpOption<int> M, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015341_002D1350(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015339_002D1351(), M), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015340_002D1352(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiHanning(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiHamming : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static DataType DtypeDefault => DataType.Float32;

			public int M
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("M");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter M is missing"));
				}
			}

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiHamming(Arguments<Symbol> operatorArguments)
				: base("_npi_hamming", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiHamming CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiHamming(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiHamming(OperatorArguments.AddReplace(args));
			}

			public NpiHamming(int M, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("M", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)M))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004015356_002D1353(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiHamming With([Optional] [OptionalArgument] FSharpOption<int> M, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015375_002D1354(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015373_002D1355(), M), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015374_002D1356(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiHamming(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiBlackman : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static DataType DtypeDefault => DataType.Float32;

			public int M
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("M");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter M is missing"));
				}
			}

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiBlackman(Arguments<Symbol> operatorArguments)
				: base("_npi_blackman", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiBlackman CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiBlackman(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiBlackman(OperatorArguments.AddReplace(args));
			}

			public NpiBlackman(int M, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("M", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)M))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004015390_002D1357(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NpiBlackman With([Optional] [OptionalArgument] FSharpOption<int> M, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015409_002D1358(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015407_002D1359(), M), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015408_002D1360(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NpiBlackman(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiBernoulli : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<double> ProbDefault => null;

			public static FSharpOption<double> LogitDefault => null;

			public static FSharpOption<int[]> SizeDefault => null;

			public static DataType DtypeDefault => DataType.Float32;

			public Symbol Input1 => operatorArguments.GetInput("input1");

			public bool IsLogit
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("is_logit");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (bool)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<bool, bool>((PrintfFormat<bool, Unit, string, bool>)(object)new PrintfFormat<bool, Unit, string, bool, Unit>("Required parameter is_logit is missing"));
				}
			}

			public FSharpOption<double> Prob => operatorArguments.GetParameter<FSharpOption<double>>("prob", ProbDefault);

			public FSharpOption<double> Logit => operatorArguments.GetParameter<FSharpOption<double>>("logit", LogitDefault);

			public FSharpOption<int[]> Size => operatorArguments.GetParameter<FSharpOption<int[]>>("size", SizeDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiBernoulli(Arguments<Symbol> operatorArguments)
				: base("_npi_bernoulli", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiBernoulli CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiBernoulli(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiBernoulli(OperatorArguments.AddReplace(args));
			}

			public NpiBernoulli(Symbol input1, bool isLogit, [Optional] [OptionalArgument] FSharpOption<double> prob, [Optional] [OptionalArgument] FSharpOption<double> logit, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(input1)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_logit", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)isLogit))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("prob", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004015432_002D1361(), prob))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("logit", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004015433_002D1362(), logit))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004015434_002D1363(), size))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004015435_002D1364(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public NpiBernoulli(bool isLogit, [Optional] [OptionalArgument] FSharpOption<Symbol> input1, [Optional] [OptionalArgument] FSharpOption<double> prob, [Optional] [OptionalArgument] FSharpOption<double> logit, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(input1, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_logit", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)isLogit))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("prob", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004015455_002D1365(), prob))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("logit", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004015456_002D1366(), logit))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004015457_002D1367(), size))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004015458_002D1368(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public NpiBernoulli With([Optional] [OptionalArgument] FSharpOption<Symbol> input1, [Optional] [OptionalArgument] FSharpOption<bool> isLogit, [Optional] [OptionalArgument] FSharpOption<double> prob, [Optional] [OptionalArgument] FSharpOption<double> logit, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015506_002D1369(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015500_002D1370(), input1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015501_002D1371(), isLogit), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015502_002D1372(), prob), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015503_002D1373(), logit), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015504_002D1374(), size), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015505_002D1375(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new NpiBernoulli(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiChoice : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool ReplaceDefault => true;

			public static bool WeightedDefault => false;

			public Symbol Input1 => operatorArguments.GetInput("input1");

			public Symbol Input2 => operatorArguments.GetInput("input2");

			public long A
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("a");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (long)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<long, long>((PrintfFormat<long, Unit, string, long>)(object)new PrintfFormat<long, Unit, string, long, Unit>("Required parameter a is missing"));
				}
			}

			public IEnumerable<int> Size
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("size");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter size is missing"));
				}
			}

			public bool Replace => operatorArguments.GetParameter("replace", ReplaceDefault);

			public bool Weighted => operatorArguments.GetParameter("weighted", WeightedDefault);

			internal NpiChoice(Arguments<Symbol> operatorArguments)
				: base("_npi_choice", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiChoice CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiChoice(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiChoice(OperatorArguments.AddReplace(args));
			}

			public NpiChoice(Symbol input1, Symbol input2, long a, IEnumerable<int> size, [Optional] [OptionalArgument] FSharpOption<bool> replace, [Optional] [OptionalArgument] FSharpOption<bool> weighted)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(input1)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input2", OpArg<Symbol>.NewInput(input2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)a))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)size))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("replace", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004015532_002D1376(), replace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weighted", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004015533_002D1377(), weighted))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public NpiChoice(long a, IEnumerable<int> size, [Optional] [OptionalArgument] FSharpOption<Symbol> input1, [Optional] [OptionalArgument] FSharpOption<Symbol> input2, [Optional] [OptionalArgument] FSharpOption<bool> replace, [Optional] [OptionalArgument] FSharpOption<bool> weighted)
			{
				Symbol input3 = Operators.DefaultArg<Symbol>(input1, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(input2, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(input3)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input2", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)a))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)size))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("replace", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004015557_002D1378(), replace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weighted", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004015558_002D1379(), weighted))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public NpiChoice With([Optional] [OptionalArgument] FSharpOption<Symbol> input1, [Optional] [OptionalArgument] FSharpOption<Symbol> input2, [Optional] [OptionalArgument] FSharpOption<long> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<bool> replace, [Optional] [OptionalArgument] FSharpOption<bool> weighted)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015600_002D1380(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015594_002D1381(), input1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015595_002D1382(), input2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015596_002D1383(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015597_002D1384(), size), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015598_002D1385(), replace), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015599_002D1386(), weighted), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new NpiChoice(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiMultinomial : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> SizeDefault => null;

			public Symbol A => operatorArguments.GetInput("a");

			public int N
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("n");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter n is missing"));
				}
			}

			public IEnumerable<double> Pvals
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("pvals");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter pvals is missing"));
				}
			}

			public FSharpOption<int[]> Size => operatorArguments.GetParameter<FSharpOption<int[]>>("size", SizeDefault);

			internal NpiMultinomial(Arguments<Symbol> operatorArguments)
				: base("_npi_multinomial", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiMultinomial CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiMultinomial(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiMultinomial(OperatorArguments.AddReplace(args));
			}

			public NpiMultinomial(Symbol a, int n, IEnumerable<double> pvals, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)n))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pvals", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)pvals))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004015627_002D1387(), size))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public NpiMultinomial(int n, IEnumerable<double> pvals, [Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)n))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pvals", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)pvals))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004015651_002D1388(), size))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public NpiMultinomial With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<int> n, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> pvals, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015680_002D1389(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015676_002D1390(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015677_002D1391(), n), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015678_002D1392(), pvals), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015679_002D1393(), size), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new NpiMultinomial(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiNormal : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<double> LocDefault => null;

			public static FSharpOption<double> ScaleDefault => null;

			public static FSharpOption<int[]> SizeDefault => null;

			public static GeneratedArgumentTypes.FloatDType DtypeDefault => GeneratedArgumentTypes.FloatDType.Float32;

			public Symbol Input1 => operatorArguments.GetInput("input1");

			public Symbol Input2 => operatorArguments.GetInput("input2");

			public FSharpOption<double> Loc => operatorArguments.GetParameter<FSharpOption<double>>("loc", LocDefault);

			public FSharpOption<double> Scale => operatorArguments.GetParameter<FSharpOption<double>>("scale", ScaleDefault);

			public FSharpOption<int[]> Size => operatorArguments.GetParameter<FSharpOption<int[]>>("size", SizeDefault);

			public GeneratedArgumentTypes.FloatDType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiNormal(Arguments<Symbol> operatorArguments)
				: base("_npi_normal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiNormal CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiNormal(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiNormal(OperatorArguments.AddReplace(args));
			}

			public NpiNormal([Optional] [OptionalArgument] FSharpOption<Symbol> input1, [Optional] [OptionalArgument] FSharpOption<Symbol> input2, [Optional] [OptionalArgument] FSharpOption<double> loc, [Optional] [OptionalArgument] FSharpOption<double> scale, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				Symbol input3 = Operators.DefaultArg<Symbol>(input1, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(input2, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(input3)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input2", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("loc", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004015706_002D1394(), loc))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scale", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004015707_002D1395(), scale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004015708_002D1396(), size))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004015709_002D1397(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public NpiNormal With([Optional] [OptionalArgument] FSharpOption<Symbol> input1, [Optional] [OptionalArgument] FSharpOption<Symbol> input2, [Optional] [OptionalArgument] FSharpOption<double> loc, [Optional] [OptionalArgument] FSharpOption<double> scale, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015757_002D1398(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015751_002D1399(), input1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015752_002D1400(), input2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015753_002D1401(), loc), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015754_002D1402(), scale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015755_002D1403(), size), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015756_002D1404(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new NpiNormal(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiNormalN : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<double> LocDefault => null;

			public static FSharpOption<double> ScaleDefault => null;

			public static FSharpOption<int[]> SizeDefault => null;

			public static GeneratedArgumentTypes.FloatDType DtypeDefault => GeneratedArgumentTypes.FloatDType.Float32;

			public Symbol Input1 => operatorArguments.GetInput("input1");

			public Symbol Input2 => operatorArguments.GetInput("input2");

			public FSharpOption<double> Loc => operatorArguments.GetParameter<FSharpOption<double>>("loc", LocDefault);

			public FSharpOption<double> Scale => operatorArguments.GetParameter<FSharpOption<double>>("scale", ScaleDefault);

			public FSharpOption<int[]> Size => operatorArguments.GetParameter<FSharpOption<int[]>>("size", SizeDefault);

			public GeneratedArgumentTypes.FloatDType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiNormalN(Arguments<Symbol> operatorArguments)
				: base("_npi_normal_n", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiNormalN CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiNormalN(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiNormalN(OperatorArguments.AddReplace(args));
			}

			public NpiNormalN([Optional] [OptionalArgument] FSharpOption<Symbol> input1, [Optional] [OptionalArgument] FSharpOption<Symbol> input2, [Optional] [OptionalArgument] FSharpOption<double> loc, [Optional] [OptionalArgument] FSharpOption<double> scale, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				Symbol input3 = Operators.DefaultArg<Symbol>(input1, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(input2, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(input3)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input2", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("loc", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004015783_002D1405(), loc))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scale", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004015784_002D1406(), scale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004015785_002D1407(), size))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004015786_002D1408(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public NpiNormalN With([Optional] [OptionalArgument] FSharpOption<Symbol> input1, [Optional] [OptionalArgument] FSharpOption<Symbol> input2, [Optional] [OptionalArgument] FSharpOption<double> loc, [Optional] [OptionalArgument] FSharpOption<double> scale, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015834_002D1409(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015828_002D1410(), input1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015829_002D1411(), input2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015830_002D1412(), loc), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015831_002D1413(), scale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015832_002D1414(), size), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015833_002D1415(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new NpiNormalN(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiUniform : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<double> LowDefault => null;

			public static FSharpOption<double> HighDefault => null;

			public static FSharpOption<int[]> SizeDefault => null;

			public static GeneratedArgumentTypes.FloatDType DtypeDefault => GeneratedArgumentTypes.FloatDType.Float32;

			public Symbol Input1 => operatorArguments.GetInput("input1");

			public Symbol Input2 => operatorArguments.GetInput("input2");

			public FSharpOption<double> Low => operatorArguments.GetParameter<FSharpOption<double>>("low", LowDefault);

			public FSharpOption<double> High => operatorArguments.GetParameter<FSharpOption<double>>("high", HighDefault);

			public FSharpOption<int[]> Size => operatorArguments.GetParameter<FSharpOption<int[]>>("size", SizeDefault);

			public GeneratedArgumentTypes.FloatDType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiUniform(Arguments<Symbol> operatorArguments)
				: base("_npi_uniform", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiUniform CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiUniform(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiUniform(OperatorArguments.AddReplace(args));
			}

			public NpiUniform([Optional] [OptionalArgument] FSharpOption<Symbol> input1, [Optional] [OptionalArgument] FSharpOption<Symbol> input2, [Optional] [OptionalArgument] FSharpOption<double> low, [Optional] [OptionalArgument] FSharpOption<double> high, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				Symbol input3 = Operators.DefaultArg<Symbol>(input1, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(input2, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(input3)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input2", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004015860_002D1416(), low))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004015861_002D1417(), high))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004015862_002D1418(), size))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004015863_002D1419(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public NpiUniform With([Optional] [OptionalArgument] FSharpOption<Symbol> input1, [Optional] [OptionalArgument] FSharpOption<Symbol> input2, [Optional] [OptionalArgument] FSharpOption<double> low, [Optional] [OptionalArgument] FSharpOption<double> high, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015911_002D1420(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015905_002D1421(), input1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015906_002D1422(), input2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015907_002D1423(), low), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015908_002D1424(), high), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015909_002D1425(), size), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015910_002D1426(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new NpiUniform(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NpiUniformN : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<double> LowDefault => null;

			public static FSharpOption<double> HighDefault => null;

			public static FSharpOption<int[]> SizeDefault => null;

			public static GeneratedArgumentTypes.FloatDType DtypeDefault => GeneratedArgumentTypes.FloatDType.Float32;

			public Symbol Input1 => operatorArguments.GetInput("input1");

			public Symbol Input2 => operatorArguments.GetInput("input2");

			public FSharpOption<double> Low => operatorArguments.GetParameter<FSharpOption<double>>("low", LowDefault);

			public FSharpOption<double> High => operatorArguments.GetParameter<FSharpOption<double>>("high", HighDefault);

			public FSharpOption<int[]> Size => operatorArguments.GetParameter<FSharpOption<int[]>>("size", SizeDefault);

			public GeneratedArgumentTypes.FloatDType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal NpiUniformN(Arguments<Symbol> operatorArguments)
				: base("_npi_uniform_n", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NpiUniformN CreateFromArguments(Arguments<Symbol> args)
			{
				return new NpiUniformN(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NpiUniformN(OperatorArguments.AddReplace(args));
			}

			public NpiUniformN([Optional] [OptionalArgument] FSharpOption<Symbol> input1, [Optional] [OptionalArgument] FSharpOption<Symbol> input2, [Optional] [OptionalArgument] FSharpOption<double> low, [Optional] [OptionalArgument] FSharpOption<double> high, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				Symbol input3 = Operators.DefaultArg<Symbol>(input1, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(input2, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(input3)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input2", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004015937_002D1427(), low))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004015938_002D1428(), high))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004015939_002D1429(), size))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004015940_002D1430(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public NpiUniformN With([Optional] [OptionalArgument] FSharpOption<Symbol> input1, [Optional] [OptionalArgument] FSharpOption<Symbol> input2, [Optional] [OptionalArgument] FSharpOption<double> low, [Optional] [OptionalArgument] FSharpOption<double> high, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004015988_002D1431(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015982_002D1432(), input1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015983_002D1433(), input2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015984_002D1434(), low), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015985_002D1435(), high), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015986_002D1436(), size), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004015987_002D1437(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new NpiUniformN(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SignsgdUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			internal SignsgdUpdate(Arguments<Symbol> operatorArguments)
				: base("signsgd_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SignsgdUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new SignsgdUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SignsgdUpdate(OperatorArguments.AddReplace(args));
			}

			public SignsgdUpdate(Symbol weight, Symbol grad, double lr, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016028_002D1438(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016029_002D1439(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016030_002D1440(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public SignsgdUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016068_002D1441(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016069_002D1442(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016070_002D1443(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public SignsgdUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004016115_002D1444(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016109_002D1445(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016110_002D1446(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016111_002D1447(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016112_002D1448(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016113_002D1449(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016114_002D1450(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new SignsgdUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SignumUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double MomentumDefault => 0.0;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static double WdLhDefault => 0.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol Mom => operatorArguments.GetInput("mom");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public double WdLh => operatorArguments.GetParameter("wd_lh", WdLhDefault);

			internal SignumUpdate(Arguments<Symbol> operatorArguments)
				: base("signum_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SignumUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new SignumUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SignumUpdate(OperatorArguments.AddReplace(args));
			}

			public SignumUpdate(Symbol weight, Symbol grad, Symbol mom, double lr, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<double> wdLh)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(mom)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016165_002D1451(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016166_002D1452(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016167_002D1453(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016168_002D1454(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd_lh", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016169_002D1455(), wdLh))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))
			{
			}

			public SignumUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mom, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<double> wdLh)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(mom, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016218_002D1456(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016219_002D1457(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016220_002D1458(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016221_002D1459(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd_lh", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016222_002D1460(), wdLh))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))));
			}

			public SignumUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mom, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<double> wdLh)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004016288_002D1461(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016279_002D1462(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016280_002D1463(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016281_002D1464(), mom), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016282_002D1465(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016283_002D1466(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016284_002D1467(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016285_002D1468(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016286_002D1469(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016287_002D1470(), wdLh), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))));
				return new SignumUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MultiSgdUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static int NumWeightsDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public IEnumerable<double> Lrs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lrs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter lrs is missing"));
				}
			}

			public IEnumerable<double> Wds
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("wds");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter wds is missing"));
				}
			}

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public int NumWeights => operatorArguments.GetParameter("num_weights", NumWeightsDefault);

			internal MultiSgdUpdate(Arguments<Symbol> operatorArguments)
				: base("multi_sgd_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MultiSgdUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new MultiSgdUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MultiSgdUpdate(OperatorArguments.AddReplace(args));
			}

			public MultiSgdUpdate(IEnumerable<Symbol> data, IEnumerable<double> lrs, IEnumerable<double> wds, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lrs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wds))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016321_002D1471(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016322_002D1472(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004016323_002D1473(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public MultiSgdUpdate(IEnumerable<double> lrs, IEnumerable<double> wds, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_004016347_002D21(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lrs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wds))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016353_002D1474(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016354_002D1475(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004016355_002D1476(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public MultiSgdUpdate With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> lrs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> wds, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004016400_002D1477(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016394_002D1478(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016395_002D1479(), lrs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016396_002D1480(), wds), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016397_002D1481(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016398_002D1482(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016399_002D1483(), numWeights), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new MultiSgdUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MultiSgdMomUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double MomentumDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static int NumWeightsDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public IEnumerable<double> Lrs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lrs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter lrs is missing"));
				}
			}

			public IEnumerable<double> Wds
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("wds");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter wds is missing"));
				}
			}

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public int NumWeights => operatorArguments.GetParameter("num_weights", NumWeightsDefault);

			internal MultiSgdMomUpdate(Arguments<Symbol> operatorArguments)
				: base("multi_sgd_mom_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MultiSgdMomUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new MultiSgdMomUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MultiSgdMomUpdate(OperatorArguments.AddReplace(args));
			}

			public MultiSgdMomUpdate(IEnumerable<Symbol> data, IEnumerable<double> lrs, IEnumerable<double> wds, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lrs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wds))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016447_002D1484(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016448_002D1485(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016449_002D1486(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004016450_002D1487(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))
			{
			}

			public MultiSgdMomUpdate(IEnumerable<double> lrs, IEnumerable<double> wds, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_004016488_002D22(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lrs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wds))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016494_002D1488(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016495_002D1489(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016496_002D1490(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004016497_002D1491(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))
			{
			}

			public MultiSgdMomUpdate With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> lrs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> wds, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004016550_002D1492(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016543_002D1493(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016544_002D1494(), lrs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016545_002D1495(), wds), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016546_002D1496(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016547_002D1497(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016548_002D1498(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016549_002D1499(), numWeights), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))));
				return new MultiSgdMomUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MultiMpSgdUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static int NumWeightsDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public IEnumerable<double> Lrs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lrs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter lrs is missing"));
				}
			}

			public IEnumerable<double> Wds
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("wds");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter wds is missing"));
				}
			}

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public int NumWeights => operatorArguments.GetParameter("num_weights", NumWeightsDefault);

			internal MultiMpSgdUpdate(Arguments<Symbol> operatorArguments)
				: base("multi_mp_sgd_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MultiMpSgdUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new MultiMpSgdUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MultiMpSgdUpdate(OperatorArguments.AddReplace(args));
			}

			public MultiMpSgdUpdate(IEnumerable<Symbol> data, IEnumerable<double> lrs, IEnumerable<double> wds, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lrs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wds))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016583_002D1500(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016584_002D1501(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004016585_002D1502(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public MultiMpSgdUpdate(IEnumerable<double> lrs, IEnumerable<double> wds, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_004016609_002D23(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lrs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wds))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016615_002D1503(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016616_002D1504(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004016617_002D1505(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public MultiMpSgdUpdate With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> lrs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> wds, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004016662_002D1506(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016656_002D1507(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016657_002D1508(), lrs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016658_002D1509(), wds), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016659_002D1510(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016660_002D1511(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016661_002D1512(), numWeights), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new MultiMpSgdUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MultiMpSgdMomUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double MomentumDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static int NumWeightsDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public IEnumerable<double> Lrs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lrs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter lrs is missing"));
				}
			}

			public IEnumerable<double> Wds
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("wds");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<double>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<double>, IEnumerable<double>>((PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>>)(object)new PrintfFormat<IEnumerable<double>, Unit, string, IEnumerable<double>, Unit>("Required parameter wds is missing"));
				}
			}

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public int NumWeights => operatorArguments.GetParameter("num_weights", NumWeightsDefault);

			internal MultiMpSgdMomUpdate(Arguments<Symbol> operatorArguments)
				: base("multi_mp_sgd_mom_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MultiMpSgdMomUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new MultiMpSgdMomUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MultiMpSgdMomUpdate(OperatorArguments.AddReplace(args));
			}

			public MultiMpSgdMomUpdate(IEnumerable<Symbol> data, IEnumerable<double> lrs, IEnumerable<double> wds, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lrs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wds))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016709_002D1513(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016710_002D1514(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016711_002D1515(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004016712_002D1516(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))
			{
			}

			public MultiMpSgdMomUpdate(IEnumerable<double> lrs, IEnumerable<double> wds, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_004016750_002D24(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lrs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wds))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016756_002D1517(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016757_002D1518(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016758_002D1519(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004016759_002D1520(), numWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))
			{
			}

			public MultiMpSgdMomUpdate With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> lrs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> wds, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<int> numWeights)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004016812_002D1521(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016805_002D1522(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016806_002D1523(), lrs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016807_002D1524(), wds), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016808_002D1525(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016809_002D1526(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016810_002D1527(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016811_002D1528(), numWeights), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))));
				return new MultiMpSgdMomUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SgdUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static bool LazyUpdateDefault => true;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public bool LazyUpdate => operatorArguments.GetParameter("lazy_update", LazyUpdateDefault);

			internal SgdUpdate(Arguments<Symbol> operatorArguments)
				: base("sgd_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SgdUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new SgdUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SgdUpdate(OperatorArguments.AddReplace(args));
			}

			public SgdUpdate(Symbol weight, Symbol grad, double lr, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016853_002D1529(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016854_002D1530(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016855_002D1531(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004016856_002D1532(), lazyUpdate))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))
			{
			}

			public SgdUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016895_002D1533(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016896_002D1534(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004016897_002D1535(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004016898_002D1536(), lazyUpdate))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))));
			}

			public SgdUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004016951_002D1537(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016944_002D1538(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016945_002D1539(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016946_002D1540(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016947_002D1541(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016948_002D1542(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016949_002D1543(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004016950_002D1544(), lazyUpdate), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))));
				return new SgdUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SgdMomUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double MomentumDefault => 0.0;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static bool LazyUpdateDefault => true;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol Mom => operatorArguments.GetInput("mom");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public bool LazyUpdate => operatorArguments.GetParameter("lazy_update", LazyUpdateDefault);

			internal SgdMomUpdate(Arguments<Symbol> operatorArguments)
				: base("sgd_mom_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SgdMomUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new SgdMomUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SgdMomUpdate(OperatorArguments.AddReplace(args));
			}

			public SgdMomUpdate(Symbol weight, Symbol grad, Symbol mom, double lr, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(mom)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017011_002D1545(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017012_002D1546(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017013_002D1547(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017014_002D1548(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004017015_002D1549(), lazyUpdate))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))
			{
			}

			public SgdMomUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mom, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(mom, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017074_002D1550(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017075_002D1551(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017076_002D1552(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017077_002D1553(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004017078_002D1554(), lazyUpdate))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))));
			}

			public SgdMomUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mom, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004017144_002D1555(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017135_002D1556(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017136_002D1557(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017137_002D1558(), mom), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017138_002D1559(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017139_002D1560(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017140_002D1561(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017141_002D1562(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017142_002D1563(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017143_002D1564(), lazyUpdate), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))));
				return new SgdMomUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MpSgdUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static bool LazyUpdateDefault => true;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol Weight32 => operatorArguments.GetInput("weight32");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public bool LazyUpdate => operatorArguments.GetParameter("lazy_update", LazyUpdateDefault);

			internal MpSgdUpdate(Arguments<Symbol> operatorArguments)
				: base("mp_sgd_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MpSgdUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new MpSgdUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MpSgdUpdate(OperatorArguments.AddReplace(args));
			}

			public MpSgdUpdate(Symbol weight, Symbol grad, Symbol weight32, double lr, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight32", OpArg<Symbol>.NewInput(weight32)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017174_002D1565(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017175_002D1566(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017176_002D1567(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004017177_002D1568(), lazyUpdate))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))
			{
			}

			public MpSgdUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> weight32, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
			{
				Symbol weight33 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(weight32, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight33)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight32", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017206_002D1569(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017207_002D1570(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017208_002D1571(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004017209_002D1572(), lazyUpdate))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))));
			}

			public MpSgdUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> weight32, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004017267_002D1573(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017259_002D1574(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017260_002D1575(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017261_002D1576(), weight32), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017262_002D1577(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017263_002D1578(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017264_002D1579(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017265_002D1580(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017266_002D1581(), lazyUpdate), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new MpSgdUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MpSgdMomUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double MomentumDefault => 0.0;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static bool LazyUpdateDefault => true;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol Mom => operatorArguments.GetInput("mom");

			public Symbol Weight32 => operatorArguments.GetInput("weight32");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public bool LazyUpdate => operatorArguments.GetParameter("lazy_update", LazyUpdateDefault);

			internal MpSgdMomUpdate(Arguments<Symbol> operatorArguments)
				: base("mp_sgd_mom_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MpSgdMomUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new MpSgdMomUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MpSgdMomUpdate(OperatorArguments.AddReplace(args));
			}

			public MpSgdMomUpdate(Symbol weight, Symbol grad, Symbol mom, Symbol weight32, double lr, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(mom)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight32", OpArg<Symbol>.NewInput(weight32)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017302_002D1582(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017303_002D1583(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017304_002D1584(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017305_002D1585(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004017306_002D1586(), lazyUpdate))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))
			{
			}

			public MpSgdMomUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mom, [Optional] [OptionalArgument] FSharpOption<Symbol> weight32, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
			{
				Symbol weight33 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol mom2 = Operators.DefaultArg<Symbol>(mom, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(weight32, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight33)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(mom2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight32", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017341_002D1587(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017342_002D1588(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017343_002D1589(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017344_002D1590(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004017345_002D1591(), lazyUpdate))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))));
			}

			public MpSgdMomUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mom, [Optional] [OptionalArgument] FSharpOption<Symbol> weight32, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004017416_002D1592(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017406_002D1593(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017407_002D1594(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017408_002D1595(), mom), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017409_002D1596(), weight32), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017410_002D1597(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017411_002D1598(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017412_002D1599(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017413_002D1600(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017414_002D1601(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017415_002D1602(), lazyUpdate), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))));
				return new MpSgdMomUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class FtmlUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double Beta1Default => 0.6;

			public static double Beta2Default => 0.999;

			public static double EpsilonDefault => 1E-08;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradDefault => -1.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol D => operatorArguments.GetInput("d");

			public Symbol V => operatorArguments.GetInput("v");

			public Symbol Z => operatorArguments.GetInput("z");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public int T
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("t");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter t is missing"));
				}
			}

			public double Beta1 => operatorArguments.GetParameter("beta1", Beta1Default);

			public double Beta2 => operatorArguments.GetParameter("beta2", Beta2Default);

			public double Epsilon => operatorArguments.GetParameter("epsilon", EpsilonDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGrad => operatorArguments.GetParameter("clip_grad", ClipGradDefault);

			internal FtmlUpdate(Arguments<Symbol> operatorArguments)
				: base("ftml_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static FtmlUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new FtmlUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new FtmlUpdate(OperatorArguments.AddReplace(args));
			}

			public FtmlUpdate(Symbol weight, Symbol grad, Symbol d, Symbol v, Symbol z, double lr, int t, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGrad)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("d", OpArg<Symbol>.NewInput(d)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("v", OpArg<Symbol>.NewInput(v)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("z", OpArg<Symbol>.NewInput(z)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("t", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)t))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017474_002D1603(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017475_002D1604(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017476_002D1605(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017477_002D1606(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017478_002D1607(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017479_002D1608(), clipGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))))))
			{
			}

			public FtmlUpdate(double lr, int t, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> d, [Optional] [OptionalArgument] FSharpOption<Symbol> v, [Optional] [OptionalArgument] FSharpOption<Symbol> z, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGrad)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol d2 = Operators.DefaultArg<Symbol>(d, (Symbol)new ImplicitVariable());
				Symbol v2 = Operators.DefaultArg<Symbol>(v, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(z, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("d", OpArg<Symbol>.NewInput(d2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("v", OpArg<Symbol>.NewInput(v2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("z", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("t", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)t))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017538_002D1609(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017539_002D1610(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017540_002D1611(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017541_002D1612(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017542_002D1613(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017543_002D1614(), clipGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))))));
			}

			public FtmlUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> d, [Optional] [OptionalArgument] FSharpOption<Symbol> v, [Optional] [OptionalArgument] FSharpOption<Symbol> z, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<int> t, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGrad)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004017632_002D1615(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017619_002D1616(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017620_002D1617(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017621_002D1618(), d), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017622_002D1619(), v), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017623_002D1620(), z), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017624_002D1621(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017625_002D1622(), t), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017626_002D1623(), beta1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017627_002D1624(), beta2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017628_002D1625(), epsilon), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017629_002D1626(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017630_002D1627(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017631_002D1628(), clipGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))))))));
				return new FtmlUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class AdamUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double Beta1Default => 0.9;

			public static double Beta2Default => 0.999;

			public static double EpsilonDefault => 1E-08;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static bool LazyUpdateDefault => true;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol Mean => operatorArguments.GetInput("mean");

			public Symbol Var => operatorArguments.GetInput("var");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Beta1 => operatorArguments.GetParameter("beta1", Beta1Default);

			public double Beta2 => operatorArguments.GetParameter("beta2", Beta2Default);

			public double Epsilon => operatorArguments.GetParameter("epsilon", EpsilonDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public bool LazyUpdate => operatorArguments.GetParameter("lazy_update", LazyUpdateDefault);

			internal AdamUpdate(Arguments<Symbol> operatorArguments)
				: base("adam_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static AdamUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new AdamUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new AdamUpdate(OperatorArguments.AddReplace(args));
			}

			public AdamUpdate(Symbol weight, Symbol grad, Symbol mean, Symbol var, double lr, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(mean)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("var", OpArg<Symbol>.NewInput(var)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017701_002D1629(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017702_002D1630(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017703_002D1631(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017704_002D1632(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017705_002D1633(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017706_002D1634(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004017707_002D1635(), lazyUpdate))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))
			{
			}

			public AdamUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mean, [Optional] [OptionalArgument] FSharpOption<Symbol> var, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol mean2 = Operators.DefaultArg<Symbol>(mean, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(var, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(mean2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("var", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017776_002D1636(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017777_002D1637(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017778_002D1638(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017779_002D1639(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017780_002D1640(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017781_002D1641(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004017782_002D1642(), lazyUpdate))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))));
			}

			public AdamUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mean, [Optional] [OptionalArgument] FSharpOption<Symbol> var, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<bool> lazyUpdate)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004017869_002D1643(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017857_002D1644(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017858_002D1645(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017859_002D1646(), mean), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017860_002D1647(), var), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017861_002D1648(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017862_002D1649(), beta1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017863_002D1650(), beta2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017864_002D1651(), epsilon), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017865_002D1652(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017866_002D1653(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017867_002D1654(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004017868_002D1655(), lazyUpdate), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))));
				return new AdamUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NagMomUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double MomentumDefault => 0.0;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol Mom => operatorArguments.GetInput("mom");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			internal NagMomUpdate(Arguments<Symbol> operatorArguments)
				: base("nag_mom_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NagMomUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new NagMomUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NagMomUpdate(OperatorArguments.AddReplace(args));
			}

			public NagMomUpdate(Symbol weight, Symbol grad, Symbol mom, double lr, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(mom)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017914_002D1656(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017915_002D1657(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017916_002D1658(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017917_002D1659(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))
			{
			}

			public NagMomUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mom, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(mom, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017961_002D1660(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017962_002D1661(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017963_002D1662(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004017964_002D1663(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))));
			}

			public NagMomUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mom, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004018022_002D1664(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018014_002D1665(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018015_002D1666(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018016_002D1667(), mom), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018017_002D1668(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018018_002D1669(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018019_002D1670(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018020_002D1671(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018021_002D1672(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new NagMomUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MpNagMomUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double MomentumDefault => 0.0;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol Mom => operatorArguments.GetInput("mom");

			public Symbol Weight32 => operatorArguments.GetInput("weight32");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			internal MpNagMomUpdate(Arguments<Symbol> operatorArguments)
				: base("mp_nag_mom_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MpNagMomUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new MpNagMomUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MpNagMomUpdate(OperatorArguments.AddReplace(args));
			}

			public MpNagMomUpdate(Symbol weight, Symbol grad, Symbol mom, Symbol weight32, double lr, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(mom)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight32", OpArg<Symbol>.NewInput(weight32)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018058_002D1673(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018059_002D1674(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018060_002D1675(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018061_002D1676(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))
			{
			}

			public MpNagMomUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mom, [Optional] [OptionalArgument] FSharpOption<Symbol> weight32, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				Symbol weight33 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol mom2 = Operators.DefaultArg<Symbol>(mom, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(weight32, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight33)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(mom2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight32", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018097_002D1677(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018098_002D1678(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018099_002D1679(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018100_002D1680(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))));
			}

			public MpNagMomUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mom, [Optional] [OptionalArgument] FSharpOption<Symbol> weight32, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004018163_002D1681(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018154_002D1682(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018155_002D1683(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018156_002D1684(), mom), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018157_002D1685(), weight32), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018158_002D1686(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018159_002D1687(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018160_002D1688(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018161_002D1689(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018162_002D1690(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))));
				return new MpNagMomUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RmspropUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double Gamma1Default => 0.95;

			public static double EpsilonDefault => 1E-08;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static double ClipWeightsDefault => -1.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol N => operatorArguments.GetInput("n");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Gamma1 => operatorArguments.GetParameter("gamma1", Gamma1Default);

			public double Epsilon => operatorArguments.GetParameter("epsilon", EpsilonDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public double ClipWeights => operatorArguments.GetParameter("clip_weights", ClipWeightsDefault);

			internal RmspropUpdate(Arguments<Symbol> operatorArguments)
				: base("rmsprop_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RmspropUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new RmspropUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RmspropUpdate(OperatorArguments.AddReplace(args));
			}

			public RmspropUpdate(Symbol weight, Symbol grad, Symbol n, double lr, [Optional] [OptionalArgument] FSharpOption<double> gamma1, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<double> clipWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewInput(n)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018232_002D1691(), gamma1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018233_002D1692(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018234_002D1693(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018235_002D1694(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018236_002D1695(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018237_002D1696(), clipWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))
			{
			}

			public RmspropUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> n, [Optional] [OptionalArgument] FSharpOption<double> gamma1, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<double> clipWeights)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(n, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018305_002D1697(), gamma1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018306_002D1698(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018307_002D1699(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018308_002D1700(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018309_002D1701(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018310_002D1702(), clipWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))));
			}

			public RmspropUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> n, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> gamma1, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<double> clipWeights)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004018384_002D1703(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018374_002D1704(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018375_002D1705(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018376_002D1706(), n), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018377_002D1707(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018378_002D1708(), gamma1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018379_002D1709(), epsilon), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018380_002D1710(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018381_002D1711(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018382_002D1712(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018383_002D1713(), clipWeights), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))));
				return new RmspropUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RmspropalexUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double Gamma1Default => 0.95;

			public static double Gamma2Default => 0.9;

			public static double EpsilonDefault => 1E-08;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public static double ClipWeightsDefault => -1.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol N => operatorArguments.GetInput("n");

			public Symbol G => operatorArguments.GetInput("g");

			public Symbol Delta => operatorArguments.GetInput("delta");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Gamma1 => operatorArguments.GetParameter("gamma1", Gamma1Default);

			public double Gamma2 => operatorArguments.GetParameter("gamma2", Gamma2Default);

			public double Epsilon => operatorArguments.GetParameter("epsilon", EpsilonDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			public double ClipWeights => operatorArguments.GetParameter("clip_weights", ClipWeightsDefault);

			internal RmspropalexUpdate(Arguments<Symbol> operatorArguments)
				: base("rmspropalex_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RmspropalexUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new RmspropalexUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RmspropalexUpdate(OperatorArguments.AddReplace(args));
			}

			public RmspropalexUpdate(Symbol weight, Symbol grad, Symbol n, Symbol g, Symbol delta, double lr, [Optional] [OptionalArgument] FSharpOption<double> gamma1, [Optional] [OptionalArgument] FSharpOption<double> gamma2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<double> clipWeights)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewInput(n)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("g", OpArg<Symbol>.NewInput(g)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("delta", OpArg<Symbol>.NewInput(delta)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018450_002D1714(), gamma1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018451_002D1715(), gamma2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018452_002D1716(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018453_002D1717(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018454_002D1718(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018455_002D1719(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018456_002D1720(), clipWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))))))
			{
			}

			public RmspropalexUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> n, [Optional] [OptionalArgument] FSharpOption<Symbol> g, [Optional] [OptionalArgument] FSharpOption<Symbol> delta, [Optional] [OptionalArgument] FSharpOption<double> gamma1, [Optional] [OptionalArgument] FSharpOption<double> gamma2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<double> clipWeights)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol i = Operators.DefaultArg<Symbol>(n, (Symbol)new ImplicitVariable());
				Symbol g2 = Operators.DefaultArg<Symbol>(g, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(delta, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewInput(i)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("g", OpArg<Symbol>.NewInput(g2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("delta", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018523_002D1721(), gamma1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018524_002D1722(), gamma2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018525_002D1723(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018526_002D1724(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018527_002D1725(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018528_002D1726(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_weights", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018529_002D1727(), clipWeights))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))))));
			}

			public RmspropalexUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> n, [Optional] [OptionalArgument] FSharpOption<Symbol> g, [Optional] [OptionalArgument] FSharpOption<Symbol> delta, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> gamma1, [Optional] [OptionalArgument] FSharpOption<double> gamma2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient, [Optional] [OptionalArgument] FSharpOption<double> clipWeights)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004018621_002D1728(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018608_002D1729(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018609_002D1730(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018610_002D1731(), n), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018611_002D1732(), g), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018612_002D1733(), delta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018613_002D1734(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018614_002D1735(), gamma1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018615_002D1736(), gamma2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018616_002D1737(), epsilon), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018617_002D1738(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018618_002D1739(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018619_002D1740(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018620_002D1741(), clipWeights), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))))))));
				return new RmspropalexUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class FtrlUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double Lamda1Default => 0.01;

			public static double BetaDefault => 1.0;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol Z => operatorArguments.GetInput("z");

			public Symbol N => operatorArguments.GetInput("n");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Lamda1 => operatorArguments.GetParameter("lamda1", Lamda1Default);

			public double Beta => operatorArguments.GetParameter("beta", BetaDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			internal FtrlUpdate(Arguments<Symbol> operatorArguments)
				: base("ftrl_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static FtrlUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new FtrlUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new FtrlUpdate(OperatorArguments.AddReplace(args));
			}

			public FtrlUpdate(Symbol weight, Symbol grad, Symbol z, Symbol n, double lr, [Optional] [OptionalArgument] FSharpOption<double> lamda1, [Optional] [OptionalArgument] FSharpOption<double> beta, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("z", OpArg<Symbol>.NewInput(z)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewInput(n)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lamda1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018678_002D1742(), lamda1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018679_002D1743(), beta))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018680_002D1744(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018681_002D1745(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018682_002D1746(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))
			{
			}

			public FtrlUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> z, [Optional] [OptionalArgument] FSharpOption<Symbol> n, [Optional] [OptionalArgument] FSharpOption<double> lamda1, [Optional] [OptionalArgument] FSharpOption<double> beta, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol z2 = Operators.DefaultArg<Symbol>(z, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(n, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("z", OpArg<Symbol>.NewInput(z2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lamda1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018739_002D1747(), lamda1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018740_002D1748(), beta))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018741_002D1749(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018742_002D1750(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018743_002D1751(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))));
			}

			public FtrlUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> z, [Optional] [OptionalArgument] FSharpOption<Symbol> n, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> lamda1, [Optional] [OptionalArgument] FSharpOption<double> beta, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004018814_002D1752(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018804_002D1753(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018805_002D1754(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018806_002D1755(), z), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018807_002D1756(), n), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018808_002D1757(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018809_002D1758(), lamda1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018810_002D1759(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018811_002D1760(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018812_002D1761(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018813_002D1762(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))));
				return new FtrlUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SparseAdagradUpdate : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double EpsilonDefault => 1E-07;

			public static double WdDefault => 0.0;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol History => operatorArguments.GetInput("history");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double Epsilon => operatorArguments.GetParameter("epsilon", EpsilonDefault);

			public double Wd => operatorArguments.GetParameter("wd", WdDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			internal SparseAdagradUpdate(Arguments<Symbol> operatorArguments)
				: base("_sparse_adagrad_update", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SparseAdagradUpdate CreateFromArguments(Arguments<Symbol> args)
			{
				return new SparseAdagradUpdate(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SparseAdagradUpdate(OperatorArguments.AddReplace(args));
			}

			public SparseAdagradUpdate(Symbol weight, Symbol grad, Symbol history, double lr, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("history", OpArg<Symbol>.NewInput(history)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018859_002D1763(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018860_002D1764(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018861_002D1765(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018862_002D1766(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))
			{
			}

			public SparseAdagradUpdate(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> history, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(history, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("history", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018906_002D1767(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018907_002D1768(), wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018908_002D1769(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004018909_002D1770(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))));
			}

			public SparseAdagradUpdate With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> history, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004018967_002D1771(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018959_002D1772(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018960_002D1773(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018961_002D1774(), history), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018962_002D1775(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018963_002D1776(), epsilon), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018964_002D1777(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018965_002D1778(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004018966_002D1779(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new SparseAdagradUpdate(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LambUpdatePhase1 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double Beta1Default => 0.9;

			public static double Beta2Default => 0.999;

			public static double EpsilonDefault => 1E-06;

			public static bool BiasCorrectionDefault => true;

			public static double RescaleGradDefault => 1.0;

			public static double ClipGradientDefault => -1.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Grad => operatorArguments.GetInput("grad");

			public Symbol Mean => operatorArguments.GetInput("mean");

			public Symbol Var => operatorArguments.GetInput("var");

			public double T
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("t");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter t is missing"));
				}
			}

			public double Wd
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("wd");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter wd is missing"));
				}
			}

			public double Beta1 => operatorArguments.GetParameter("beta1", Beta1Default);

			public double Beta2 => operatorArguments.GetParameter("beta2", Beta2Default);

			public double Epsilon => operatorArguments.GetParameter("epsilon", EpsilonDefault);

			public bool BiasCorrection => operatorArguments.GetParameter("bias_correction", BiasCorrectionDefault);

			public double RescaleGrad => operatorArguments.GetParameter("rescale_grad", RescaleGradDefault);

			public double ClipGradient => operatorArguments.GetParameter("clip_gradient", ClipGradientDefault);

			internal LambUpdatePhase1(Arguments<Symbol> operatorArguments)
				: base("lamb_update_phase1", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LambUpdatePhase1 CreateFromArguments(Arguments<Symbol> args)
			{
				return new LambUpdatePhase1(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LambUpdatePhase1(OperatorArguments.AddReplace(args));
			}

			public LambUpdatePhase1(Symbol weight, Symbol grad, Symbol mean, Symbol var, double t, double wd, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<bool> biasCorrection, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(mean)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("var", OpArg<Symbol>.NewInput(var)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("t", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)t))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019035_002D1780(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019036_002D1781(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019037_002D1782(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias_correction", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004019038_002D1783(), biasCorrection))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019039_002D1784(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019040_002D1785(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))
			{
			}

			public LambUpdatePhase1(double t, double wd, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mean, [Optional] [OptionalArgument] FSharpOption<Symbol> var, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<bool> biasCorrection, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol grad2 = Operators.DefaultArg<Symbol>(grad, (Symbol)new ImplicitVariable());
				Symbol mean2 = Operators.DefaultArg<Symbol>(mean, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(var, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(grad2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(mean2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("var", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("t", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)t))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)wd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019108_002D1786(), beta1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019109_002D1787(), beta2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019110_002D1788(), epsilon))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias_correction", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004019111_002D1789(), biasCorrection))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019112_002D1790(), rescaleGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019113_002D1791(), clipGradient))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))));
			}

			public LambUpdatePhase1 With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> grad, [Optional] [OptionalArgument] FSharpOption<Symbol> mean, [Optional] [OptionalArgument] FSharpOption<Symbol> var, [Optional] [OptionalArgument] FSharpOption<double> t, [Optional] [OptionalArgument] FSharpOption<double> wd, [Optional] [OptionalArgument] FSharpOption<double> beta1, [Optional] [OptionalArgument] FSharpOption<double> beta2, [Optional] [OptionalArgument] FSharpOption<double> epsilon, [Optional] [OptionalArgument] FSharpOption<bool> biasCorrection, [Optional] [OptionalArgument] FSharpOption<double> rescaleGrad, [Optional] [OptionalArgument] FSharpOption<double> clipGradient)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004019197_002D1792(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019185_002D1793(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019186_002D1794(), grad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019187_002D1795(), mean), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019188_002D1796(), var), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019189_002D1797(), t), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019190_002D1798(), wd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019191_002D1799(), beta1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019192_002D1800(), beta2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019193_002D1801(), epsilon), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019194_002D1802(), biasCorrection), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019195_002D1803(), rescaleGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019196_002D1804(), clipGradient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))));
				return new LambUpdatePhase1(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LambUpdatePhase2 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double LowerBoundDefault => -1.0;

			public static double UpperBoundDefault => -1.0;

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol G => operatorArguments.GetInput("g");

			public Symbol R1 => operatorArguments.GetInput("r1");

			public Symbol R2 => operatorArguments.GetInput("r2");

			public double Lr
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("lr");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter lr is missing"));
				}
			}

			public double LowerBound => operatorArguments.GetParameter("lower_bound", LowerBoundDefault);

			public double UpperBound => operatorArguments.GetParameter("upper_bound", UpperBoundDefault);

			internal LambUpdatePhase2(Arguments<Symbol> operatorArguments)
				: base("lamb_update_phase2", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LambUpdatePhase2 CreateFromArguments(Arguments<Symbol> args)
			{
				return new LambUpdatePhase2(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LambUpdatePhase2(OperatorArguments.AddReplace(args));
			}

			public LambUpdatePhase2(Symbol weight, Symbol g, Symbol r1, Symbol r2, double lr, [Optional] [OptionalArgument] FSharpOption<double> lowerBound, [Optional] [OptionalArgument] FSharpOption<double> upperBound)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("g", OpArg<Symbol>.NewInput(g)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("r1", OpArg<Symbol>.NewInput(r1)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("r2", OpArg<Symbol>.NewInput(r2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lower_bound", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019249_002D1805(), lowerBound))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("upper_bound", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019250_002D1806(), upperBound))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))
			{
			}

			public LambUpdatePhase2(double lr, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> g, [Optional] [OptionalArgument] FSharpOption<Symbol> r1, [Optional] [OptionalArgument] FSharpOption<Symbol> r2, [Optional] [OptionalArgument] FSharpOption<double> lowerBound, [Optional] [OptionalArgument] FSharpOption<double> upperBound)
			{
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol g2 = Operators.DefaultArg<Symbol>(g, (Symbol)new ImplicitVariable());
				Symbol r3 = Operators.DefaultArg<Symbol>(r1, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(r2, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("g", OpArg<Symbol>.NewInput(g2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("r1", OpArg<Symbol>.NewInput(r3)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("r2", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)lr))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lower_bound", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019302_002D1807(), lowerBound))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("upper_bound", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019303_002D1808(), upperBound))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))));
			}

			public LambUpdatePhase2 With([Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> g, [Optional] [OptionalArgument] FSharpOption<Symbol> r1, [Optional] [OptionalArgument] FSharpOption<Symbol> r2, [Optional] [OptionalArgument] FSharpOption<double> lr, [Optional] [OptionalArgument] FSharpOption<double> lowerBound, [Optional] [OptionalArgument] FSharpOption<double> upperBound)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004019350_002D1809(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019343_002D1810(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019344_002D1811(), g), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019345_002D1812(), r1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019346_002D1813(), r2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019347_002D1814(), lr), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019348_002D1815(), lowerBound), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019349_002D1816(), upperBound), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))));
				return new LambUpdatePhase2(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Pad : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double ConstantValueDefault => 0.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public GeneratedArgumentTypes.PadMode Mode
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("mode");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return IntrinsicFunctions.UnboxGeneric<GeneratedArgumentTypes.PadMode>(v);
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<GeneratedArgumentTypes.PadMode, GeneratedArgumentTypes.PadMode>((PrintfFormat<GeneratedArgumentTypes.PadMode, Unit, string, GeneratedArgumentTypes.PadMode>)(object)new PrintfFormat<GeneratedArgumentTypes.PadMode, Unit, string, GeneratedArgumentTypes.PadMode, Unit>("Required parameter mode is missing"));
				}
			}

			public IEnumerable<int> PadWidth
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("pad_width");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter pad_width is missing"));
				}
			}

			public double ConstantValue => operatorArguments.GetParameter("constant_value", ConstantValueDefault);

			internal Pad(Arguments<Symbol> operatorArguments)
				: base("Pad", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Pad CreateFromArguments(Arguments<Symbol> args)
			{
				return new Pad(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Pad(OperatorArguments.AddReplace(args));
			}

			public Pad(Symbol data, GeneratedArgumentTypes.PadMode mode, IEnumerable<int> padWidth, [Optional] [OptionalArgument] FSharpOption<double> constantValue)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)mode))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad_width", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)padWidth))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("constant_value", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019454_002D1817(), constantValue))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Pad(GeneratedArgumentTypes.PadMode mode, IEnumerable<int> padWidth, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> constantValue)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)mode))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad_width", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)padWidth))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("constant_value", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019555_002D1818(), constantValue))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Pad With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PadMode> mode, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> padWidth, [Optional] [OptionalArgument] FSharpOption<double> constantValue)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004019584_002D1819(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019580_002D1820(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.PadMode, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.PadMode, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019581_002D1821(), mode), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019582_002D1822(), padWidth), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019583_002D1823(), constantValue), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Pad(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribCalibrateEntropy : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int NumQuantizedBinsDefault => 255;

			public Symbol Hist => operatorArguments.GetInput("hist");

			public Symbol HistEdges => operatorArguments.GetInput("hist_edges");

			public int NumQuantizedBins => operatorArguments.GetParameter("num_quantized_bins", NumQuantizedBinsDefault);

			internal ContribCalibrateEntropy(Arguments<Symbol> operatorArguments)
				: base("_contrib_calibrate_entropy", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribCalibrateEntropy CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribCalibrateEntropy(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribCalibrateEntropy(OperatorArguments.AddReplace(args));
			}

			public ContribCalibrateEntropy([Optional] [OptionalArgument] FSharpOption<Symbol> hist, [Optional] [OptionalArgument] FSharpOption<Symbol> histEdges, [Optional] [OptionalArgument] FSharpOption<int> numQuantizedBins)
			{
				Symbol hist2 = Operators.DefaultArg<Symbol>(hist, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(histEdges, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("hist", OpArg<Symbol>.NewInput(hist2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("hist_edges", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_quantized_bins", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004019609_002D1824(), numQuantizedBins))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public ContribCalibrateEntropy With([Optional] [OptionalArgument] FSharpOption<Symbol> hist, [Optional] [OptionalArgument] FSharpOption<Symbol> histEdges, [Optional] [OptionalArgument] FSharpOption<int> numQuantizedBins)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004019633_002D1825(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019630_002D1826(), hist), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019631_002D1827(), histEdges), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019632_002D1828(), numQuantizedBins), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ContribCalibrateEntropy(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribDequantize : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static GeneratedArgumentTypes.ContribDequantizeOutType OutTypeDefault => GeneratedArgumentTypes.ContribDequantizeOutType.Float32;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol MinRange => operatorArguments.GetInput("min_range");

			public Symbol MaxRange => operatorArguments.GetInput("max_range");

			public GeneratedArgumentTypes.ContribDequantizeOutType OutType => operatorArguments.GetParameter("out_type", OutTypeDefault);

			internal ContribDequantize(Arguments<Symbol> operatorArguments)
				: base("_contrib_dequantize", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribDequantize CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribDequantize(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribDequantize(OperatorArguments.AddReplace(args));
			}

			public ContribDequantize([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> minRange, [Optional] [OptionalArgument] FSharpOption<Symbol> maxRange, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribDequantizeOutType> outType)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol minRange2 = Operators.DefaultArg<Symbol>(minRange, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(maxRange, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_range", OpArg<Symbol>.NewInput(minRange2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_range", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("out_type", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ContribDequantizeOutType, object>((FSharpFunc<GeneratedArgumentTypes.ContribDequantizeOutType, object>)new operatorArguments_004019674_002D1829(), outType))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public ContribDequantize With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> minRange, [Optional] [OptionalArgument] FSharpOption<Symbol> maxRange, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribDequantizeOutType> outType)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004019703_002D1830(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019699_002D1831(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019700_002D1832(), minRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019701_002D1833(), maxRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ContribDequantizeOutType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ContribDequantizeOutType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019702_002D1834(), outType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new ContribDequantize(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribQuantizedAct : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol MinData => operatorArguments.GetInput("min_data");

			public Symbol MaxData => operatorArguments.GetInput("max_data");

			public GeneratedArgumentTypes.ActType ActType
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("act_type");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return IntrinsicFunctions.UnboxGeneric<GeneratedArgumentTypes.ActType>(v);
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<GeneratedArgumentTypes.ActType, GeneratedArgumentTypes.ActType>((PrintfFormat<GeneratedArgumentTypes.ActType, Unit, string, GeneratedArgumentTypes.ActType>)(object)new PrintfFormat<GeneratedArgumentTypes.ActType, Unit, string, GeneratedArgumentTypes.ActType, Unit>("Required parameter act_type is missing"));
				}
			}

			internal ContribQuantizedAct(Arguments<Symbol> operatorArguments)
				: base("_contrib_quantized_act", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribQuantizedAct CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedAct(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedAct(OperatorArguments.AddReplace(args));
			}

			public ContribQuantizedAct(Symbol data, Symbol minData, Symbol maxData, GeneratedArgumentTypes.ActType actType)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(minData)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(maxData)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("act_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)actType))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public ContribQuantizedAct(GeneratedArgumentTypes.ActType actType, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> minData, [Optional] [OptionalArgument] FSharpOption<Symbol> maxData)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol minData2 = Operators.DefaultArg<Symbol>(minData, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(maxData, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(minData2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("act_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)actType))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public ContribQuantizedAct With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> minData, [Optional] [OptionalArgument] FSharpOption<Symbol> maxData, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ActType> actType)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004019786_002D1835(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019782_002D1836(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019783_002D1837(), minData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019784_002D1838(), maxData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ActType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ActType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019785_002D1839(), actType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new ContribQuantizedAct(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribQuantizedBatchNorm : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double EpsDefault => 0.001;

			public static double MomentumDefault => 0.9;

			public static bool FixGammaDefault => true;

			public static bool UseGlobalStatsDefault => false;

			public static bool OutputMeanVarDefault => false;

			public static int AxisDefault => 1;

			public static bool CudnnOffDefault => false;

			public static FSharpOption<double> MinCalibRangeDefault => null;

			public static FSharpOption<double> MaxCalibRangeDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Gamma => operatorArguments.GetInput("gamma");

			public Symbol Beta => operatorArguments.GetInput("beta");

			public Symbol MovingMean => operatorArguments.GetInput("moving_mean");

			public Symbol MovingVar => operatorArguments.GetInput("moving_var");

			public Symbol MinData => operatorArguments.GetInput("min_data");

			public Symbol MaxData => operatorArguments.GetInput("max_data");

			public double Eps => operatorArguments.GetParameter("eps", EpsDefault);

			public double Momentum => operatorArguments.GetParameter("momentum", MomentumDefault);

			public bool FixGamma => operatorArguments.GetParameter("fix_gamma", FixGammaDefault);

			public bool UseGlobalStats => operatorArguments.GetParameter("use_global_stats", UseGlobalStatsDefault);

			public bool OutputMeanVar => operatorArguments.GetParameter("output_mean_var", OutputMeanVarDefault);

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			public bool CudnnOff => operatorArguments.GetParameter("cudnn_off", CudnnOffDefault);

			public FSharpOption<double> MinCalibRange => operatorArguments.GetParameter<FSharpOption<double>>("min_calib_range", MinCalibRangeDefault);

			public FSharpOption<double> MaxCalibRange => operatorArguments.GetParameter<FSharpOption<double>>("max_calib_range", MaxCalibRangeDefault);

			internal ContribQuantizedBatchNorm(Arguments<Symbol> operatorArguments)
				: base("_contrib_quantized_batch_norm", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribQuantizedBatchNorm CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedBatchNorm(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedBatchNorm(OperatorArguments.AddReplace(args));
			}

			public ContribQuantizedBatchNorm([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<Symbol> movingMean, [Optional] [OptionalArgument] FSharpOption<Symbol> movingVar, [Optional] [OptionalArgument] FSharpOption<Symbol> minData, [Optional] [OptionalArgument] FSharpOption<Symbol> maxData, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<bool> fixGamma, [Optional] [OptionalArgument] FSharpOption<bool> useGlobalStats, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<double> minCalibRange, [Optional] [OptionalArgument] FSharpOption<double> maxCalibRange)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol gamma2 = Operators.DefaultArg<Symbol>(gamma, (Symbol)new ImplicitVariable());
				Symbol beta2 = Operators.DefaultArg<Symbol>(beta, (Symbol)new ImplicitVariable());
				Symbol movingMean2 = Operators.DefaultArg<Symbol>(movingMean, (Symbol)new ImplicitVariable());
				Symbol movingVar2 = Operators.DefaultArg<Symbol>(movingVar, (Symbol)new ImplicitVariable());
				Symbol minData2 = Operators.DefaultArg<Symbol>(minData, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(maxData, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(gamma2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(beta2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("moving_mean", OpArg<Symbol>.NewInput(movingMean2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("moving_var", OpArg<Symbol>.NewInput(movingVar2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(minData2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019850_002D1840(), eps))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019851_002D1841(), momentum))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("fix_gamma", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004019852_002D1842(), fixGamma))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_global_stats", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004019853_002D1843(), useGlobalStats))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004019854_002D1844(), outputMeanVar))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004019855_002D1845(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004019856_002D1846(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_calib_range", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019857_002D1847(), minCalibRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_calib_range", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004019858_002D1848(), maxCalibRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))))));
			}

			public ContribQuantizedBatchNorm With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<Symbol> movingMean, [Optional] [OptionalArgument] FSharpOption<Symbol> movingVar, [Optional] [OptionalArgument] FSharpOption<Symbol> minData, [Optional] [OptionalArgument] FSharpOption<Symbol> maxData, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<double> momentum, [Optional] [OptionalArgument] FSharpOption<bool> fixGamma, [Optional] [OptionalArgument] FSharpOption<bool> useGlobalStats, [Optional] [OptionalArgument] FSharpOption<bool> outputMeanVar, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<double> minCalibRange, [Optional] [OptionalArgument] FSharpOption<double> maxCalibRange)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004019971_002D1849(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019955_002D1850(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019956_002D1851(), gamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019957_002D1852(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019958_002D1853(), movingMean), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019959_002D1854(), movingVar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019960_002D1855(), minData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019961_002D1856(), maxData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019962_002D1857(), eps), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019963_002D1858(), momentum), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019964_002D1859(), fixGamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019965_002D1860(), useGlobalStats), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019966_002D1861(), outputMeanVar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019967_002D1862(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019968_002D1863(), cudnnOff), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019969_002D1864(), minCalibRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004019970_002D1865(), maxCalibRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))))))));
				return new ContribQuantizedBatchNorm(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribQuantizedConcat : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int DimDefault => 1;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int Dim => operatorArguments.GetParameter("dim", DimDefault);

			internal ContribQuantizedConcat(Arguments<Symbol> operatorArguments)
				: base("_contrib_quantized_concat", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribQuantizedConcat CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedConcat(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedConcat(OperatorArguments.AddReplace(args));
			}

			public ContribQuantizedConcat([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> dim)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_004019994_002D25(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dim", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004019998_002D1866(), dim))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ContribQuantizedConcat With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> dim)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004020017_002D1867(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020015_002D1868(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020016_002D1869(), dim), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ContribQuantizedConcat(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribQuantizedConv : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] StrideDefault => new int[0];

			public static int[] DilateDefault => new int[0];

			public static int[] PadDefault => new int[0];

			public static int NumGroupDefault => 1;

			public static long WorkspaceDefault => 1024L;

			public static bool NoBiasDefault => false;

			public static FSharpOption<GeneratedArgumentTypes.CudnnTune> CudnnTuneDefault => null;

			public static bool CudnnOffDefault => false;

			public static FSharpOption<GeneratedArgumentTypes.ContribQuantizedConvLayout> LayoutDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Bias => operatorArguments.GetInput("bias");

			public Symbol MinData => operatorArguments.GetInput("min_data");

			public Symbol MaxData => operatorArguments.GetInput("max_data");

			public Symbol MinWeight => operatorArguments.GetInput("min_weight");

			public Symbol MaxWeight => operatorArguments.GetInput("max_weight");

			public Symbol MinBias => operatorArguments.GetInput("min_bias");

			public Symbol MaxBias => operatorArguments.GetInput("max_bias");

			public IEnumerable<int> Kernel
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("kernel");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter kernel is missing"));
				}
			}

			public int NumFilter
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_filter");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_filter is missing"));
				}
			}

			public int[] Stride => operatorArguments.GetParameter("stride", StrideDefault);

			public int[] Dilate => operatorArguments.GetParameter("dilate", DilateDefault);

			public int[] Pad => operatorArguments.GetParameter("pad", PadDefault);

			public int NumGroup => operatorArguments.GetParameter("num_group", NumGroupDefault);

			public long Workspace => operatorArguments.GetParameter("workspace", WorkspaceDefault);

			public bool NoBias => operatorArguments.GetParameter("no_bias", NoBiasDefault);

			public FSharpOption<GeneratedArgumentTypes.CudnnTune> CudnnTune => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.CudnnTune>>("cudnn_tune", CudnnTuneDefault);

			public bool CudnnOff => operatorArguments.GetParameter("cudnn_off", CudnnOffDefault);

			public FSharpOption<GeneratedArgumentTypes.ContribQuantizedConvLayout> Layout => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.ContribQuantizedConvLayout>>("layout", LayoutDefault);

			internal ContribQuantizedConv(Arguments<Symbol> operatorArguments)
				: base("_contrib_quantized_conv", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribQuantizedConv CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedConv(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedConv(OperatorArguments.AddReplace(args));
			}

			public ContribQuantizedConv(Symbol data, Symbol weight, Symbol bias, Symbol minData, Symbol maxData, Symbol minWeight, Symbol maxWeight, Symbol minBias, Symbol maxBias, IEnumerable<int> kernel, int numFilter, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.CudnnTune> cudnnTune, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribQuantizedConvLayout> layout)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(bias)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(minData)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(maxData)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_weight", OpArg<Symbol>.NewInput(minWeight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_weight", OpArg<Symbol>.NewInput(maxWeight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_bias", OpArg<Symbol>.NewInput(minBias)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_bias", OpArg<Symbol>.NewInput(maxBias)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004020088_002D1870(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004020089_002D1871(), dilate))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004020090_002D1872(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004020091_002D1873(), numGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_004020092_002D1874(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004020093_002D1875(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_tune", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.CudnnTune, object>((FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>)new operatorArguments_004020094_002D1876(), cudnnTune))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004020095_002D1877(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ContribQuantizedConvLayout, object>((FSharpFunc<GeneratedArgumentTypes.ContribQuantizedConvLayout, object>)new operatorArguments_004020096_002D1878(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))))))))))
			{
			}

			public ContribQuantizedConv(IEnumerable<int> kernel, int numFilter, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<Symbol> minData, [Optional] [OptionalArgument] FSharpOption<Symbol> maxData, [Optional] [OptionalArgument] FSharpOption<Symbol> minWeight, [Optional] [OptionalArgument] FSharpOption<Symbol> maxWeight, [Optional] [OptionalArgument] FSharpOption<Symbol> minBias, [Optional] [OptionalArgument] FSharpOption<Symbol> maxBias, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.CudnnTune> cudnnTune, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribQuantizedConvLayout> layout)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol bias2 = Operators.DefaultArg<Symbol>(bias, (Symbol)new ImplicitVariable());
				Symbol minData2 = Operators.DefaultArg<Symbol>(minData, (Symbol)new ImplicitVariable());
				Symbol maxData2 = Operators.DefaultArg<Symbol>(maxData, (Symbol)new ImplicitVariable());
				Symbol minWeight2 = Operators.DefaultArg<Symbol>(minWeight, (Symbol)new ImplicitVariable());
				Symbol maxWeight2 = Operators.DefaultArg<Symbol>(maxWeight, (Symbol)new ImplicitVariable());
				Symbol minBias2 = Operators.DefaultArg<Symbol>(minBias, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(maxBias, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(bias2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(minData2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(maxData2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_weight", OpArg<Symbol>.NewInput(minWeight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_weight", OpArg<Symbol>.NewInput(maxWeight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_bias", OpArg<Symbol>.NewInput(minBias2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_bias", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004020172_002D1879(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004020173_002D1880(), dilate))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004020174_002D1881(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004020175_002D1882(), numGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_004020176_002D1883(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004020177_002D1884(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_tune", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.CudnnTune, object>((FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>)new operatorArguments_004020178_002D1885(), cudnnTune))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004020179_002D1886(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ContribQuantizedConvLayout, object>((FSharpFunc<GeneratedArgumentTypes.ContribQuantizedConvLayout, object>)new operatorArguments_004020180_002D1887(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))))))))));
			}

			public ContribQuantizedConv With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<Symbol> minData, [Optional] [OptionalArgument] FSharpOption<Symbol> maxData, [Optional] [OptionalArgument] FSharpOption<Symbol> minWeight, [Optional] [OptionalArgument] FSharpOption<Symbol> maxWeight, [Optional] [OptionalArgument] FSharpOption<Symbol> minBias, [Optional] [OptionalArgument] FSharpOption<Symbol> maxBias, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> kernel, [Optional] [OptionalArgument] FSharpOption<int> numFilter, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.CudnnTune> cudnnTune, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribQuantizedConvLayout> layout)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004020316_002D1888(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020296_002D1889(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020297_002D1890(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020298_002D1891(), bias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020299_002D1892(), minData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020300_002D1893(), maxData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020301_002D1894(), minWeight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020302_002D1895(), maxWeight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020303_002D1896(), minBias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020304_002D1897(), maxBias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020305_002D1898(), kernel), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020306_002D1899(), numFilter), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020307_002D1900(), stride), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020308_002D1901(), dilate), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020309_002D1902(), pad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020310_002D1903(), numGroup), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020311_002D1904(), workspace), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020312_002D1905(), noBias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.CudnnTune, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.CudnnTune, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020313_002D1906(), cudnnTune), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020314_002D1907(), cudnnOff), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ContribQuantizedConvLayout, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ContribQuantizedConvLayout, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020315_002D1908(), layout), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))))))))))));
				return new ContribQuantizedConv(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribQuantizedElemwiseAdd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<double> MinCalibRangeDefault => null;

			public static FSharpOption<double> MaxCalibRangeDefault => null;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			public Symbol LhsMin => operatorArguments.GetInput("lhs_min");

			public Symbol LhsMax => operatorArguments.GetInput("lhs_max");

			public Symbol RhsMin => operatorArguments.GetInput("rhs_min");

			public Symbol RhsMax => operatorArguments.GetInput("rhs_max");

			public FSharpOption<double> MinCalibRange => operatorArguments.GetParameter<FSharpOption<double>>("min_calib_range", MinCalibRangeDefault);

			public FSharpOption<double> MaxCalibRange => operatorArguments.GetParameter<FSharpOption<double>>("max_calib_range", MaxCalibRangeDefault);

			internal ContribQuantizedElemwiseAdd(Arguments<Symbol> operatorArguments)
				: base("_contrib_quantized_elemwise_add", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribQuantizedElemwiseAdd CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedElemwiseAdd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedElemwiseAdd(OperatorArguments.AddReplace(args));
			}

			public ContribQuantizedElemwiseAdd([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<Symbol> lhsMin, [Optional] [OptionalArgument] FSharpOption<Symbol> lhsMax, [Optional] [OptionalArgument] FSharpOption<Symbol> rhsMin, [Optional] [OptionalArgument] FSharpOption<Symbol> rhsMax, [Optional] [OptionalArgument] FSharpOption<double> minCalibRange, [Optional] [OptionalArgument] FSharpOption<double> maxCalibRange)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol rhs2 = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				Symbol lhsMin2 = Operators.DefaultArg<Symbol>(lhsMin, (Symbol)new ImplicitVariable());
				Symbol lhsMax2 = Operators.DefaultArg<Symbol>(lhsMax, (Symbol)new ImplicitVariable());
				Symbol rhsMin2 = Operators.DefaultArg<Symbol>(rhsMin, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhsMax, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(rhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs_min", OpArg<Symbol>.NewInput(lhsMin2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs_max", OpArg<Symbol>.NewInput(lhsMax2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs_min", OpArg<Symbol>.NewInput(rhsMin2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs_max", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_calib_range", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004020363_002D1909(), minCalibRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_calib_range", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004020364_002D1910(), maxCalibRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))));
			}

			public ContribQuantizedElemwiseAdd With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<Symbol> lhsMin, [Optional] [OptionalArgument] FSharpOption<Symbol> lhsMax, [Optional] [OptionalArgument] FSharpOption<Symbol> rhsMin, [Optional] [OptionalArgument] FSharpOption<Symbol> rhsMax, [Optional] [OptionalArgument] FSharpOption<double> minCalibRange, [Optional] [OptionalArgument] FSharpOption<double> maxCalibRange)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004020416_002D1911(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020408_002D1912(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020409_002D1913(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020410_002D1914(), lhsMin), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020411_002D1915(), lhsMax), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020412_002D1916(), rhsMin), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020413_002D1917(), rhsMax), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020414_002D1918(), minCalibRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020415_002D1919(), maxCalibRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new ContribQuantizedElemwiseAdd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribQuantizedFlatten : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol MinData => operatorArguments.GetInput("min_data");

			public Symbol MaxData => operatorArguments.GetInput("max_data");

			internal ContribQuantizedFlatten(Arguments<Symbol> operatorArguments)
				: base("_contrib_quantized_flatten", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribQuantizedFlatten CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedFlatten(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedFlatten(OperatorArguments.AddReplace(args));
			}

			public ContribQuantizedFlatten([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> minData, [Optional] [OptionalArgument] FSharpOption<Symbol> maxData)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol minData2 = Operators.DefaultArg<Symbol>(minData, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(maxData, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(minData2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public ContribQuantizedFlatten With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> minData, [Optional] [OptionalArgument] FSharpOption<Symbol> maxData)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004020457_002D1920(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020454_002D1921(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020455_002D1922(), minData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020456_002D1923(), maxData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ContribQuantizedFlatten(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribQuantizedPooling : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] KernelDefault => new int[0];

			public static GeneratedArgumentTypes.PoolType PoolTypeDefault => GeneratedArgumentTypes.PoolType.Max;

			public static bool GlobalPoolDefault => false;

			public static bool CudnnOffDefault => false;

			public static GeneratedArgumentTypes.PoolingConvention PoolingConventionDefault => GeneratedArgumentTypes.PoolingConvention.Valid;

			public static int[] StrideDefault => new int[0];

			public static int[] PadDefault => new int[0];

			public static FSharpOption<int> PValueDefault => null;

			public static FSharpOption<bool> CountIncludePadDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.ContribQuantizedPoolingLayout> LayoutDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol MinData => operatorArguments.GetInput("min_data");

			public Symbol MaxData => operatorArguments.GetInput("max_data");

			public int[] Kernel => operatorArguments.GetParameter("kernel", KernelDefault);

			public GeneratedArgumentTypes.PoolType PoolType => operatorArguments.GetParameter("pool_type", PoolTypeDefault);

			public bool GlobalPool => operatorArguments.GetParameter("global_pool", GlobalPoolDefault);

			public bool CudnnOff => operatorArguments.GetParameter("cudnn_off", CudnnOffDefault);

			public GeneratedArgumentTypes.PoolingConvention PoolingConvention => operatorArguments.GetParameter("pooling_convention", PoolingConventionDefault);

			public int[] Stride => operatorArguments.GetParameter("stride", StrideDefault);

			public int[] Pad => operatorArguments.GetParameter("pad", PadDefault);

			public FSharpOption<int> PValue => operatorArguments.GetParameter<FSharpOption<int>>("p_value", PValueDefault);

			public FSharpOption<bool> CountIncludePad => operatorArguments.GetParameter<FSharpOption<bool>>("count_include_pad", CountIncludePadDefault);

			public FSharpOption<GeneratedArgumentTypes.ContribQuantizedPoolingLayout> Layout => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.ContribQuantizedPoolingLayout>>("layout", LayoutDefault);

			internal ContribQuantizedPooling(Arguments<Symbol> operatorArguments)
				: base("_contrib_quantized_pooling", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribQuantizedPooling CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedPooling(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedPooling(OperatorArguments.AddReplace(args));
			}

			public ContribQuantizedPooling([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> minData, [Optional] [OptionalArgument] FSharpOption<Symbol> maxData, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> kernel, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PoolType> poolType, [Optional] [OptionalArgument] FSharpOption<bool> globalPool, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PoolingConvention> poolingConvention, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> pValue, [Optional] [OptionalArgument] FSharpOption<bool> countIncludePad, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribQuantizedPoolingLayout> layout)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol minData2 = Operators.DefaultArg<Symbol>(minData, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(maxData, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(minData2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004020508_002D1924(), kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pool_type", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.PoolType, object>((FSharpFunc<GeneratedArgumentTypes.PoolType, object>)new operatorArguments_004020509_002D1925(), poolType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("global_pool", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004020510_002D1926(), globalPool))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004020511_002D1927(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pooling_convention", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.PoolingConvention, object>((FSharpFunc<GeneratedArgumentTypes.PoolingConvention, object>)new operatorArguments_004020512_002D1928(), poolingConvention))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004020513_002D1929(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004020514_002D1930(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("p_value", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004020515_002D1931(), pValue))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("count_include_pad", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004020516_002D1932(), countIncludePad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ContribQuantizedPoolingLayout, object>((FSharpFunc<GeneratedArgumentTypes.ContribQuantizedPoolingLayout, object>)new operatorArguments_004020517_002D1933(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))))));
			}

			public ContribQuantizedPooling With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> minData, [Optional] [OptionalArgument] FSharpOption<Symbol> maxData, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> kernel, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PoolType> poolType, [Optional] [OptionalArgument] FSharpOption<bool> globalPool, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PoolingConvention> poolingConvention, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> pValue, [Optional] [OptionalArgument] FSharpOption<bool> countIncludePad, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribQuantizedPoolingLayout> layout)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004020621_002D1934(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020608_002D1935(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020609_002D1936(), minData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020610_002D1937(), maxData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020611_002D1938(), kernel), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.PoolType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.PoolType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020612_002D1939(), poolType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020613_002D1940(), globalPool), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020614_002D1941(), cudnnOff), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.PoolingConvention, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.PoolingConvention, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020615_002D1942(), poolingConvention), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020616_002D1943(), stride), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020617_002D1944(), pad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020618_002D1945(), pValue), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020619_002D1946(), countIncludePad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ContribQuantizedPoolingLayout, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ContribQuantizedPoolingLayout, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020620_002D1947(), layout), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))))))));
				return new ContribQuantizedPooling(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribQuantize : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static GeneratedArgumentTypes.ContribQuantizeOutType OutTypeDefault => GeneratedArgumentTypes.ContribQuantizeOutType.Uint8;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol MinRange => operatorArguments.GetInput("min_range");

			public Symbol MaxRange => operatorArguments.GetInput("max_range");

			public GeneratedArgumentTypes.ContribQuantizeOutType OutType => operatorArguments.GetParameter("out_type", OutTypeDefault);

			internal ContribQuantize(Arguments<Symbol> operatorArguments)
				: base("_contrib_quantize", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribQuantize CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribQuantize(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribQuantize(OperatorArguments.AddReplace(args));
			}

			public ContribQuantize([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> minRange, [Optional] [OptionalArgument] FSharpOption<Symbol> maxRange, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribQuantizeOutType> outType)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol minRange2 = Operators.DefaultArg<Symbol>(minRange, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(maxRange, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_range", OpArg<Symbol>.NewInput(minRange2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_range", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("out_type", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ContribQuantizeOutType, object>((FSharpFunc<GeneratedArgumentTypes.ContribQuantizeOutType, object>)new operatorArguments_004020669_002D1948(), outType))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public ContribQuantize With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> minRange, [Optional] [OptionalArgument] FSharpOption<Symbol> maxRange, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribQuantizeOutType> outType)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004020698_002D1949(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020694_002D1950(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020695_002D1951(), minRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020696_002D1952(), maxRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ContribQuantizeOutType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ContribQuantizeOutType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020697_002D1953(), outType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new ContribQuantize(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribQuantizeV2 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static GeneratedArgumentTypes.ContribQuantizeV2OutType OutTypeDefault => GeneratedArgumentTypes.ContribQuantizeV2OutType.Int8;

			public static FSharpOption<double> MinCalibRangeDefault => null;

			public static FSharpOption<double> MaxCalibRangeDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public GeneratedArgumentTypes.ContribQuantizeV2OutType OutType => operatorArguments.GetParameter("out_type", OutTypeDefault);

			public FSharpOption<double> MinCalibRange => operatorArguments.GetParameter<FSharpOption<double>>("min_calib_range", MinCalibRangeDefault);

			public FSharpOption<double> MaxCalibRange => operatorArguments.GetParameter<FSharpOption<double>>("max_calib_range", MaxCalibRangeDefault);

			internal ContribQuantizeV2(Arguments<Symbol> operatorArguments)
				: base("_contrib_quantize_v2", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribQuantizeV2 CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizeV2(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizeV2(OperatorArguments.AddReplace(args));
			}

			public ContribQuantizeV2([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribQuantizeV2OutType> outType, [Optional] [OptionalArgument] FSharpOption<double> minCalibRange, [Optional] [OptionalArgument] FSharpOption<double> maxCalibRange)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("out_type", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ContribQuantizeV2OutType, object>((FSharpFunc<GeneratedArgumentTypes.ContribQuantizeV2OutType, object>)new operatorArguments_004020745_002D1954(), outType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_calib_range", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004020746_002D1955(), minCalibRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_calib_range", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004020747_002D1956(), maxCalibRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public ContribQuantizeV2 With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribQuantizeV2OutType> outType, [Optional] [OptionalArgument] FSharpOption<double> minCalibRange, [Optional] [OptionalArgument] FSharpOption<double> maxCalibRange)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004020782_002D1957(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020778_002D1958(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ContribQuantizeV2OutType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ContribQuantizeV2OutType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020779_002D1959(), outType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020780_002D1960(), minCalibRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020781_002D1961(), maxCalibRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new ContribQuantizeV2(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Flatten : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Flatten(Arguments<Symbol> operatorArguments)
				: base("Flatten", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Flatten CreateFromArguments(Arguments<Symbol> args)
			{
				return new Flatten(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Flatten(OperatorArguments.AddReplace(args));
			}

			public Flatten([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Flatten With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004020826_002D1962(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020825_002D1963(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Flatten(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribQuantizedFullyConnected : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool NoBiasDefault => false;

			public static bool FlattenDefault => true;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Bias => operatorArguments.GetInput("bias");

			public Symbol MinData => operatorArguments.GetInput("min_data");

			public Symbol MaxData => operatorArguments.GetInput("max_data");

			public Symbol MinWeight => operatorArguments.GetInput("min_weight");

			public Symbol MaxWeight => operatorArguments.GetInput("max_weight");

			public Symbol MinBias => operatorArguments.GetInput("min_bias");

			public Symbol MaxBias => operatorArguments.GetInput("max_bias");

			public int NumHidden
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_hidden");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_hidden is missing"));
				}
			}

			public bool NoBias => operatorArguments.GetParameter("no_bias", NoBiasDefault);

			public bool Flatten => operatorArguments.GetParameter("flatten", FlattenDefault);

			internal ContribQuantizedFullyConnected(Arguments<Symbol> operatorArguments)
				: base("_contrib_quantized_fully_connected", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribQuantizedFullyConnected CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedFullyConnected(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribQuantizedFullyConnected(OperatorArguments.AddReplace(args));
			}

			public ContribQuantizedFullyConnected(Symbol data, Symbol weight, Symbol bias, Symbol minData, Symbol maxData, Symbol minWeight, Symbol maxWeight, Symbol minBias, Symbol maxBias, int numHidden, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<bool> flatten)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(bias)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(minData)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(maxData)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_weight", OpArg<Symbol>.NewInput(minWeight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_weight", OpArg<Symbol>.NewInput(maxWeight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_bias", OpArg<Symbol>.NewInput(minBias)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_bias", OpArg<Symbol>.NewInput(maxBias)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_hidden", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numHidden))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004020879_002D1964(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("flatten", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004020880_002D1965(), flatten))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))
			{
			}

			public ContribQuantizedFullyConnected(int numHidden, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<Symbol> minData, [Optional] [OptionalArgument] FSharpOption<Symbol> maxData, [Optional] [OptionalArgument] FSharpOption<Symbol> minWeight, [Optional] [OptionalArgument] FSharpOption<Symbol> maxWeight, [Optional] [OptionalArgument] FSharpOption<Symbol> minBias, [Optional] [OptionalArgument] FSharpOption<Symbol> maxBias, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<bool> flatten)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol bias2 = Operators.DefaultArg<Symbol>(bias, (Symbol)new ImplicitVariable());
				Symbol minData2 = Operators.DefaultArg<Symbol>(minData, (Symbol)new ImplicitVariable());
				Symbol maxData2 = Operators.DefaultArg<Symbol>(maxData, (Symbol)new ImplicitVariable());
				Symbol minWeight2 = Operators.DefaultArg<Symbol>(minWeight, (Symbol)new ImplicitVariable());
				Symbol maxWeight2 = Operators.DefaultArg<Symbol>(maxWeight, (Symbol)new ImplicitVariable());
				Symbol minBias2 = Operators.DefaultArg<Symbol>(minBias, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(maxBias, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(bias2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(minData2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(maxData2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_weight", OpArg<Symbol>.NewInput(minWeight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_weight", OpArg<Symbol>.NewInput(maxWeight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_bias", OpArg<Symbol>.NewInput(minBias2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_bias", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_hidden", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numHidden))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004020938_002D1966(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("flatten", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004020939_002D1967(), flatten))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))));
			}

			public ContribQuantizedFullyConnected With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<Symbol> minData, [Optional] [OptionalArgument] FSharpOption<Symbol> maxData, [Optional] [OptionalArgument] FSharpOption<Symbol> minWeight, [Optional] [OptionalArgument] FSharpOption<Symbol> maxWeight, [Optional] [OptionalArgument] FSharpOption<Symbol> minBias, [Optional] [OptionalArgument] FSharpOption<Symbol> maxBias, [Optional] [OptionalArgument] FSharpOption<int> numHidden, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<bool> flatten)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021011_002D1968(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004020999_002D1969(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021000_002D1970(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021001_002D1971(), bias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021002_002D1972(), minData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021003_002D1973(), maxData), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021004_002D1974(), minWeight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021005_002D1975(), maxWeight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021006_002D1976(), minBias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021007_002D1977(), maxBias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021008_002D1978(), numHidden), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021009_002D1979(), noBias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021010_002D1980(), flatten), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))));
				return new ContribQuantizedFullyConnected(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribRequantize : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static GeneratedArgumentTypes.ContribRequantizeOutType OutTypeDefault => GeneratedArgumentTypes.ContribRequantizeOutType.Int8;

			public static FSharpOption<double> MinCalibRangeDefault => null;

			public static FSharpOption<double> MaxCalibRangeDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol MinRange => operatorArguments.GetInput("min_range");

			public Symbol MaxRange => operatorArguments.GetInput("max_range");

			public GeneratedArgumentTypes.ContribRequantizeOutType OutType => operatorArguments.GetParameter("out_type", OutTypeDefault);

			public FSharpOption<double> MinCalibRange => operatorArguments.GetParameter<FSharpOption<double>>("min_calib_range", MinCalibRangeDefault);

			public FSharpOption<double> MaxCalibRange => operatorArguments.GetParameter<FSharpOption<double>>("max_calib_range", MaxCalibRangeDefault);

			internal ContribRequantize(Arguments<Symbol> operatorArguments)
				: base("_contrib_requantize", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribRequantize CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribRequantize(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribRequantize(OperatorArguments.AddReplace(args));
			}

			public ContribRequantize([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> minRange, [Optional] [OptionalArgument] FSharpOption<Symbol> maxRange, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribRequantizeOutType> outType, [Optional] [OptionalArgument] FSharpOption<double> minCalibRange, [Optional] [OptionalArgument] FSharpOption<double> maxCalibRange)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol minRange2 = Operators.DefaultArg<Symbol>(minRange, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(maxRange, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_range", OpArg<Symbol>.NewInput(minRange2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_range", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("out_type", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ContribRequantizeOutType, object>((FSharpFunc<GeneratedArgumentTypes.ContribRequantizeOutType, object>)new operatorArguments_004021048_002D1981(), outType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("min_calib_range", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004021049_002D1982(), minCalibRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_calib_range", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004021050_002D1983(), maxCalibRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public ContribRequantize With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> minRange, [Optional] [OptionalArgument] FSharpOption<Symbol> maxRange, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribRequantizeOutType> outType, [Optional] [OptionalArgument] FSharpOption<double> minCalibRange, [Optional] [OptionalArgument] FSharpOption<double> maxCalibRange)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021095_002D1984(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021089_002D1985(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021090_002D1986(), minRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021091_002D1987(), maxRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ContribRequantizeOutType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ContribRequantizeOutType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021092_002D1988(), outType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021093_002D1989(), minCalibRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021094_002D1990(), maxCalibRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new ContribRequantize(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SampleUniform : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public Symbol Low => operatorArguments.GetInput("low");

			public Symbol High => operatorArguments.GetInput("high");

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal SampleUniform(Arguments<Symbol> operatorArguments)
				: base("_sample_uniform", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SampleUniform CreateFromArguments(Arguments<Symbol> args)
			{
				return new SampleUniform(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SampleUniform(OperatorArguments.AddReplace(args));
			}

			public SampleUniform([Optional] [OptionalArgument] FSharpOption<Symbol> low, [Optional] [OptionalArgument] FSharpOption<Symbol> high, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				Symbol low2 = Operators.DefaultArg<Symbol>(low, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(high, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewInput(low2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004021144_002D1991(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004021145_002D1992(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public SampleUniform With([Optional] [OptionalArgument] FSharpOption<Symbol> low, [Optional] [OptionalArgument] FSharpOption<Symbol> high, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021177_002D1993(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021173_002D1994(), low), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021174_002D1995(), high), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021175_002D1996(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021176_002D1997(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new SampleUniform(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SampleNormal : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public Symbol Mu => operatorArguments.GetInput("mu");

			public Symbol Sigma => operatorArguments.GetInput("sigma");

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal SampleNormal(Arguments<Symbol> operatorArguments)
				: base("_sample_normal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SampleNormal CreateFromArguments(Arguments<Symbol> args)
			{
				return new SampleNormal(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SampleNormal(OperatorArguments.AddReplace(args));
			}

			public SampleNormal([Optional] [OptionalArgument] FSharpOption<Symbol> mu, [Optional] [OptionalArgument] FSharpOption<Symbol> sigma, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				Symbol mu2 = Operators.DefaultArg<Symbol>(mu, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(sigma, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mu", OpArg<Symbol>.NewInput(mu2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sigma", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004021226_002D1998(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004021227_002D1999(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public SampleNormal With([Optional] [OptionalArgument] FSharpOption<Symbol> mu, [Optional] [OptionalArgument] FSharpOption<Symbol> sigma, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021259_002D2000(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021255_002D2001(), mu), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021256_002D2002(), sigma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021257_002D2003(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021258_002D2004(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new SampleNormal(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SampleGamma : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public Symbol Alpha => operatorArguments.GetInput("alpha");

			public Symbol Beta => operatorArguments.GetInput("beta");

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal SampleGamma(Arguments<Symbol> operatorArguments)
				: base("_sample_gamma", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SampleGamma CreateFromArguments(Arguments<Symbol> args)
			{
				return new SampleGamma(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SampleGamma(OperatorArguments.AddReplace(args));
			}

			public SampleGamma([Optional] [OptionalArgument] FSharpOption<Symbol> alpha, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				Symbol alpha2 = Operators.DefaultArg<Symbol>(alpha, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(beta, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewInput(alpha2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004021308_002D2005(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004021309_002D2006(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public SampleGamma With([Optional] [OptionalArgument] FSharpOption<Symbol> alpha, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021341_002D2007(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021337_002D2008(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021338_002D2009(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021339_002D2010(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021340_002D2011(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new SampleGamma(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SampleExponential : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public Symbol Lam => operatorArguments.GetInput("lam");

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal SampleExponential(Arguments<Symbol> operatorArguments)
				: base("_sample_exponential", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SampleExponential CreateFromArguments(Arguments<Symbol> args)
			{
				return new SampleExponential(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SampleExponential(OperatorArguments.AddReplace(args));
			}

			public SampleExponential([Optional] [OptionalArgument] FSharpOption<Symbol> lam, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(lam, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004021385_002D2012(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004021386_002D2013(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public SampleExponential With([Optional] [OptionalArgument] FSharpOption<Symbol> lam, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021413_002D2014(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021410_002D2015(), lam), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021411_002D2016(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021412_002D2017(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new SampleExponential(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SamplePoisson : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public Symbol Lam => operatorArguments.GetInput("lam");

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal SamplePoisson(Arguments<Symbol> operatorArguments)
				: base("_sample_poisson", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SamplePoisson CreateFromArguments(Arguments<Symbol> args)
			{
				return new SamplePoisson(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SamplePoisson(OperatorArguments.AddReplace(args));
			}

			public SamplePoisson([Optional] [OptionalArgument] FSharpOption<Symbol> lam, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(lam, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004021459_002D2018(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004021460_002D2019(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public SamplePoisson With([Optional] [OptionalArgument] FSharpOption<Symbol> lam, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021487_002D2020(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021484_002D2021(), lam), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021485_002D2022(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021486_002D2023(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new SamplePoisson(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SampleNegativeBinomial : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public Symbol K => operatorArguments.GetInput("k");

			public Symbol P => operatorArguments.GetInput("p");

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal SampleNegativeBinomial(Arguments<Symbol> operatorArguments)
				: base("_sample_negative_binomial", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SampleNegativeBinomial CreateFromArguments(Arguments<Symbol> args)
			{
				return new SampleNegativeBinomial(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SampleNegativeBinomial(OperatorArguments.AddReplace(args));
			}

			public SampleNegativeBinomial([Optional] [OptionalArgument] FSharpOption<Symbol> k, [Optional] [OptionalArgument] FSharpOption<Symbol> p, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				Symbol i = Operators.DefaultArg<Symbol>(k, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(p, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewInput(i)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004021538_002D2024(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004021539_002D2025(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public SampleNegativeBinomial With([Optional] [OptionalArgument] FSharpOption<Symbol> k, [Optional] [OptionalArgument] FSharpOption<Symbol> p, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021571_002D2026(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021567_002D2027(), k), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021568_002D2028(), p), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021569_002D2029(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021570_002D2030(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new SampleNegativeBinomial(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SampleGeneralizedNegativeBinomial : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public Symbol Mu => operatorArguments.GetInput("mu");

			public Symbol Alpha => operatorArguments.GetInput("alpha");

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal SampleGeneralizedNegativeBinomial(Arguments<Symbol> operatorArguments)
				: base("_sample_generalized_negative_binomial", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SampleGeneralizedNegativeBinomial CreateFromArguments(Arguments<Symbol> args)
			{
				return new SampleGeneralizedNegativeBinomial(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SampleGeneralizedNegativeBinomial(OperatorArguments.AddReplace(args));
			}

			public SampleGeneralizedNegativeBinomial([Optional] [OptionalArgument] FSharpOption<Symbol> mu, [Optional] [OptionalArgument] FSharpOption<Symbol> alpha, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				Symbol mu2 = Operators.DefaultArg<Symbol>(mu, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(alpha, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mu", OpArg<Symbol>.NewInput(mu2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004021622_002D2031(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004021623_002D2032(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public SampleGeneralizedNegativeBinomial With([Optional] [OptionalArgument] FSharpOption<Symbol> mu, [Optional] [OptionalArgument] FSharpOption<Symbol> alpha, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021655_002D2033(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021651_002D2034(), mu), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021652_002D2035(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021653_002D2036(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021654_002D2037(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new SampleGeneralizedNegativeBinomial(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomPdfUniform : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool IsLogDefault => false;

			public Symbol Sample => operatorArguments.GetInput("sample");

			public Symbol Low => operatorArguments.GetInput("low");

			public Symbol High => operatorArguments.GetInput("high");

			public bool IsLog => operatorArguments.GetParameter("is_log", IsLogDefault);

			internal RandomPdfUniform(Arguments<Symbol> operatorArguments)
				: base("_random_pdf_uniform", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomPdfUniform CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomPdfUniform(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomPdfUniform(OperatorArguments.AddReplace(args));
			}

			public RandomPdfUniform([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> low, [Optional] [OptionalArgument] FSharpOption<Symbol> high, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				Symbol sample2 = Operators.DefaultArg<Symbol>(sample, (Symbol)new ImplicitVariable());
				Symbol low2 = Operators.DefaultArg<Symbol>(low, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(high, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(sample2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewInput(low2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004021709_002D2038(), isLog))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public RandomPdfUniform With([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> low, [Optional] [OptionalArgument] FSharpOption<Symbol> high, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021738_002D2039(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021734_002D2040(), sample), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021735_002D2041(), low), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021736_002D2042(), high), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021737_002D2043(), isLog), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new RandomPdfUniform(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomPdfNormal : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool IsLogDefault => false;

			public Symbol Sample => operatorArguments.GetInput("sample");

			public Symbol Mu => operatorArguments.GetInput("mu");

			public Symbol Sigma => operatorArguments.GetInput("sigma");

			public bool IsLog => operatorArguments.GetParameter("is_log", IsLogDefault);

			internal RandomPdfNormal(Arguments<Symbol> operatorArguments)
				: base("_random_pdf_normal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomPdfNormal CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomPdfNormal(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomPdfNormal(OperatorArguments.AddReplace(args));
			}

			public RandomPdfNormal([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> mu, [Optional] [OptionalArgument] FSharpOption<Symbol> sigma, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				Symbol sample2 = Operators.DefaultArg<Symbol>(sample, (Symbol)new ImplicitVariable());
				Symbol mu2 = Operators.DefaultArg<Symbol>(mu, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(sigma, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(sample2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mu", OpArg<Symbol>.NewInput(mu2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sigma", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004021783_002D2044(), isLog))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public RandomPdfNormal With([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> mu, [Optional] [OptionalArgument] FSharpOption<Symbol> sigma, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021812_002D2045(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021808_002D2046(), sample), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021809_002D2047(), mu), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021810_002D2048(), sigma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021811_002D2049(), isLog), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new RandomPdfNormal(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomPdfGamma : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool IsLogDefault => false;

			public Symbol Sample => operatorArguments.GetInput("sample");

			public Symbol Alpha => operatorArguments.GetInput("alpha");

			public Symbol Beta => operatorArguments.GetInput("beta");

			public bool IsLog => operatorArguments.GetParameter("is_log", IsLogDefault);

			internal RandomPdfGamma(Arguments<Symbol> operatorArguments)
				: base("_random_pdf_gamma", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomPdfGamma CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomPdfGamma(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomPdfGamma(OperatorArguments.AddReplace(args));
			}

			public RandomPdfGamma([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> alpha, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				Symbol sample2 = Operators.DefaultArg<Symbol>(sample, (Symbol)new ImplicitVariable());
				Symbol alpha2 = Operators.DefaultArg<Symbol>(alpha, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(beta, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(sample2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewInput(alpha2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004021861_002D2050(), isLog))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public RandomPdfGamma With([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> alpha, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021890_002D2051(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021886_002D2052(), sample), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021887_002D2053(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021888_002D2054(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021889_002D2055(), isLog), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new RandomPdfGamma(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomPdfExponential : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool IsLogDefault => false;

			public Symbol Sample => operatorArguments.GetInput("sample");

			public Symbol Lam => operatorArguments.GetInput("lam");

			public bool IsLog => operatorArguments.GetParameter("is_log", IsLogDefault);

			internal RandomPdfExponential(Arguments<Symbol> operatorArguments)
				: base("_random_pdf_exponential", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomPdfExponential CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomPdfExponential(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomPdfExponential(OperatorArguments.AddReplace(args));
			}

			public RandomPdfExponential([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> lam, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				Symbol sample2 = Operators.DefaultArg<Symbol>(sample, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(lam, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(sample2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004021935_002D2056(), isLog))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public RandomPdfExponential With([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> lam, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004021959_002D2057(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021956_002D2058(), sample), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021957_002D2059(), lam), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004021958_002D2060(), isLog), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new RandomPdfExponential(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomPdfPoisson : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool IsLogDefault => false;

			public Symbol Sample => operatorArguments.GetInput("sample");

			public Symbol Lam => operatorArguments.GetInput("lam");

			public bool IsLog => operatorArguments.GetParameter("is_log", IsLogDefault);

			internal RandomPdfPoisson(Arguments<Symbol> operatorArguments)
				: base("_random_pdf_poisson", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomPdfPoisson CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomPdfPoisson(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomPdfPoisson(OperatorArguments.AddReplace(args));
			}

			public RandomPdfPoisson([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> lam, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				Symbol sample2 = Operators.DefaultArg<Symbol>(sample, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(lam, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(sample2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004022004_002D2061(), isLog))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public RandomPdfPoisson With([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> lam, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022028_002D2062(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022025_002D2063(), sample), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022026_002D2064(), lam), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022027_002D2065(), isLog), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new RandomPdfPoisson(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomPdfNegativeBinomial : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool IsLogDefault => false;

			public Symbol Sample => operatorArguments.GetInput("sample");

			public Symbol K => operatorArguments.GetInput("k");

			public Symbol P => operatorArguments.GetInput("p");

			public bool IsLog => operatorArguments.GetParameter("is_log", IsLogDefault);

			internal RandomPdfNegativeBinomial(Arguments<Symbol> operatorArguments)
				: base("_random_pdf_negative_binomial", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomPdfNegativeBinomial CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomPdfNegativeBinomial(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomPdfNegativeBinomial(OperatorArguments.AddReplace(args));
			}

			public RandomPdfNegativeBinomial([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> k, [Optional] [OptionalArgument] FSharpOption<Symbol> p, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				Symbol sample2 = Operators.DefaultArg<Symbol>(sample, (Symbol)new ImplicitVariable());
				Symbol i = Operators.DefaultArg<Symbol>(k, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(p, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(sample2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewInput(i)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004022075_002D2066(), isLog))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public RandomPdfNegativeBinomial With([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> k, [Optional] [OptionalArgument] FSharpOption<Symbol> p, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022104_002D2067(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022100_002D2068(), sample), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022101_002D2069(), k), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022102_002D2070(), p), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022103_002D2071(), isLog), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new RandomPdfNegativeBinomial(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomPdfGeneralizedNegativeBinomial : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool IsLogDefault => false;

			public Symbol Sample => operatorArguments.GetInput("sample");

			public Symbol Mu => operatorArguments.GetInput("mu");

			public Symbol Alpha => operatorArguments.GetInput("alpha");

			public bool IsLog => operatorArguments.GetParameter("is_log", IsLogDefault);

			internal RandomPdfGeneralizedNegativeBinomial(Arguments<Symbol> operatorArguments)
				: base("_random_pdf_generalized_negative_binomial", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomPdfGeneralizedNegativeBinomial CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomPdfGeneralizedNegativeBinomial(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomPdfGeneralizedNegativeBinomial(OperatorArguments.AddReplace(args));
			}

			public RandomPdfGeneralizedNegativeBinomial([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> mu, [Optional] [OptionalArgument] FSharpOption<Symbol> alpha, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				Symbol sample2 = Operators.DefaultArg<Symbol>(sample, (Symbol)new ImplicitVariable());
				Symbol mu2 = Operators.DefaultArg<Symbol>(mu, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(alpha, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(sample2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mu", OpArg<Symbol>.NewInput(mu2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004022152_002D2072(), isLog))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public RandomPdfGeneralizedNegativeBinomial With([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> mu, [Optional] [OptionalArgument] FSharpOption<Symbol> alpha, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022181_002D2073(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022177_002D2074(), sample), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022178_002D2075(), mu), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022179_002D2076(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022180_002D2077(), isLog), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new RandomPdfGeneralizedNegativeBinomial(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomPdfDirichlet : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool IsLogDefault => false;

			public Symbol Sample => operatorArguments.GetInput("sample");

			public Symbol Alpha => operatorArguments.GetInput("alpha");

			public bool IsLog => operatorArguments.GetParameter("is_log", IsLogDefault);

			internal RandomPdfDirichlet(Arguments<Symbol> operatorArguments)
				: base("_random_pdf_dirichlet", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomPdfDirichlet CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomPdfDirichlet(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomPdfDirichlet(OperatorArguments.AddReplace(args));
			}

			public RandomPdfDirichlet([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> alpha, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				Symbol sample2 = Operators.DefaultArg<Symbol>(sample, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(alpha, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(sample2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004022224_002D2078(), isLog))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public RandomPdfDirichlet With([Optional] [OptionalArgument] FSharpOption<Symbol> sample, [Optional] [OptionalArgument] FSharpOption<Symbol> alpha, [Optional] [OptionalArgument] FSharpOption<bool> isLog)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022248_002D2079(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022245_002D2080(), sample), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022246_002D2081(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022247_002D2082(), isLog), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new RandomPdfDirichlet(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SampleMultinomial : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static bool GetProbDefault => false;

			public static GeneratedArgumentTypes.SampleMultinomialDtype DtypeDefault => GeneratedArgumentTypes.SampleMultinomialDtype.Int32;

			public Symbol Data => operatorArguments.GetInput("data");

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public bool GetProb => operatorArguments.GetParameter("get_prob", GetProbDefault);

			public GeneratedArgumentTypes.SampleMultinomialDtype Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal SampleMultinomial(Arguments<Symbol> operatorArguments)
				: base("_sample_multinomial", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SampleMultinomial CreateFromArguments(Arguments<Symbol> args)
			{
				return new SampleMultinomial(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SampleMultinomial(OperatorArguments.AddReplace(args));
			}

			public SampleMultinomial([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<bool> getProb, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.SampleMultinomialDtype> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004022296_002D2083(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("get_prob", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004022297_002D2084(), getProb))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.SampleMultinomialDtype, object>((FSharpFunc<GeneratedArgumentTypes.SampleMultinomialDtype, object>)new operatorArguments_004022298_002D2085(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public SampleMultinomial With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<bool> getProb, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.SampleMultinomialDtype> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022333_002D2086(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022329_002D2087(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022330_002D2088(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022331_002D2089(), getProb), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.SampleMultinomialDtype, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.SampleMultinomialDtype, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022332_002D2090(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new SampleMultinomial(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomUniform : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double LowDefault => 0.0;

			public static double HighDefault => 1.0;

			public static FSharpOption<int[]> ShapeDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public double Low => operatorArguments.GetParameter("low", LowDefault);

			public double High => operatorArguments.GetParameter("high", HighDefault);

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal RandomUniform(Arguments<Symbol> operatorArguments)
				: base("_random_uniform", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomUniform CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomUniform(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomUniform(OperatorArguments.AddReplace(args));
			}

			public RandomUniform([Optional] [OptionalArgument] FSharpOption<double> low, [Optional] [OptionalArgument] FSharpOption<double> high, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022365_002D2091(), low))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022366_002D2092(), high))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004022367_002D2093(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004022368_002D2094(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public RandomUniform With([Optional] [OptionalArgument] FSharpOption<double> low, [Optional] [OptionalArgument] FSharpOption<double> high, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022406_002D2095(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022402_002D2096(), low), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022403_002D2097(), high), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022404_002D2098(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022405_002D2099(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new RandomUniform(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomNormal : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double LocDefault => 0.0;

			public static double ScaleDefault => 1.0;

			public static FSharpOption<int[]> ShapeDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public double Loc => operatorArguments.GetParameter("loc", LocDefault);

			public double Scale => operatorArguments.GetParameter("scale", ScaleDefault);

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal RandomNormal(Arguments<Symbol> operatorArguments)
				: base("_random_normal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomNormal CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomNormal(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomNormal(OperatorArguments.AddReplace(args));
			}

			public RandomNormal([Optional] [OptionalArgument] FSharpOption<double> loc, [Optional] [OptionalArgument] FSharpOption<double> scale, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("loc", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022437_002D2100(), loc))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scale", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022438_002D2101(), scale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004022439_002D2102(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004022440_002D2103(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public RandomNormal With([Optional] [OptionalArgument] FSharpOption<double> loc, [Optional] [OptionalArgument] FSharpOption<double> scale, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022478_002D2104(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022474_002D2105(), loc), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022475_002D2106(), scale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022476_002D2107(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022477_002D2108(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new RandomNormal(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomGamma : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double AlphaDefault => 1.0;

			public static double BetaDefault => 1.0;

			public static FSharpOption<int[]> ShapeDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public double Alpha => operatorArguments.GetParameter("alpha", AlphaDefault);

			public double Beta => operatorArguments.GetParameter("beta", BetaDefault);

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal RandomGamma(Arguments<Symbol> operatorArguments)
				: base("_random_gamma", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomGamma CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomGamma(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomGamma(OperatorArguments.AddReplace(args));
			}

			public RandomGamma([Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<double> beta, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022506_002D2109(), alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022507_002D2110(), beta))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004022508_002D2111(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004022509_002D2112(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public RandomGamma With([Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<double> beta, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022547_002D2113(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022543_002D2114(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022544_002D2115(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022545_002D2116(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022546_002D2117(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new RandomGamma(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomExponential : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double LamDefault => 1.0;

			public static FSharpOption<int[]> ShapeDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public double Lam => operatorArguments.GetParameter("lam", LamDefault);

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal RandomExponential(Arguments<Symbol> operatorArguments)
				: base("_random_exponential", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomExponential CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomExponential(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomExponential(OperatorArguments.AddReplace(args));
			}

			public RandomExponential([Optional] [OptionalArgument] FSharpOption<double> lam, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022573_002D2118(), lam))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004022574_002D2119(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004022575_002D2120(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public RandomExponential With([Optional] [OptionalArgument] FSharpOption<double> lam, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022605_002D2121(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022602_002D2122(), lam), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022603_002D2123(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022604_002D2124(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new RandomExponential(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomPoisson : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double LamDefault => 1.0;

			public static FSharpOption<int[]> ShapeDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public double Lam => operatorArguments.GetParameter("lam", LamDefault);

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal RandomPoisson(Arguments<Symbol> operatorArguments)
				: base("_random_poisson", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomPoisson CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomPoisson(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomPoisson(OperatorArguments.AddReplace(args));
			}

			public RandomPoisson([Optional] [OptionalArgument] FSharpOption<double> lam, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022632_002D2125(), lam))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004022633_002D2126(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004022634_002D2127(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public RandomPoisson With([Optional] [OptionalArgument] FSharpOption<double> lam, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022664_002D2128(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022661_002D2129(), lam), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022662_002D2130(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022663_002D2131(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new RandomPoisson(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomNegativeBinomial : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int KDefault => 1;

			public static double PDefault => 1.0;

			public static FSharpOption<int[]> ShapeDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public int K => operatorArguments.GetParameter("k", KDefault);

			public double P => operatorArguments.GetParameter("p", PDefault);

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal RandomNegativeBinomial(Arguments<Symbol> operatorArguments)
				: base("_random_negative_binomial", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomNegativeBinomial CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomNegativeBinomial(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomNegativeBinomial(OperatorArguments.AddReplace(args));
			}

			public RandomNegativeBinomial([Optional] [OptionalArgument] FSharpOption<int> k, [Optional] [OptionalArgument] FSharpOption<double> p, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004022694_002D2132(), k))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022695_002D2133(), p))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004022696_002D2134(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004022697_002D2135(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public RandomNegativeBinomial With([Optional] [OptionalArgument] FSharpOption<int> k, [Optional] [OptionalArgument] FSharpOption<double> p, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022735_002D2136(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022731_002D2137(), k), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022732_002D2138(), p), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022733_002D2139(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022734_002D2140(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new RandomNegativeBinomial(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomGeneralizedNegativeBinomial : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double MuDefault => 1.0;

			public static double AlphaDefault => 1.0;

			public static FSharpOption<int[]> ShapeDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.FloatDType> DtypeDefault => null;

			public double Mu => operatorArguments.GetParameter("mu", MuDefault);

			public double Alpha => operatorArguments.GetParameter("alpha", AlphaDefault);

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.FloatDType> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.FloatDType>>("dtype", DtypeDefault);

			internal RandomGeneralizedNegativeBinomial(Arguments<Symbol> operatorArguments)
				: base("_random_generalized_negative_binomial", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomGeneralizedNegativeBinomial CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomGeneralizedNegativeBinomial(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomGeneralizedNegativeBinomial(OperatorArguments.AddReplace(args));
			}

			public RandomGeneralizedNegativeBinomial([Optional] [OptionalArgument] FSharpOption<double> mu, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mu", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022766_002D2141(), mu))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022767_002D2142(), alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004022768_002D2143(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.FloatDType, object>((FSharpFunc<GeneratedArgumentTypes.FloatDType, object>)new operatorArguments_004022769_002D2144(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public RandomGeneralizedNegativeBinomial With([Optional] [OptionalArgument] FSharpOption<double> mu, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.FloatDType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022807_002D2145(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022803_002D2146(), mu), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022804_002D2147(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022805_002D2148(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022806_002D2149(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new RandomGeneralizedNegativeBinomial(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomRandint : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> ShapeDefault => null;

			public static FSharpOption<GeneratedArgumentTypes.RandomRandintDtype> DtypeDefault => null;

			public long Low
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("low");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (long)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<long, long>((PrintfFormat<long, Unit, string, long>)(object)new PrintfFormat<long, Unit, string, long, Unit>("Required parameter low is missing"));
				}
			}

			public long High
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("high");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (long)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<long, long>((PrintfFormat<long, Unit, string, long>)(object)new PrintfFormat<long, Unit, string, long, Unit>("Required parameter high is missing"));
				}
			}

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			public FSharpOption<GeneratedArgumentTypes.RandomRandintDtype> Dtype => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.RandomRandintDtype>>("dtype", DtypeDefault);

			internal RandomRandint(Arguments<Symbol> operatorArguments)
				: base("_random_randint", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomRandint CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomRandint(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomRandint(OperatorArguments.AddReplace(args));
			}

			public RandomRandint(long low, long high, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.RandomRandintDtype> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)low))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)high))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004022839_002D2150(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.RandomRandintDtype, object>((FSharpFunc<GeneratedArgumentTypes.RandomRandintDtype, object>)new operatorArguments_004022840_002D2151(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public RandomRandint With([Optional] [OptionalArgument] FSharpOption<long> low, [Optional] [OptionalArgument] FSharpOption<long> high, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.RandomRandintDtype> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022872_002D2152(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022868_002D2153(), low), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022869_002D2154(), high), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022870_002D2155(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.RandomRandintDtype, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.RandomRandintDtype, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022871_002D2156(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new RandomRandint(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomUniformLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double LowDefault => 0.0;

			public static double HighDefault => 1.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Low => operatorArguments.GetParameter("low", LowDefault);

			public double High => operatorArguments.GetParameter("high", HighDefault);

			internal RandomUniformLike(Arguments<Symbol> operatorArguments)
				: base("_random_uniform_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomUniformLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomUniformLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomUniformLike(OperatorArguments.AddReplace(args));
			}

			public RandomUniformLike([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> low, [Optional] [OptionalArgument] FSharpOption<double> high)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022902_002D2157(), low))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022903_002D2158(), high))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public RandomUniformLike With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> low, [Optional] [OptionalArgument] FSharpOption<double> high)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022930_002D2159(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022927_002D2160(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022928_002D2161(), low), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022929_002D2162(), high), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new RandomUniformLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomNormalLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double LocDefault => 0.0;

			public static double ScaleDefault => 1.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Loc => operatorArguments.GetParameter("loc", LocDefault);

			public double Scale => operatorArguments.GetParameter("scale", ScaleDefault);

			internal RandomNormalLike(Arguments<Symbol> operatorArguments)
				: base("_random_normal_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomNormalLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomNormalLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomNormalLike(OperatorArguments.AddReplace(args));
			}

			public RandomNormalLike([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> loc, [Optional] [OptionalArgument] FSharpOption<double> scale)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("loc", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022959_002D2163(), loc))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scale", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004022960_002D2164(), scale))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public RandomNormalLike With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> loc, [Optional] [OptionalArgument] FSharpOption<double> scale)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004022987_002D2165(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022984_002D2166(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022985_002D2167(), loc), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004022986_002D2168(), scale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new RandomNormalLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomGammaLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double AlphaDefault => 1.0;

			public static double BetaDefault => 1.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Alpha => operatorArguments.GetParameter("alpha", AlphaDefault);

			public double Beta => operatorArguments.GetParameter("beta", BetaDefault);

			internal RandomGammaLike(Arguments<Symbol> operatorArguments)
				: base("_random_gamma_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomGammaLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomGammaLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomGammaLike(OperatorArguments.AddReplace(args));
			}

			public RandomGammaLike([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<double> beta)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023015_002D2169(), alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023016_002D2170(), beta))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public RandomGammaLike With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<double> beta)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004023043_002D2171(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023040_002D2172(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023041_002D2173(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023042_002D2174(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new RandomGammaLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomExponentialLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double LamDefault => 1.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Lam => operatorArguments.GetParameter("lam", LamDefault);

			internal RandomExponentialLike(Arguments<Symbol> operatorArguments)
				: base("_random_exponential_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomExponentialLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomExponentialLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomExponentialLike(OperatorArguments.AddReplace(args));
			}

			public RandomExponentialLike([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> lam)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023069_002D2175(), lam))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public RandomExponentialLike With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> lam)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004023088_002D2176(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023086_002D2177(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023087_002D2178(), lam), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new RandomExponentialLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomPoissonLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double LamDefault => 1.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Lam => operatorArguments.GetParameter("lam", LamDefault);

			internal RandomPoissonLike(Arguments<Symbol> operatorArguments)
				: base("_random_poisson_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomPoissonLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomPoissonLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomPoissonLike(OperatorArguments.AddReplace(args));
			}

			public RandomPoissonLike([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> lam)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023115_002D2179(), lam))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public RandomPoissonLike With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> lam)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004023134_002D2180(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023132_002D2181(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023133_002D2182(), lam), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new RandomPoissonLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomNegativeBinomialLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int KDefault => 1;

			public static double PDefault => 1.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public int K => operatorArguments.GetParameter("k", KDefault);

			public double P => operatorArguments.GetParameter("p", PDefault);

			internal RandomNegativeBinomialLike(Arguments<Symbol> operatorArguments)
				: base("_random_negative_binomial_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomNegativeBinomialLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomNegativeBinomialLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomNegativeBinomialLike(OperatorArguments.AddReplace(args));
			}

			public RandomNegativeBinomialLike([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> k, [Optional] [OptionalArgument] FSharpOption<double> p)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004023164_002D2183(), k))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023165_002D2184(), p))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public RandomNegativeBinomialLike With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> k, [Optional] [OptionalArgument] FSharpOption<double> p)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004023192_002D2185(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023189_002D2186(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023190_002D2187(), k), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023191_002D2188(), p), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new RandomNegativeBinomialLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RandomGeneralizedNegativeBinomialLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double MuDefault => 1.0;

			public static double AlphaDefault => 1.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Mu => operatorArguments.GetParameter("mu", MuDefault);

			public double Alpha => operatorArguments.GetParameter("alpha", AlphaDefault);

			internal RandomGeneralizedNegativeBinomialLike(Arguments<Symbol> operatorArguments)
				: base("_random_generalized_negative_binomial_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RandomGeneralizedNegativeBinomialLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new RandomGeneralizedNegativeBinomialLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RandomGeneralizedNegativeBinomialLike(OperatorArguments.AddReplace(args));
			}

			public RandomGeneralizedNegativeBinomialLike([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> mu, [Optional] [OptionalArgument] FSharpOption<double> alpha)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mu", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023224_002D2189(), mu))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023225_002D2190(), alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public RandomGeneralizedNegativeBinomialLike With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> mu, [Optional] [OptionalArgument] FSharpOption<double> alpha)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004023252_002D2191(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023249_002D2192(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023250_002D2193(), mu), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023251_002D2194(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new RandomGeneralizedNegativeBinomialLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Shuffle : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Shuffle(Arguments<Symbol> operatorArguments)
				: base("_shuffle", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Shuffle CreateFromArguments(Arguments<Symbol> args)
			{
				return new Shuffle(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Shuffle(OperatorArguments.AddReplace(args));
			}

			public Shuffle([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Shuffle With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004023282_002D2195(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023281_002D2196(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Shuffle(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SampleUniqueZipfian : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> ShapeDefault => null;

			public int RangeMax
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("range_max");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter range_max is missing"));
				}
			}

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			internal SampleUniqueZipfian(Arguments<Symbol> operatorArguments)
				: base("_sample_unique_zipfian", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SampleUniqueZipfian CreateFromArguments(Arguments<Symbol> args)
			{
				return new SampleUniqueZipfian(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SampleUniqueZipfian(OperatorArguments.AddReplace(args));
			}

			public SampleUniqueZipfian(int rangeMax, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("range_max", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)rangeMax))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004023321_002D2197(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public SampleUniqueZipfian With([Optional] [OptionalArgument] FSharpOption<int> rangeMax, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004023340_002D2198(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023338_002D2199(), rangeMax), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023339_002D2200(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new SampleUniqueZipfian(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinearRegressionOutput : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double GradScaleDefault => 1.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Label => operatorArguments.GetInput("label");

			public double GradScale => operatorArguments.GetParameter("grad_scale", GradScaleDefault);

			internal LinearRegressionOutput(Arguments<Symbol> operatorArguments)
				: base("LinearRegressionOutput", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinearRegressionOutput CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinearRegressionOutput(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinearRegressionOutput(OperatorArguments.AddReplace(args));
			}

			public LinearRegressionOutput([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<double> gradScale)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(label, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad_scale", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023381_002D2201(), gradScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public LinearRegressionOutput With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<double> gradScale)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004023405_002D2202(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023402_002D2203(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023403_002D2204(), label), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023404_002D2205(), gradScale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new LinearRegressionOutput(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MAERegressionOutput : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double GradScaleDefault => 1.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Label => operatorArguments.GetInput("label");

			public double GradScale => operatorArguments.GetParameter("grad_scale", GradScaleDefault);

			internal MAERegressionOutput(Arguments<Symbol> operatorArguments)
				: base("MAERegressionOutput", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MAERegressionOutput CreateFromArguments(Arguments<Symbol> args)
			{
				return new MAERegressionOutput(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MAERegressionOutput(OperatorArguments.AddReplace(args));
			}

			public MAERegressionOutput([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<double> gradScale)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(label, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad_scale", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023447_002D2206(), gradScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public MAERegressionOutput With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<double> gradScale)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004023471_002D2207(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023468_002D2208(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023469_002D2209(), label), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023470_002D2210(), gradScale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new MAERegressionOutput(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LogisticRegressionOutput : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double GradScaleDefault => 1.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Label => operatorArguments.GetInput("label");

			public double GradScale => operatorArguments.GetParameter("grad_scale", GradScaleDefault);

			internal LogisticRegressionOutput(Arguments<Symbol> operatorArguments)
				: base("LogisticRegressionOutput", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LogisticRegressionOutput CreateFromArguments(Arguments<Symbol> args)
			{
				return new LogisticRegressionOutput(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LogisticRegressionOutput(OperatorArguments.AddReplace(args));
			}

			public LogisticRegressionOutput([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<double> gradScale)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(label, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad_scale", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023517_002D2211(), gradScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public LogisticRegressionOutput With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<double> gradScale)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004023541_002D2212(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023538_002D2213(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023539_002D2214(), label), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023540_002D2215(), gradScale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new LogisticRegressionOutput(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RNN : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool BidirectionalDefault => false;

			public static double PDefault => 0.0;

			public static bool StateOutputsDefault => false;

			public static FSharpOption<int> ProjectionSizeDefault => null;

			public static FSharpOption<double> LstmStateClipMinDefault => null;

			public static FSharpOption<double> LstmStateClipMaxDefault => null;

			public static bool LstmStateClipNanDefault => false;

			public static bool UseSequenceLengthDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Parameters => operatorArguments.GetInput("parameters");

			public Symbol State => operatorArguments.GetInput("state");

			public Symbol StateCell => operatorArguments.GetInput("state_cell");

			public Symbol SequenceLength => operatorArguments.GetInput("sequence_length");

			public int StateSize
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("state_size");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter state_size is missing"));
				}
			}

			public int NumLayers
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_layers");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_layers is missing"));
				}
			}

			public GeneratedArgumentTypes.RNNMode Mode
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("mode");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return IntrinsicFunctions.UnboxGeneric<GeneratedArgumentTypes.RNNMode>(v);
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<GeneratedArgumentTypes.RNNMode, GeneratedArgumentTypes.RNNMode>((PrintfFormat<GeneratedArgumentTypes.RNNMode, Unit, string, GeneratedArgumentTypes.RNNMode>)(object)new PrintfFormat<GeneratedArgumentTypes.RNNMode, Unit, string, GeneratedArgumentTypes.RNNMode, Unit>("Required parameter mode is missing"));
				}
			}

			public bool Bidirectional => operatorArguments.GetParameter("bidirectional", BidirectionalDefault);

			public double P => operatorArguments.GetParameter("p", PDefault);

			public bool StateOutputs => operatorArguments.GetParameter("state_outputs", StateOutputsDefault);

			public FSharpOption<int> ProjectionSize => operatorArguments.GetParameter<FSharpOption<int>>("projection_size", ProjectionSizeDefault);

			public FSharpOption<double> LstmStateClipMin => operatorArguments.GetParameter<FSharpOption<double>>("lstm_state_clip_min", LstmStateClipMinDefault);

			public FSharpOption<double> LstmStateClipMax => operatorArguments.GetParameter<FSharpOption<double>>("lstm_state_clip_max", LstmStateClipMaxDefault);

			public bool LstmStateClipNan => operatorArguments.GetParameter("lstm_state_clip_nan", LstmStateClipNanDefault);

			public bool UseSequenceLength => operatorArguments.GetParameter("use_sequence_length", UseSequenceLengthDefault);

			internal RNN(Arguments<Symbol> operatorArguments)
				: base("RNN", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RNN CreateFromArguments(Arguments<Symbol> args)
			{
				return new RNN(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RNN(OperatorArguments.AddReplace(args));
			}

			public RNN(Symbol data, Symbol parameters, Symbol state, Symbol stateCell, Symbol sequenceLength, int stateSize, int numLayers, GeneratedArgumentTypes.RNNMode mode, [Optional] [OptionalArgument] FSharpOption<bool> bidirectional, [Optional] [OptionalArgument] FSharpOption<double> p, [Optional] [OptionalArgument] FSharpOption<bool> stateOutputs, [Optional] [OptionalArgument] FSharpOption<int> projectionSize, [Optional] [OptionalArgument] FSharpOption<double> lstmStateClipMin, [Optional] [OptionalArgument] FSharpOption<double> lstmStateClipMax, [Optional] [OptionalArgument] FSharpOption<bool> lstmStateClipNan, [Optional] [OptionalArgument] FSharpOption<bool> useSequenceLength)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("parameters", OpArg<Symbol>.NewInput(parameters)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("state", OpArg<Symbol>.NewInput(state)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("state_cell", OpArg<Symbol>.NewInput(stateCell)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sequence_length", OpArg<Symbol>.NewInput(sequenceLength)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("state_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)stateSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_layers", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numLayers))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)mode))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bidirectional", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004023646_002D2216(), bidirectional))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023647_002D2217(), p))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("state_outputs", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004023648_002D2218(), stateOutputs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("projection_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004023649_002D2219(), projectionSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lstm_state_clip_min", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023650_002D2220(), lstmStateClipMin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lstm_state_clip_max", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023651_002D2221(), lstmStateClipMax))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lstm_state_clip_nan", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004023652_002D2222(), lstmStateClipNan))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_sequence_length", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004023653_002D2223(), useSequenceLength))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))))))
			{
			}

			public RNN(int stateSize, int numLayers, GeneratedArgumentTypes.RNNMode mode, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> parameters, [Optional] [OptionalArgument] FSharpOption<Symbol> state, [Optional] [OptionalArgument] FSharpOption<Symbol> stateCell, [Optional] [OptionalArgument] FSharpOption<Symbol> sequenceLength, [Optional] [OptionalArgument] FSharpOption<bool> bidirectional, [Optional] [OptionalArgument] FSharpOption<double> p, [Optional] [OptionalArgument] FSharpOption<bool> stateOutputs, [Optional] [OptionalArgument] FSharpOption<int> projectionSize, [Optional] [OptionalArgument] FSharpOption<double> lstmStateClipMin, [Optional] [OptionalArgument] FSharpOption<double> lstmStateClipMax, [Optional] [OptionalArgument] FSharpOption<bool> lstmStateClipNan, [Optional] [OptionalArgument] FSharpOption<bool> useSequenceLength)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol parameters2 = Operators.DefaultArg<Symbol>(parameters, (Symbol)new ImplicitVariable());
				Symbol state2 = Operators.DefaultArg<Symbol>(state, (Symbol)new ImplicitVariable());
				Symbol stateCell2 = Operators.DefaultArg<Symbol>(stateCell, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(sequenceLength, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("parameters", OpArg<Symbol>.NewInput(parameters2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("state", OpArg<Symbol>.NewInput(state2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("state_cell", OpArg<Symbol>.NewInput(stateCell2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sequence_length", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("state_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)stateSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_layers", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numLayers))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)mode))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bidirectional", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004023759_002D2224(), bidirectional))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023760_002D2225(), p))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("state_outputs", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004023761_002D2226(), stateOutputs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("projection_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004023762_002D2227(), projectionSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lstm_state_clip_min", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023763_002D2228(), lstmStateClipMin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lstm_state_clip_max", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004023764_002D2229(), lstmStateClipMax))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lstm_state_clip_nan", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004023765_002D2230(), lstmStateClipNan))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_sequence_length", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004023766_002D2231(), useSequenceLength))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))))));
			}

			public RNN With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> parameters, [Optional] [OptionalArgument] FSharpOption<Symbol> state, [Optional] [OptionalArgument] FSharpOption<Symbol> stateCell, [Optional] [OptionalArgument] FSharpOption<Symbol> sequenceLength, [Optional] [OptionalArgument] FSharpOption<int> stateSize, [Optional] [OptionalArgument] FSharpOption<int> numLayers, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.RNNMode> mode, [Optional] [OptionalArgument] FSharpOption<bool> bidirectional, [Optional] [OptionalArgument] FSharpOption<double> p, [Optional] [OptionalArgument] FSharpOption<bool> stateOutputs, [Optional] [OptionalArgument] FSharpOption<int> projectionSize, [Optional] [OptionalArgument] FSharpOption<double> lstmStateClipMin, [Optional] [OptionalArgument] FSharpOption<double> lstmStateClipMax, [Optional] [OptionalArgument] FSharpOption<bool> lstmStateClipNan, [Optional] [OptionalArgument] FSharpOption<bool> useSequenceLength)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004023876_002D2232(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023860_002D2233(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023861_002D2234(), parameters), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023862_002D2235(), state), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023863_002D2236(), stateCell), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023864_002D2237(), sequenceLength), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023865_002D2238(), stateSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023866_002D2239(), numLayers), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.RNNMode, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.RNNMode, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023867_002D2240(), mode), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023868_002D2241(), bidirectional), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023869_002D2242(), p), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023870_002D2243(), stateOutputs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023871_002D2244(), projectionSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023872_002D2245(), lstmStateClipMin), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023873_002D2246(), lstmStateClipMax), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023874_002D2247(), lstmStateClipNan), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004023875_002D2248(), useSequenceLength), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))))))));
				return new RNN(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ROIPooling : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Rois => operatorArguments.GetInput("rois");

			public IEnumerable<int> PooledSize
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("pooled_size");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter pooled_size is missing"));
				}
			}

			public double SpatialScale
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("spatial_scale");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter spatial_scale is missing"));
				}
			}

			internal ROIPooling(Arguments<Symbol> operatorArguments)
				: base("ROIPooling", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ROIPooling CreateFromArguments(Arguments<Symbol> args)
			{
				return new ROIPooling(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ROIPooling(OperatorArguments.AddReplace(args));
			}

			public ROIPooling(Symbol data, Symbol rois, IEnumerable<int> pooledSize, double spatialScale)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(rois)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)pooledSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)spatialScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public ROIPooling(IEnumerable<int> pooledSize, double spatialScale, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> rois)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rois, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)pooledSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)spatialScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public ROIPooling With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> rois, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pooledSize, [Optional] [OptionalArgument] FSharpOption<double> spatialScale)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004024032_002D2249(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024028_002D2250(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024029_002D2251(), rois), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024030_002D2252(), pooledSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024031_002D2253(), spatialScale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new ROIPooling(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SequenceMask : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool UseSequenceLengthDefault => false;

			public static double ValueDefault => 0.0;

			public static int AxisDefault => 0;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol SequenceLength => operatorArguments.GetInput("sequence_length");

			public bool UseSequenceLength => operatorArguments.GetParameter("use_sequence_length", UseSequenceLengthDefault);

			public double Value => operatorArguments.GetParameter("value", ValueDefault);

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			internal SequenceMask(Arguments<Symbol> operatorArguments)
				: base("SequenceMask", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SequenceMask CreateFromArguments(Arguments<Symbol> args)
			{
				return new SequenceMask(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SequenceMask(OperatorArguments.AddReplace(args));
			}

			public SequenceMask([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> sequenceLength, [Optional] [OptionalArgument] FSharpOption<bool> useSequenceLength, [Optional] [OptionalArgument] FSharpOption<double> value, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(sequenceLength, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sequence_length", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_sequence_length", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024124_002D2254(), useSequenceLength))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("value", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004024125_002D2255(), value))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004024126_002D2256(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))));
			}

			public SequenceMask With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> sequenceLength, [Optional] [OptionalArgument] FSharpOption<bool> useSequenceLength, [Optional] [OptionalArgument] FSharpOption<double> value, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004024166_002D2257(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024161_002D2258(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024162_002D2259(), sequenceLength), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024163_002D2260(), useSequenceLength), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024164_002D2261(), value), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024165_002D2262(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new SequenceMask(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SliceChannel : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int AxisDefault => 1;

			public static bool SqueezeAxisDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public int NumOutputs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_outputs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_outputs is missing"));
				}
			}

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			public bool SqueezeAxis => operatorArguments.GetParameter("squeeze_axis", SqueezeAxisDefault);

			internal SliceChannel(Arguments<Symbol> operatorArguments)
				: base("SliceChannel", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SliceChannel CreateFromArguments(Arguments<Symbol> args)
			{
				return new SliceChannel(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SliceChannel(OperatorArguments.AddReplace(args));
			}

			public SliceChannel(Symbol data, int numOutputs, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> squeezeAxis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutputs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004024246_002D2263(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("squeeze_axis", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024247_002D2264(), squeezeAxis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public SliceChannel(int numOutputs, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> squeezeAxis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutputs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004024324_002D2265(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("squeeze_axis", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024325_002D2266(), squeezeAxis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public SliceChannel With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> numOutputs, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> squeezeAxis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004024357_002D2267(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024353_002D2268(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024354_002D2269(), numOutputs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024355_002D2270(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024356_002D2271(), squeezeAxis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new SliceChannel(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SoftmaxOutput : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double GradScaleDefault => 1.0;

			public static double IgnoreLabelDefault => -1.0;

			public static bool MultiOutputDefault => false;

			public static bool UseIgnoreDefault => false;

			public static bool PreserveShapeDefault => false;

			public static GeneratedArgumentTypes.Normalization NormalizationDefault => GeneratedArgumentTypes.Normalization.Null;

			public static bool OutGradDefault => false;

			public static double SmoothAlphaDefault => 0.0;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Label => operatorArguments.GetInput("label");

			public double GradScale => operatorArguments.GetParameter("grad_scale", GradScaleDefault);

			public double IgnoreLabel => operatorArguments.GetParameter("ignore_label", IgnoreLabelDefault);

			public bool MultiOutput => operatorArguments.GetParameter("multi_output", MultiOutputDefault);

			public bool UseIgnore => operatorArguments.GetParameter("use_ignore", UseIgnoreDefault);

			public bool PreserveShape => operatorArguments.GetParameter("preserve_shape", PreserveShapeDefault);

			public GeneratedArgumentTypes.Normalization Normalization => operatorArguments.GetParameter("normalization", NormalizationDefault);

			public bool OutGrad => operatorArguments.GetParameter("out_grad", OutGradDefault);

			public double SmoothAlpha => operatorArguments.GetParameter("smooth_alpha", SmoothAlphaDefault);

			internal SoftmaxOutput(Arguments<Symbol> operatorArguments)
				: base("SoftmaxOutput", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SoftmaxOutput CreateFromArguments(Arguments<Symbol> args)
			{
				return new SoftmaxOutput(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SoftmaxOutput(OperatorArguments.AddReplace(args));
			}

			public SoftmaxOutput([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<double> gradScale, [Optional] [OptionalArgument] FSharpOption<double> ignoreLabel, [Optional] [OptionalArgument] FSharpOption<bool> multiOutput, [Optional] [OptionalArgument] FSharpOption<bool> useIgnore, [Optional] [OptionalArgument] FSharpOption<bool> preserveShape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.Normalization> normalization, [Optional] [OptionalArgument] FSharpOption<bool> outGrad, [Optional] [OptionalArgument] FSharpOption<double> smoothAlpha)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(label, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad_scale", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004024468_002D2272(), gradScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("ignore_label", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004024469_002D2273(), ignoreLabel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("multi_output", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024470_002D2274(), multiOutput))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_ignore", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024471_002D2275(), useIgnore))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("preserve_shape", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024472_002D2276(), preserveShape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("normalization", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.Normalization, object>((FSharpFunc<GeneratedArgumentTypes.Normalization, object>)new operatorArguments_004024473_002D2277(), normalization))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("out_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024474_002D2278(), outGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("smooth_alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004024475_002D2279(), smoothAlpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))));
			}

			public SoftmaxOutput With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<double> gradScale, [Optional] [OptionalArgument] FSharpOption<double> ignoreLabel, [Optional] [OptionalArgument] FSharpOption<bool> multiOutput, [Optional] [OptionalArgument] FSharpOption<bool> useIgnore, [Optional] [OptionalArgument] FSharpOption<bool> preserveShape, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.Normalization> normalization, [Optional] [OptionalArgument] FSharpOption<bool> outGrad, [Optional] [OptionalArgument] FSharpOption<double> smoothAlpha)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004024555_002D2280(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024545_002D2281(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024546_002D2282(), label), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024547_002D2283(), gradScale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024548_002D2284(), ignoreLabel), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024549_002D2285(), multiOutput), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024550_002D2286(), useIgnore), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024551_002D2287(), preserveShape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.Normalization, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.Normalization, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024552_002D2288(), normalization), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024553_002D2289(), outGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024554_002D2290(), smoothAlpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))));
				return new SoftmaxOutput(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SgMkldnnConv : SymbolOperator
		{
			internal SgMkldnnConv(Arguments<Symbol> operatorArguments)
				: base("_sg_mkldnn_conv", operatorArguments)
			{
			}

			public static SgMkldnnConv CreateFromArguments(Arguments<Symbol> args)
			{
				return new SgMkldnnConv(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SgMkldnnConv(OperatorArguments.AddReplace(args));
			}

			public SgMkldnnConv()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_004024566_002D2291()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SgMkldnnFullyConnected : SymbolOperator
		{
			internal SgMkldnnFullyConnected(Arguments<Symbol> operatorArguments)
				: base("_sg_mkldnn_fully_connected", operatorArguments)
			{
			}

			public static SgMkldnnFullyConnected CreateFromArguments(Arguments<Symbol> args)
			{
				return new SgMkldnnFullyConnected(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SgMkldnnFullyConnected(OperatorArguments.AddReplace(args));
			}

			public SgMkldnnFullyConnected()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_004024579_002D2292()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SwapAxis : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int Dim1Default => 0;

			public static int Dim2Default => 0;

			public Symbol Data => operatorArguments.GetInput("data");

			public int Dim1 => operatorArguments.GetParameter("dim1", Dim1Default);

			public int Dim2 => operatorArguments.GetParameter("dim2", Dim2Default);

			internal SwapAxis(Arguments<Symbol> operatorArguments)
				: base("SwapAxis", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SwapAxis CreateFromArguments(Arguments<Symbol> args)
			{
				return new SwapAxis(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SwapAxis(OperatorArguments.AddReplace(args));
			}

			public SwapAxis([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> dim1, [Optional] [OptionalArgument] FSharpOption<int> dim2)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dim1", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004024619_002D2293(), dim1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dim2", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004024620_002D2294(), dim2))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public SwapAxis With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> dim1, [Optional] [OptionalArgument] FSharpOption<int> dim2)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004024647_002D2295(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024644_002D2296(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024645_002D2297(), dim1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024646_002D2298(), dim2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new SwapAxis(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class AmpCast : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public DataType Dtype
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("dtype");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return IntrinsicFunctions.UnboxGeneric<DataType>(v);
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<DataType, DataType>((PrintfFormat<DataType, Unit, string, DataType>)(object)new PrintfFormat<DataType, Unit, string, DataType, Unit>("Required parameter dtype is missing"));
				}
			}

			internal AmpCast(Arguments<Symbol> operatorArguments)
				: base("amp_cast", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static AmpCast CreateFromArguments(Arguments<Symbol> args)
			{
				return new AmpCast(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new AmpCast(OperatorArguments.AddReplace(args));
			}

			public AmpCast(Symbol data, DataType dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public AmpCast(DataType dtype, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public AmpCast With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004024700_002D2299(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024698_002D2300(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024699_002D2301(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new AmpCast(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class AmpMulticast : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool CastNarrowDefault => false;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int NumOutputs
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_outputs");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_outputs is missing"));
				}
			}

			public bool CastNarrow => operatorArguments.GetParameter("cast_narrow", CastNarrowDefault);

			internal AmpMulticast(Arguments<Symbol> operatorArguments)
				: base("amp_multicast", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static AmpMulticast CreateFromArguments(Arguments<Symbol> args)
			{
				return new AmpMulticast(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new AmpMulticast(OperatorArguments.AddReplace(args));
			}

			public AmpMulticast(IEnumerable<Symbol> data, int numOutputs, [Optional] [OptionalArgument] FSharpOption<bool> castNarrow)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(data))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutputs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cast_narrow", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024724_002D2302(), castNarrow))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public AmpMulticast(int numOutputs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<bool> castNarrow)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_004024740_002D26(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numOutputs))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cast_narrow", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024745_002D2303(), castNarrow))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public AmpMulticast With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> numOutputs, [Optional] [OptionalArgument] FSharpOption<bool> castNarrow)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004024769_002D2304(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024766_002D2305(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024767_002D2306(), numOutputs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024768_002D2307(), castNarrow), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new AmpMulticast(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Max : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public static bool ExcludeDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public bool Exclude => operatorArguments.GetParameter("exclude", ExcludeDefault);

			internal Max(Arguments<Symbol> operatorArguments)
				: base("max", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Max CreateFromArguments(Arguments<Symbol> args)
			{
				return new Max(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Max(OperatorArguments.AddReplace(args));
			}

			public Max([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004024804_002D2308(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024805_002D2309(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024806_002D2310(), exclude))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Max With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004024880_002D2311(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024876_002D2312(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024877_002D2313(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024878_002D2314(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024879_002D2315(), exclude), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Max(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Min : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public static bool ExcludeDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public bool Exclude => operatorArguments.GetParameter("exclude", ExcludeDefault);

			internal Min(Arguments<Symbol> operatorArguments)
				: base("min", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Min CreateFromArguments(Arguments<Symbol> args)
			{
				return new Min(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Min(OperatorArguments.AddReplace(args));
			}

			public Min([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004024915_002D2316(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024916_002D2317(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004024917_002D2318(), exclude))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Min With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004024991_002D2319(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024987_002D2320(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024988_002D2321(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024989_002D2322(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004024990_002D2323(), exclude), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Min(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Norm : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int OrdDefault => 2;

			public static FSharpOption<int[]> AxisDefault => null;

			public static FSharpOption<DataType> OutDtypeDefault => null;

			public static bool KeepdimsDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public int Ord => operatorArguments.GetParameter("ord", OrdDefault);

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public FSharpOption<DataType> OutDtype => operatorArguments.GetParameter<FSharpOption<DataType>>("out_dtype", OutDtypeDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			internal Norm(Arguments<Symbol> operatorArguments)
				: base("norm", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Norm CreateFromArguments(Arguments<Symbol> args)
			{
				return new Norm(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Norm(OperatorArguments.AddReplace(args));
			}

			public Norm([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> ord, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<DataType> outDtype, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("ord", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004025047_002D2324(), ord))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004025048_002D2325(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("out_dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004025049_002D2326(), outDtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004025050_002D2327(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public Norm With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> ord, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<DataType> outDtype, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004025108_002D2328(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025103_002D2329(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025104_002D2330(), ord), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025105_002D2331(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025106_002D2332(), outDtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025107_002D2333(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new Norm(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Argmax : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			internal Argmax(Arguments<Symbol> operatorArguments)
				: base("argmax", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Argmax CreateFromArguments(Arguments<Symbol> args)
			{
				return new Argmax(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Argmax(OperatorArguments.AddReplace(args));
			}

			public Argmax([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004025148_002D2334(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004025149_002D2335(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public Argmax With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004025176_002D2336(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025173_002D2337(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025174_002D2338(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025175_002D2339(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new Argmax(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Argmin : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			internal Argmin(Arguments<Symbol> operatorArguments)
				: base("argmin", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Argmin CreateFromArguments(Arguments<Symbol> args)
			{
				return new Argmin(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Argmin(OperatorArguments.AddReplace(args));
			}

			public Argmin([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004025216_002D2340(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004025217_002D2341(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public Argmin With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004025244_002D2342(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025241_002D2343(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025242_002D2344(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025243_002D2345(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new Argmin(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ArgmaxChannel : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal ArgmaxChannel(Arguments<Symbol> operatorArguments)
				: base("argmax_channel", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ArgmaxChannel CreateFromArguments(Arguments<Symbol> args)
			{
				return new ArgmaxChannel(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ArgmaxChannel(OperatorArguments.AddReplace(args));
			}

			public ArgmaxChannel([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public ArgmaxChannel With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004025284_002D2346(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025283_002D2347(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new ArgmaxChannel(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Pick : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> AxisDefault => FSharpOption<int>.Some(-1);

			public static bool KeepdimsDefault => false;

			public static GeneratedArgumentTypes.PickMode ModeDefault => GeneratedArgumentTypes.PickMode.Clip;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Index => operatorArguments.GetInput("index");

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public GeneratedArgumentTypes.PickMode Mode => operatorArguments.GetParameter("mode", ModeDefault);

			internal Pick(Arguments<Symbol> operatorArguments)
				: base("pick", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Pick CreateFromArguments(Arguments<Symbol> args)
			{
				return new Pick(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Pick(OperatorArguments.AddReplace(args));
			}

			public Pick([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> index, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PickMode> mode)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(index, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("index", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004025351_002D2348(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004025352_002D2349(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.PickMode, object>((FSharpFunc<GeneratedArgumentTypes.PickMode, object>)new operatorArguments_004025353_002D2350(), mode))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))));
			}

			public Pick With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> index, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.PickMode> mode)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004025393_002D2351(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025388_002D2352(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025389_002D2353(), index), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025390_002D2354(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025391_002D2355(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.PickMode, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.PickMode, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025392_002D2356(), mode), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new Pick(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastAxis : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] AxisDefault => new int[0];

			public static int[] SizeDefault => new int[0];

			public Symbol Data => operatorArguments.GetInput("data");

			public int[] Axis => operatorArguments.GetParameter("axis", AxisDefault);

			public int[] Size => operatorArguments.GetParameter("size", SizeDefault);

			internal BroadcastAxis(Arguments<Symbol> operatorArguments)
				: base("broadcast_axis", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastAxis CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastAxis(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastAxis(OperatorArguments.AddReplace(args));
			}

			public BroadcastAxis([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004025434_002D2357(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004025435_002D2358(), size))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public BroadcastAxis With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> size)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004025462_002D2359(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025459_002D2360(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025460_002D2361(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025461_002D2362(), size), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new BroadcastAxis(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastTo : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public Symbol Data => operatorArguments.GetInput("data");

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			internal BroadcastTo(Arguments<Symbol> operatorArguments)
				: base("broadcast_to", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastTo CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastTo(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastTo(OperatorArguments.AddReplace(args));
			}

			public BroadcastTo([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004025497_002D2363(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public BroadcastTo With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004025516_002D2364(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025514_002D2365(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025515_002D2366(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastTo(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastBackward : SymbolOperator
		{
			internal BroadcastBackward(Arguments<Symbol> operatorArguments)
				: base("_broadcast_backward", operatorArguments)
			{
			}

			public static BroadcastBackward CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastBackward(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastBackward(OperatorArguments.AddReplace(args));
			}

			public BroadcastBackward()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_004025524_002D2367()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> LhsAxesDefault => null;

			public static FSharpOption<int[]> RhsAxesDefault => null;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			public FSharpOption<int[]> LhsAxes => operatorArguments.GetParameter<FSharpOption<int[]>>("lhs_axes", LhsAxesDefault);

			public FSharpOption<int[]> RhsAxes => operatorArguments.GetParameter<FSharpOption<int[]>>("rhs_axes", RhsAxesDefault);

			internal BroadcastLike(Arguments<Symbol> operatorArguments)
				: base("broadcast_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastLike(OperatorArguments.AddReplace(args));
			}

			public BroadcastLike([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> lhsAxes, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> rhsAxes)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs_axes", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004025566_002D2368(), lhsAxes))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs_axes", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004025567_002D2369(), rhsAxes))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public BroadcastLike With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> lhsAxes, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> rhsAxes)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004025599_002D2370(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025595_002D2371(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025596_002D2372(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025597_002D2373(), lhsAxes), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025598_002D2374(), rhsAxes), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new BroadcastLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Prod : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public static bool ExcludeDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public bool Exclude => operatorArguments.GetParameter("exclude", ExcludeDefault);

			internal Prod(Arguments<Symbol> operatorArguments)
				: base("prod", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Prod CreateFromArguments(Arguments<Symbol> args)
			{
				return new Prod(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Prod(OperatorArguments.AddReplace(args));
			}

			public Prod([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004025634_002D2375(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004025635_002D2376(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004025636_002D2377(), exclude))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Prod With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004025710_002D2378(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025706_002D2379(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025707_002D2380(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025708_002D2381(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025709_002D2382(), exclude), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Prod(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Nanprod : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public static bool ExcludeDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public bool Exclude => operatorArguments.GetParameter("exclude", ExcludeDefault);

			internal Nanprod(Arguments<Symbol> operatorArguments)
				: base("nanprod", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Nanprod CreateFromArguments(Arguments<Symbol> args)
			{
				return new Nanprod(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Nanprod(OperatorArguments.AddReplace(args));
			}

			public Nanprod([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004025747_002D2383(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004025748_002D2384(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004025749_002D2385(), exclude))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Nanprod With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004025823_002D2386(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025819_002D2387(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025820_002D2388(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025821_002D2389(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025822_002D2390(), exclude), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Nanprod(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Sum : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public static bool ExcludeDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public bool Exclude => operatorArguments.GetParameter("exclude", ExcludeDefault);

			internal Sum(Arguments<Symbol> operatorArguments)
				: base("sum", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Sum CreateFromArguments(Arguments<Symbol> args)
			{
				return new Sum(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Sum(OperatorArguments.AddReplace(args));
			}

			public Sum([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004025892_002D2391(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004025893_002D2392(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004025894_002D2393(), exclude))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Sum With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004025968_002D2394(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025964_002D2395(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025965_002D2396(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025966_002D2397(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004025967_002D2398(), exclude), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Sum(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Mean : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public static bool ExcludeDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public bool Exclude => operatorArguments.GetParameter("exclude", ExcludeDefault);

			internal Mean(Arguments<Symbol> operatorArguments)
				: base("mean", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Mean CreateFromArguments(Arguments<Symbol> args)
			{
				return new Mean(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Mean(OperatorArguments.AddReplace(args));
			}

			public Mean([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004026003_002D2399(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004026004_002D2400(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004026005_002D2401(), exclude))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Mean With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026079_002D2402(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026075_002D2403(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026076_002D2404(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026077_002D2405(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026078_002D2406(), exclude), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Mean(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Nansum : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public static bool ExcludeDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public bool Exclude => operatorArguments.GetParameter("exclude", ExcludeDefault);

			internal Nansum(Arguments<Symbol> operatorArguments)
				: base("nansum", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Nansum CreateFromArguments(Arguments<Symbol> args)
			{
				return new Nansum(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Nansum(OperatorArguments.AddReplace(args));
			}

			public Nansum([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004026116_002D2407(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004026117_002D2408(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004026118_002D2409(), exclude))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Nansum With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026192_002D2410(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026188_002D2411(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026189_002D2412(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026190_002D2413(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026191_002D2414(), exclude), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Nansum(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class CastStorage : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public StorageType Stype
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("stype");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return IntrinsicFunctions.UnboxGeneric<StorageType>(v);
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<StorageType, StorageType>((PrintfFormat<StorageType, Unit, string, StorageType>)(object)new PrintfFormat<StorageType, Unit, string, StorageType, Unit>("Required parameter stype is missing"));
				}
			}

			internal CastStorage(Arguments<Symbol> operatorArguments)
				: base("cast_storage", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static CastStorage CreateFromArguments(Arguments<Symbol> args)
			{
				return new CastStorage(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new CastStorage(OperatorArguments.AddReplace(args));
			}

			public CastStorage(Symbol data, StorageType stype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)stype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public CastStorage(StorageType stype, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)stype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public CastStorage With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<StorageType> stype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026311_002D2415(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026309_002D2416(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<StorageType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<StorageType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026310_002D2417(), stype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new CastStorage(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Where : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Condition => operatorArguments.GetInput("condition");

			public Symbol X => operatorArguments.GetInput("x");

			public Symbol Y => operatorArguments.GetInput("y");

			internal Where(Arguments<Symbol> operatorArguments)
				: base("where", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Where CreateFromArguments(Arguments<Symbol> args)
			{
				return new Where(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Where(OperatorArguments.AddReplace(args));
			}

			public Where([Optional] [OptionalArgument] FSharpOption<Symbol> condition, [Optional] [OptionalArgument] FSharpOption<Symbol> x, [Optional] [OptionalArgument] FSharpOption<Symbol> y)
			{
				Symbol condition2 = Operators.DefaultArg<Symbol>(condition, (Symbol)new ImplicitVariable());
				Symbol x2 = Operators.DefaultArg<Symbol>(x, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(y, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("condition", OpArg<Symbol>.NewInput(condition2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("y", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public Where With([Optional] [OptionalArgument] FSharpOption<Symbol> condition, [Optional] [OptionalArgument] FSharpOption<Symbol> x, [Optional] [OptionalArgument] FSharpOption<Symbol> y)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026380_002D2418(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026377_002D2419(), condition), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026378_002D2420(), x), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026379_002D2421(), y), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new Where(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Diag : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int KDefault => 0;

			public static int Axis1Default => 0;

			public static int Axis2Default => 1;

			public Symbol Data => operatorArguments.GetInput("data");

			public int K => operatorArguments.GetParameter("k", KDefault);

			public int Axis1 => operatorArguments.GetParameter("axis1", Axis1Default);

			public int Axis2 => operatorArguments.GetParameter("axis2", Axis2Default);

			internal Diag(Arguments<Symbol> operatorArguments)
				: base("diag", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Diag CreateFromArguments(Arguments<Symbol> args)
			{
				return new Diag(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Diag(OperatorArguments.AddReplace(args));
			}

			public Diag([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> k, [Optional] [OptionalArgument] FSharpOption<int> axis1, [Optional] [OptionalArgument] FSharpOption<int> axis2)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004026454_002D2422(), k))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis1", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004026455_002D2423(), axis1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis2", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004026456_002D2424(), axis2))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Diag With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> k, [Optional] [OptionalArgument] FSharpOption<int> axis1, [Optional] [OptionalArgument] FSharpOption<int> axis2)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026491_002D2425(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026487_002D2426(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026488_002D2427(), k), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026489_002D2428(), axis1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026490_002D2429(), axis2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Diag(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Dot : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool TransposeADefault => false;

			public static bool TransposeBDefault => false;

			public static FSharpOption<StorageType> ForwardStypeDefault => null;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			public bool TransposeA => operatorArguments.GetParameter("transpose_a", TransposeADefault);

			public bool TransposeB => operatorArguments.GetParameter("transpose_b", TransposeBDefault);

			public FSharpOption<StorageType> ForwardStype => operatorArguments.GetParameter<FSharpOption<StorageType>>("forward_stype", ForwardStypeDefault);

			internal Dot(Arguments<Symbol> operatorArguments)
				: base("dot", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Dot CreateFromArguments(Arguments<Symbol> args)
			{
				return new Dot(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Dot(OperatorArguments.AddReplace(args));
			}

			public Dot([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<bool> transposeA, [Optional] [OptionalArgument] FSharpOption<bool> transposeB, [Optional] [OptionalArgument] FSharpOption<StorageType> forwardStype)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transpose_a", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004026561_002D2430(), transposeA))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transpose_b", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004026562_002D2431(), transposeB))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("forward_stype", OpArg<Symbol>.NewParameter(OptionModule.Map<StorageType, object>((FSharpFunc<StorageType, object>)new operatorArguments_004026563_002D2432(), forwardStype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))));
			}

			public Dot With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<bool> transposeA, [Optional] [OptionalArgument] FSharpOption<bool> transposeB, [Optional] [OptionalArgument] FSharpOption<StorageType> forwardStype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026603_002D2433(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026598_002D2434(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026599_002D2435(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026600_002D2436(), transposeA), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026601_002D2437(), transposeB), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<StorageType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<StorageType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026602_002D2438(), forwardStype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new Dot(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BatchDot : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool TransposeADefault => false;

			public static bool TransposeBDefault => false;

			public static FSharpOption<StorageType> ForwardStypeDefault => null;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			public bool TransposeA => operatorArguments.GetParameter("transpose_a", TransposeADefault);

			public bool TransposeB => operatorArguments.GetParameter("transpose_b", TransposeBDefault);

			public FSharpOption<StorageType> ForwardStype => operatorArguments.GetParameter<FSharpOption<StorageType>>("forward_stype", ForwardStypeDefault);

			internal BatchDot(Arguments<Symbol> operatorArguments)
				: base("batch_dot", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BatchDot CreateFromArguments(Arguments<Symbol> args)
			{
				return new BatchDot(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BatchDot(OperatorArguments.AddReplace(args));
			}

			public BatchDot([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<bool> transposeA, [Optional] [OptionalArgument] FSharpOption<bool> transposeB, [Optional] [OptionalArgument] FSharpOption<StorageType> forwardStype)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transpose_a", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004026640_002D2439(), transposeA))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transpose_b", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004026641_002D2440(), transposeB))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("forward_stype", OpArg<Symbol>.NewParameter(OptionModule.Map<StorageType, object>((FSharpFunc<StorageType, object>)new operatorArguments_004026642_002D2441(), forwardStype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))));
			}

			public BatchDot With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<bool> transposeA, [Optional] [OptionalArgument] FSharpOption<bool> transposeB, [Optional] [OptionalArgument] FSharpOption<StorageType> forwardStype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026682_002D2442(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026677_002D2443(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026678_002D2444(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026679_002D2445(), transposeA), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026680_002D2446(), transposeB), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<StorageType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<StorageType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026681_002D2447(), forwardStype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new BatchDot(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastAdd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastAdd(Arguments<Symbol> operatorArguments)
				: base("broadcast_add", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastAdd CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastAdd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastAdd(OperatorArguments.AddReplace(args));
			}

			public BroadcastAdd([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastAdd With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026740_002D2448(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026738_002D2449(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026739_002D2450(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastAdd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastSub : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastSub(Arguments<Symbol> operatorArguments)
				: base("broadcast_sub", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastSub CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastSub(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastSub(OperatorArguments.AddReplace(args));
			}

			public BroadcastSub([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastSub With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026798_002D2451(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026796_002D2452(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026797_002D2453(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastSub(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastMul : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastMul(Arguments<Symbol> operatorArguments)
				: base("broadcast_mul", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastMul CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastMul(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastMul(OperatorArguments.AddReplace(args));
			}

			public BroadcastMul([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastMul With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026850_002D2454(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026848_002D2455(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026849_002D2456(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastMul(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastDiv : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastDiv(Arguments<Symbol> operatorArguments)
				: base("broadcast_div", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastDiv CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastDiv(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastDiv(OperatorArguments.AddReplace(args));
			}

			public BroadcastDiv([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastDiv With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026902_002D2457(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026900_002D2458(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026901_002D2459(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastDiv(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastMod : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastMod(Arguments<Symbol> operatorArguments)
				: base("broadcast_mod", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastMod CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastMod(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastMod(OperatorArguments.AddReplace(args));
			}

			public BroadcastMod([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastMod With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026950_002D2460(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026948_002D2461(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026949_002D2462(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastMod(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastPower : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastPower(Arguments<Symbol> operatorArguments)
				: base("broadcast_power", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastPower CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastPower(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastPower(OperatorArguments.AddReplace(args));
			}

			public BroadcastPower([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastPower With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004026998_002D2463(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026996_002D2464(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004026997_002D2465(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastPower(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastMaximum : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastMaximum(Arguments<Symbol> operatorArguments)
				: base("broadcast_maximum", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastMaximum CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastMaximum(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastMaximum(OperatorArguments.AddReplace(args));
			}

			public BroadcastMaximum([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastMaximum With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027048_002D2466(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027046_002D2467(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027047_002D2468(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastMaximum(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastMinimum : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastMinimum(Arguments<Symbol> operatorArguments)
				: base("broadcast_minimum", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastMinimum CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastMinimum(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastMinimum(OperatorArguments.AddReplace(args));
			}

			public BroadcastMinimum([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastMinimum With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027098_002D2469(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027096_002D2470(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027097_002D2471(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastMinimum(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastHypot : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastHypot(Arguments<Symbol> operatorArguments)
				: base("broadcast_hypot", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastHypot CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastHypot(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastHypot(OperatorArguments.AddReplace(args));
			}

			public BroadcastHypot([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastHypot With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027154_002D2472(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027152_002D2473(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027153_002D2474(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastHypot(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastEqual : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastEqual(Arguments<Symbol> operatorArguments)
				: base("broadcast_equal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastEqual CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastEqual(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastEqual(OperatorArguments.AddReplace(args));
			}

			public BroadcastEqual([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastEqual With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027202_002D2475(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027200_002D2476(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027201_002D2477(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastEqual(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastNotEqual : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastNotEqual(Arguments<Symbol> operatorArguments)
				: base("broadcast_not_equal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastNotEqual CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastNotEqual(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastNotEqual(OperatorArguments.AddReplace(args));
			}

			public BroadcastNotEqual([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastNotEqual With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027250_002D2478(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027248_002D2479(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027249_002D2480(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastNotEqual(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastGreater : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastGreater(Arguments<Symbol> operatorArguments)
				: base("broadcast_greater", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastGreater CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastGreater(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastGreater(OperatorArguments.AddReplace(args));
			}

			public BroadcastGreater([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastGreater With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027298_002D2481(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027296_002D2482(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027297_002D2483(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastGreater(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastGreaterEqual : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastGreaterEqual(Arguments<Symbol> operatorArguments)
				: base("broadcast_greater_equal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastGreaterEqual CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastGreaterEqual(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastGreaterEqual(OperatorArguments.AddReplace(args));
			}

			public BroadcastGreaterEqual([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastGreaterEqual With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027346_002D2484(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027344_002D2485(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027345_002D2486(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastGreaterEqual(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastLesser : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastLesser(Arguments<Symbol> operatorArguments)
				: base("broadcast_lesser", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastLesser CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastLesser(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastLesser(OperatorArguments.AddReplace(args));
			}

			public BroadcastLesser([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastLesser With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027394_002D2487(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027392_002D2488(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027393_002D2489(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastLesser(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastLesserEqual : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastLesserEqual(Arguments<Symbol> operatorArguments)
				: base("broadcast_lesser_equal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastLesserEqual CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastLesserEqual(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastLesserEqual(OperatorArguments.AddReplace(args));
			}

			public BroadcastLesserEqual([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastLesserEqual With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027442_002D2490(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027440_002D2491(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027441_002D2492(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastLesserEqual(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastLogicalAnd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastLogicalAnd(Arguments<Symbol> operatorArguments)
				: base("broadcast_logical_and", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastLogicalAnd CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastLogicalAnd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastLogicalAnd(OperatorArguments.AddReplace(args));
			}

			public BroadcastLogicalAnd([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastLogicalAnd With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027490_002D2493(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027488_002D2494(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027489_002D2495(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastLogicalAnd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastLogicalOr : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastLogicalOr(Arguments<Symbol> operatorArguments)
				: base("broadcast_logical_or", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastLogicalOr CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastLogicalOr(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastLogicalOr(OperatorArguments.AddReplace(args));
			}

			public BroadcastLogicalOr([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastLogicalOr With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027538_002D2496(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027536_002D2497(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027537_002D2498(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastLogicalOr(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BroadcastLogicalXor : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal BroadcastLogicalXor(Arguments<Symbol> operatorArguments)
				: base("broadcast_logical_xor", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BroadcastLogicalXor CreateFromArguments(Arguments<Symbol> args)
			{
				return new BroadcastLogicalXor(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BroadcastLogicalXor(OperatorArguments.AddReplace(args));
			}

			public BroadcastLogicalXor([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BroadcastLogicalXor With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027586_002D2499(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027584_002D2500(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027585_002D2501(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BroadcastLogicalXor(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ElemwiseAdd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal ElemwiseAdd(Arguments<Symbol> operatorArguments)
				: base("elemwise_add", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ElemwiseAdd CreateFromArguments(Arguments<Symbol> args)
			{
				return new ElemwiseAdd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ElemwiseAdd(OperatorArguments.AddReplace(args));
			}

			public ElemwiseAdd([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public ElemwiseAdd With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027631_002D2502(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027629_002D2503(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027630_002D2504(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ElemwiseAdd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class GradAdd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal GradAdd(Arguments<Symbol> operatorArguments)
				: base("_grad_add", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static GradAdd CreateFromArguments(Arguments<Symbol> args)
			{
				return new GradAdd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new GradAdd(OperatorArguments.AddReplace(args));
			}

			public GradAdd([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public GradAdd With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027663_002D2505(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027661_002D2506(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027662_002D2507(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new GradAdd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ElemwiseSub : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal ElemwiseSub(Arguments<Symbol> operatorArguments)
				: base("elemwise_sub", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ElemwiseSub CreateFromArguments(Arguments<Symbol> args)
			{
				return new ElemwiseSub(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ElemwiseSub(OperatorArguments.AddReplace(args));
			}

			public ElemwiseSub([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public ElemwiseSub With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027708_002D2508(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027706_002D2509(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027707_002D2510(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ElemwiseSub(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ElemwiseMul : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal ElemwiseMul(Arguments<Symbol> operatorArguments)
				: base("elemwise_mul", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ElemwiseMul CreateFromArguments(Arguments<Symbol> args)
			{
				return new ElemwiseMul(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ElemwiseMul(OperatorArguments.AddReplace(args));
			}

			public ElemwiseMul([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public ElemwiseMul With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027752_002D2511(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027750_002D2512(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027751_002D2513(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ElemwiseMul(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ElemwiseDiv : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal ElemwiseDiv(Arguments<Symbol> operatorArguments)
				: base("elemwise_div", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ElemwiseDiv CreateFromArguments(Arguments<Symbol> args)
			{
				return new ElemwiseDiv(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ElemwiseDiv(OperatorArguments.AddReplace(args));
			}

			public ElemwiseDiv([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public ElemwiseDiv With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027789_002D2514(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027787_002D2515(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027788_002D2516(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ElemwiseDiv(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Mod : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal Mod(Arguments<Symbol> operatorArguments)
				: base("_mod", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Mod CreateFromArguments(Arguments<Symbol> args)
			{
				return new Mod(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Mod(OperatorArguments.AddReplace(args));
			}

			public Mod([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public Mod With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027821_002D2517(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027819_002D2518(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027820_002D2519(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Mod(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Power : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal Power(Arguments<Symbol> operatorArguments)
				: base("_power", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Power CreateFromArguments(Arguments<Symbol> args)
			{
				return new Power(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Power(OperatorArguments.AddReplace(args));
			}

			public Power([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public Power With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027853_002D2520(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027851_002D2521(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027852_002D2522(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Power(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Maximum : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal Maximum(Arguments<Symbol> operatorArguments)
				: base("_maximum", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Maximum CreateFromArguments(Arguments<Symbol> args)
			{
				return new Maximum(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Maximum(OperatorArguments.AddReplace(args));
			}

			public Maximum([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public Maximum With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027885_002D2523(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027883_002D2524(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027884_002D2525(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Maximum(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Minimum : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal Minimum(Arguments<Symbol> operatorArguments)
				: base("_minimum", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Minimum CreateFromArguments(Arguments<Symbol> args)
			{
				return new Minimum(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Minimum(OperatorArguments.AddReplace(args));
			}

			public Minimum([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public Minimum With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027917_002D2526(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027915_002D2527(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027916_002D2528(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Minimum(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Hypot : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal Hypot(Arguments<Symbol> operatorArguments)
				: base("_hypot", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Hypot CreateFromArguments(Arguments<Symbol> args)
			{
				return new Hypot(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Hypot(OperatorArguments.AddReplace(args));
			}

			public Hypot([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public Hypot With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027954_002D2529(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027952_002D2530(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027953_002D2531(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Hypot(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Equal : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal Equal(Arguments<Symbol> operatorArguments)
				: base("_equal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Equal CreateFromArguments(Arguments<Symbol> args)
			{
				return new Equal(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Equal(OperatorArguments.AddReplace(args));
			}

			public Equal([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public Equal With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004027986_002D2532(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027984_002D2533(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004027985_002D2534(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Equal(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NotEqual : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal NotEqual(Arguments<Symbol> operatorArguments)
				: base("_not_equal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NotEqual CreateFromArguments(Arguments<Symbol> args)
			{
				return new NotEqual(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NotEqual(OperatorArguments.AddReplace(args));
			}

			public NotEqual([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public NotEqual With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028018_002D2535(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028016_002D2536(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028017_002D2537(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NotEqual(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Greater : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal Greater(Arguments<Symbol> operatorArguments)
				: base("_greater", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Greater CreateFromArguments(Arguments<Symbol> args)
			{
				return new Greater(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Greater(OperatorArguments.AddReplace(args));
			}

			public Greater([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public Greater With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028050_002D2538(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028048_002D2539(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028049_002D2540(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Greater(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class GreaterEqual : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal GreaterEqual(Arguments<Symbol> operatorArguments)
				: base("_greater_equal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static GreaterEqual CreateFromArguments(Arguments<Symbol> args)
			{
				return new GreaterEqual(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new GreaterEqual(OperatorArguments.AddReplace(args));
			}

			public GreaterEqual([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public GreaterEqual With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028082_002D2541(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028080_002D2542(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028081_002D2543(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new GreaterEqual(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Lesser : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal Lesser(Arguments<Symbol> operatorArguments)
				: base("_lesser", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Lesser CreateFromArguments(Arguments<Symbol> args)
			{
				return new Lesser(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Lesser(OperatorArguments.AddReplace(args));
			}

			public Lesser([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public Lesser With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028114_002D2544(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028112_002D2545(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028113_002D2546(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Lesser(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LesserEqual : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal LesserEqual(Arguments<Symbol> operatorArguments)
				: base("_lesser_equal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LesserEqual CreateFromArguments(Arguments<Symbol> args)
			{
				return new LesserEqual(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LesserEqual(OperatorArguments.AddReplace(args));
			}

			public LesserEqual([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public LesserEqual With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028146_002D2547(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028144_002D2548(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028145_002D2549(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new LesserEqual(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LogicalAnd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal LogicalAnd(Arguments<Symbol> operatorArguments)
				: base("_logical_and", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LogicalAnd CreateFromArguments(Arguments<Symbol> args)
			{
				return new LogicalAnd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LogicalAnd(OperatorArguments.AddReplace(args));
			}

			public LogicalAnd([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public LogicalAnd With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028178_002D2550(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028176_002D2551(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028177_002D2552(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new LogicalAnd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LogicalOr : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal LogicalOr(Arguments<Symbol> operatorArguments)
				: base("_logical_or", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LogicalOr CreateFromArguments(Arguments<Symbol> args)
			{
				return new LogicalOr(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LogicalOr(OperatorArguments.AddReplace(args));
			}

			public LogicalOr([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public LogicalOr With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028210_002D2553(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028208_002D2554(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028209_002D2555(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new LogicalOr(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LogicalXor : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal LogicalXor(Arguments<Symbol> operatorArguments)
				: base("_logical_xor", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LogicalXor CreateFromArguments(Arguments<Symbol> args)
			{
				return new LogicalXor(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LogicalXor(OperatorArguments.AddReplace(args));
			}

			public LogicalXor([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public LogicalXor With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028242_002D2556(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028240_002D2557(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028241_002D2558(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new LogicalXor(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class PlusScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal PlusScalar(Arguments<Symbol> operatorArguments)
				: base("_plus_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static PlusScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new PlusScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new PlusScalar(OperatorArguments.AddReplace(args));
			}

			public PlusScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public PlusScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public PlusScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028283_002D2559(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028281_002D2560(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028282_002D2561(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new PlusScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MinusScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal MinusScalar(Arguments<Symbol> operatorArguments)
				: base("_minus_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MinusScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new MinusScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MinusScalar(OperatorArguments.AddReplace(args));
			}

			public MinusScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public MinusScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public MinusScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028324_002D2562(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028322_002D2563(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028323_002D2564(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new MinusScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RminusScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal RminusScalar(Arguments<Symbol> operatorArguments)
				: base("_rminus_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RminusScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new RminusScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RminusScalar(OperatorArguments.AddReplace(args));
			}

			public RminusScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public RminusScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public RminusScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028365_002D2565(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028363_002D2566(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028364_002D2567(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new RminusScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MulScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal MulScalar(Arguments<Symbol> operatorArguments)
				: base("_mul_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MulScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new MulScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MulScalar(OperatorArguments.AddReplace(args));
			}

			public MulScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public MulScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public MulScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028428_002D2568(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028426_002D2569(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028427_002D2570(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new MulScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class DivScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal DivScalar(Arguments<Symbol> operatorArguments)
				: base("_div_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static DivScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new DivScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new DivScalar(OperatorArguments.AddReplace(args));
			}

			public DivScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public DivScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public DivScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028491_002D2571(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028489_002D2572(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028490_002D2573(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new DivScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RdivScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal RdivScalar(Arguments<Symbol> operatorArguments)
				: base("_rdiv_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RdivScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new RdivScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RdivScalar(OperatorArguments.AddReplace(args));
			}

			public RdivScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public RdivScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public RdivScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028532_002D2574(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028530_002D2575(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028531_002D2576(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new RdivScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ModScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal ModScalar(Arguments<Symbol> operatorArguments)
				: base("_mod_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ModScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new ModScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ModScalar(OperatorArguments.AddReplace(args));
			}

			public ModScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ModScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ModScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028573_002D2577(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028571_002D2578(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028572_002D2579(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ModScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RmodScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal RmodScalar(Arguments<Symbol> operatorArguments)
				: base("_rmod_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RmodScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new RmodScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RmodScalar(OperatorArguments.AddReplace(args));
			}

			public RmodScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public RmodScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public RmodScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028614_002D2580(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028612_002D2581(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028613_002D2582(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new RmodScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MaximumScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal MaximumScalar(Arguments<Symbol> operatorArguments)
				: base("_maximum_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MaximumScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new MaximumScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MaximumScalar(OperatorArguments.AddReplace(args));
			}

			public MaximumScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public MaximumScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public MaximumScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028655_002D2583(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028653_002D2584(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028654_002D2585(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new MaximumScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MinimumScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal MinimumScalar(Arguments<Symbol> operatorArguments)
				: base("_minimum_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MinimumScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new MinimumScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MinimumScalar(OperatorArguments.AddReplace(args));
			}

			public MinimumScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public MinimumScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public MinimumScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028696_002D2586(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028694_002D2587(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028695_002D2588(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new MinimumScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class PowerScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal PowerScalar(Arguments<Symbol> operatorArguments)
				: base("_power_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static PowerScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new PowerScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new PowerScalar(OperatorArguments.AddReplace(args));
			}

			public PowerScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public PowerScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public PowerScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028737_002D2589(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028735_002D2590(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028736_002D2591(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new PowerScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RpowerScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal RpowerScalar(Arguments<Symbol> operatorArguments)
				: base("_rpower_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RpowerScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new RpowerScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RpowerScalar(OperatorArguments.AddReplace(args));
			}

			public RpowerScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public RpowerScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public RpowerScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028778_002D2592(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028776_002D2593(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028777_002D2594(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new RpowerScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class HypotScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal HypotScalar(Arguments<Symbol> operatorArguments)
				: base("_hypot_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static HypotScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new HypotScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new HypotScalar(OperatorArguments.AddReplace(args));
			}

			public HypotScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public HypotScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public HypotScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028819_002D2595(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028817_002D2596(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028818_002D2597(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new HypotScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SmoothL1 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal SmoothL1(Arguments<Symbol> operatorArguments)
				: base("smooth_l1", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SmoothL1 CreateFromArguments(Arguments<Symbol> args)
			{
				return new SmoothL1(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SmoothL1(OperatorArguments.AddReplace(args));
			}

			public SmoothL1(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public SmoothL1(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public SmoothL1 With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028900_002D2598(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028898_002D2599(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028899_002D2600(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new SmoothL1(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class EqualScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal EqualScalar(Arguments<Symbol> operatorArguments)
				: base("_equal_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static EqualScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new EqualScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new EqualScalar(OperatorArguments.AddReplace(args));
			}

			public EqualScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public EqualScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public EqualScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028941_002D2601(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028939_002D2602(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028940_002D2603(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new EqualScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class NotEqualScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal NotEqualScalar(Arguments<Symbol> operatorArguments)
				: base("_not_equal_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static NotEqualScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new NotEqualScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new NotEqualScalar(OperatorArguments.AddReplace(args));
			}

			public NotEqualScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NotEqualScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public NotEqualScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004028982_002D2604(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028980_002D2605(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004028981_002D2606(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new NotEqualScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class GreaterScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal GreaterScalar(Arguments<Symbol> operatorArguments)
				: base("_greater_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static GreaterScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new GreaterScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new GreaterScalar(OperatorArguments.AddReplace(args));
			}

			public GreaterScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public GreaterScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public GreaterScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029023_002D2607(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029021_002D2608(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029022_002D2609(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new GreaterScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class GreaterEqualScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal GreaterEqualScalar(Arguments<Symbol> operatorArguments)
				: base("_greater_equal_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static GreaterEqualScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new GreaterEqualScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new GreaterEqualScalar(OperatorArguments.AddReplace(args));
			}

			public GreaterEqualScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public GreaterEqualScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public GreaterEqualScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029064_002D2610(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029062_002D2611(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029063_002D2612(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new GreaterEqualScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LesserScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal LesserScalar(Arguments<Symbol> operatorArguments)
				: base("_lesser_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LesserScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new LesserScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LesserScalar(OperatorArguments.AddReplace(args));
			}

			public LesserScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public LesserScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public LesserScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029105_002D2613(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029103_002D2614(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029104_002D2615(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new LesserScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LesserEqualScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal LesserEqualScalar(Arguments<Symbol> operatorArguments)
				: base("_lesser_equal_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LesserEqualScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new LesserEqualScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LesserEqualScalar(OperatorArguments.AddReplace(args));
			}

			public LesserEqualScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public LesserEqualScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public LesserEqualScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029146_002D2616(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029144_002D2617(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029145_002D2618(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new LesserEqualScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LogicalAndScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal LogicalAndScalar(Arguments<Symbol> operatorArguments)
				: base("_logical_and_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LogicalAndScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new LogicalAndScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LogicalAndScalar(OperatorArguments.AddReplace(args));
			}

			public LogicalAndScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public LogicalAndScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public LogicalAndScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029187_002D2619(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029185_002D2620(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029186_002D2621(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new LogicalAndScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LogicalOrScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal LogicalOrScalar(Arguments<Symbol> operatorArguments)
				: base("_logical_or_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LogicalOrScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new LogicalOrScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LogicalOrScalar(OperatorArguments.AddReplace(args));
			}

			public LogicalOrScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public LogicalOrScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public LogicalOrScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029228_002D2622(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029226_002D2623(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029227_002D2624(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new LogicalOrScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LogicalXorScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal LogicalXorScalar(Arguments<Symbol> operatorArguments)
				: base("_logical_xor_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LogicalXorScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new LogicalXorScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LogicalXorScalar(OperatorArguments.AddReplace(args));
			}

			public LogicalXorScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public LogicalXorScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public LogicalXorScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029269_002D2625(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029267_002D2626(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029268_002D2627(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new LogicalXorScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ScatterElemwiseDiv : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal ScatterElemwiseDiv(Arguments<Symbol> operatorArguments)
				: base("_scatter_elemwise_div", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ScatterElemwiseDiv CreateFromArguments(Arguments<Symbol> args)
			{
				return new ScatterElemwiseDiv(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ScatterElemwiseDiv(OperatorArguments.AddReplace(args));
			}

			public ScatterElemwiseDiv([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public ScatterElemwiseDiv With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029314_002D2628(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029312_002D2629(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029313_002D2630(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ScatterElemwiseDiv(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ScatterPlusScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal ScatterPlusScalar(Arguments<Symbol> operatorArguments)
				: base("_scatter_plus_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ScatterPlusScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new ScatterPlusScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ScatterPlusScalar(OperatorArguments.AddReplace(args));
			}

			public ScatterPlusScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ScatterPlusScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ScatterPlusScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029379_002D2631(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029377_002D2632(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029378_002D2633(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ScatterPlusScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ScatterMinusScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Scalar
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("scalar");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter scalar is missing"));
				}
			}

			internal ScatterMinusScalar(Arguments<Symbol> operatorArguments)
				: base("_scatter_minus_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ScatterMinusScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new ScatterMinusScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ScatterMinusScalar(OperatorArguments.AddReplace(args));
			}

			public ScatterMinusScalar(Symbol data, double scalar)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ScatterMinusScalar(double scalar, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ScatterMinusScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029444_002D2634(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029442_002D2635(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029443_002D2636(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ScatterMinusScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class AddN : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol[] Args => operatorArguments.GetVarArg("args");

			internal AddN(Arguments<Symbol> operatorArguments)
				: base("add_n", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static AddN CreateFromArguments(Arguments<Symbol> args)
			{
				return new AddN(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new AddN(OperatorArguments.AddReplace(args));
			}

			public AddN(params Symbol[] args)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("args", OpArg<Symbol>.NewVarArg("num_args", args)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public AddN With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> args)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029483_002D2637(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029482_002D2638(), args), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new AddN(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Relu : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Relu(Arguments<Symbol> operatorArguments)
				: base("relu", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Relu CreateFromArguments(Arguments<Symbol> args)
			{
				return new Relu(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Relu(OperatorArguments.AddReplace(args));
			}

			public Relu([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Relu With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029520_002D2639(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029519_002D2640(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Relu(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Sigmoid : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Sigmoid(Arguments<Symbol> operatorArguments)
				: base("sigmoid", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Sigmoid CreateFromArguments(Arguments<Symbol> args)
			{
				return new Sigmoid(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Sigmoid(OperatorArguments.AddReplace(args));
			}

			public Sigmoid([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Sigmoid With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029553_002D2641(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029552_002D2642(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Sigmoid(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class HardSigmoid : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double AlphaDefault => 0.2;

			public static double BetaDefault => 0.5;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Alpha => operatorArguments.GetParameter("alpha", AlphaDefault);

			public double Beta => operatorArguments.GetParameter("beta", BetaDefault);

			internal HardSigmoid(Arguments<Symbol> operatorArguments)
				: base("hard_sigmoid", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static HardSigmoid CreateFromArguments(Arguments<Symbol> args)
			{
				return new HardSigmoid(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new HardSigmoid(OperatorArguments.AddReplace(args));
			}

			public HardSigmoid([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<double> beta)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004029578_002D2643(), alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004029579_002D2644(), beta))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public HardSigmoid With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<double> beta)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029606_002D2645(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029603_002D2646(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029604_002D2647(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029605_002D2648(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new HardSigmoid(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Softsign : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Softsign(Arguments<Symbol> operatorArguments)
				: base("softsign", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Softsign CreateFromArguments(Arguments<Symbol> args)
			{
				return new Softsign(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Softsign(OperatorArguments.AddReplace(args));
			}

			public Softsign([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Softsign With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029639_002D2649(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029638_002D2650(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Softsign(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Copy : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Copy(Arguments<Symbol> operatorArguments)
				: base("_copy", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Copy CreateFromArguments(Arguments<Symbol> args)
			{
				return new Copy(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Copy(OperatorArguments.AddReplace(args));
			}

			public Copy([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Copy With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029665_002D2651(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029664_002D2652(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Copy(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BlockGrad : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal BlockGrad(Arguments<Symbol> operatorArguments)
				: base("BlockGrad", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BlockGrad CreateFromArguments(Arguments<Symbol> args)
			{
				return new BlockGrad(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BlockGrad(OperatorArguments.AddReplace(args));
			}

			public BlockGrad([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public BlockGrad With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029716_002D2653(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029715_002D2654(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new BlockGrad(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class IdentityWithAttrLikeRhs : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			internal IdentityWithAttrLikeRhs(Arguments<Symbol> operatorArguments)
				: base("_identity_with_attr_like_rhs", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static IdentityWithAttrLikeRhs CreateFromArguments(Arguments<Symbol> args)
			{
				return new IdentityWithAttrLikeRhs(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new IdentityWithAttrLikeRhs(OperatorArguments.AddReplace(args));
			}

			public IdentityWithAttrLikeRhs([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public IdentityWithAttrLikeRhs With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029748_002D2655(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029746_002D2656(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029747_002D2657(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new IdentityWithAttrLikeRhs(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ReshapeLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> LhsBeginDefault => null;

			public static FSharpOption<int> LhsEndDefault => null;

			public static FSharpOption<int> RhsBeginDefault => null;

			public static FSharpOption<int> RhsEndDefault => null;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			public FSharpOption<int> LhsBegin => operatorArguments.GetParameter<FSharpOption<int>>("lhs_begin", LhsBeginDefault);

			public FSharpOption<int> LhsEnd => operatorArguments.GetParameter<FSharpOption<int>>("lhs_end", LhsEndDefault);

			public FSharpOption<int> RhsBegin => operatorArguments.GetParameter<FSharpOption<int>>("rhs_begin", RhsBeginDefault);

			public FSharpOption<int> RhsEnd => operatorArguments.GetParameter<FSharpOption<int>>("rhs_end", RhsEndDefault);

			internal ReshapeLike(Arguments<Symbol> operatorArguments)
				: base("reshape_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ReshapeLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new ReshapeLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ReshapeLike(OperatorArguments.AddReplace(args));
			}

			public ReshapeLike([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<int> lhsBegin, [Optional] [OptionalArgument] FSharpOption<int> lhsEnd, [Optional] [OptionalArgument] FSharpOption<int> rhsBegin, [Optional] [OptionalArgument] FSharpOption<int> rhsEnd)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs_begin", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004029801_002D2658(), lhsBegin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs_end", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004029802_002D2659(), lhsEnd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs_begin", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004029803_002D2660(), rhsBegin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs_end", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004029804_002D2661(), rhsEnd))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public ReshapeLike With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<int> lhsBegin, [Optional] [OptionalArgument] FSharpOption<int> lhsEnd, [Optional] [OptionalArgument] FSharpOption<int> rhsBegin, [Optional] [OptionalArgument] FSharpOption<int> rhsEnd)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029852_002D2662(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029846_002D2663(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029847_002D2664(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029848_002D2665(), lhsBegin), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029849_002D2666(), lhsEnd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029850_002D2667(), rhsBegin), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029851_002D2668(), rhsEnd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new ReshapeLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ShapeArray : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal ShapeArray(Arguments<Symbol> operatorArguments)
				: base("shape_array", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ShapeArray CreateFromArguments(Arguments<Symbol> args)
			{
				return new ShapeArray(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ShapeArray(OperatorArguments.AddReplace(args));
			}

			public ShapeArray([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public ShapeArray With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029884_002D2669(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029883_002D2670(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new ShapeArray(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SizeArray : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal SizeArray(Arguments<Symbol> operatorArguments)
				: base("size_array", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SizeArray CreateFromArguments(Arguments<Symbol> args)
			{
				return new SizeArray(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SizeArray(OperatorArguments.AddReplace(args));
			}

			public SizeArray([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public SizeArray With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029916_002D2671(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029915_002D2672(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new SizeArray(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Cast : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public DataType Dtype
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("dtype");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return IntrinsicFunctions.UnboxGeneric<DataType>(v);
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<DataType, DataType>((PrintfFormat<DataType, Unit, string, DataType>)(object)new PrintfFormat<DataType, Unit, string, DataType, Unit>("Required parameter dtype is missing"));
				}
			}

			internal Cast(Arguments<Symbol> operatorArguments)
				: base("Cast", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Cast CreateFromArguments(Arguments<Symbol> args)
			{
				return new Cast(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Cast(OperatorArguments.AddReplace(args));
			}

			public Cast(Symbol data, DataType dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Cast(DataType dtype, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Cast With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004029983_002D2673(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029981_002D2674(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004029982_002D2675(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Cast(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Negative : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Negative(Arguments<Symbol> operatorArguments)
				: base("negative", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Negative CreateFromArguments(Arguments<Symbol> args)
			{
				return new Negative(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Negative(OperatorArguments.AddReplace(args));
			}

			public Negative([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Negative With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030015_002D2676(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030014_002D2677(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Negative(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Abs : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Abs(Arguments<Symbol> operatorArguments)
				: base("abs", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Abs CreateFromArguments(Arguments<Symbol> args)
			{
				return new Abs(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Abs(OperatorArguments.AddReplace(args));
			}

			public Abs([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Abs With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030053_002D2678(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030052_002D2679(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Abs(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Sign : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Sign(Arguments<Symbol> operatorArguments)
				: base("sign", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Sign CreateFromArguments(Arguments<Symbol> args)
			{
				return new Sign(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Sign(OperatorArguments.AddReplace(args));
			}

			public Sign([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Sign With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030091_002D2680(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030090_002D2681(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Sign(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Round : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Round(Arguments<Symbol> operatorArguments)
				: base("round", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Round CreateFromArguments(Arguments<Symbol> args)
			{
				return new Round(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Round(OperatorArguments.AddReplace(args));
			}

			public Round([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Round With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030129_002D2682(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030128_002D2683(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Round(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Rint : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Rint(Arguments<Symbol> operatorArguments)
				: base("rint", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Rint CreateFromArguments(Arguments<Symbol> args)
			{
				return new Rint(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Rint(OperatorArguments.AddReplace(args));
			}

			public Rint([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Rint With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030171_002D2684(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030170_002D2685(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Rint(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Ceil : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Ceil(Arguments<Symbol> operatorArguments)
				: base("ceil", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Ceil CreateFromArguments(Arguments<Symbol> args)
			{
				return new Ceil(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Ceil(OperatorArguments.AddReplace(args));
			}

			public Ceil([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Ceil With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030211_002D2686(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030210_002D2687(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Ceil(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Floor : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Floor(Arguments<Symbol> operatorArguments)
				: base("floor", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Floor CreateFromArguments(Arguments<Symbol> args)
			{
				return new Floor(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Floor(OperatorArguments.AddReplace(args));
			}

			public Floor([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Floor With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030251_002D2688(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030250_002D2689(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Floor(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Trunc : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Trunc(Arguments<Symbol> operatorArguments)
				: base("trunc", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Trunc CreateFromArguments(Arguments<Symbol> args)
			{
				return new Trunc(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Trunc(OperatorArguments.AddReplace(args));
			}

			public Trunc([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Trunc With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030292_002D2690(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030291_002D2691(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Trunc(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Fix : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Fix(Arguments<Symbol> operatorArguments)
				: base("fix", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Fix CreateFromArguments(Arguments<Symbol> args)
			{
				return new Fix(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Fix(OperatorArguments.AddReplace(args));
			}

			public Fix([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Fix With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030331_002D2692(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030330_002D2693(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Fix(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Erf : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Erf(Arguments<Symbol> operatorArguments)
				: base("erf", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Erf CreateFromArguments(Arguments<Symbol> args)
			{
				return new Erf(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Erf(OperatorArguments.AddReplace(args));
			}

			public Erf([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Erf With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030363_002D2694(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030362_002D2695(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Erf(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Erfinv : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Erfinv(Arguments<Symbol> operatorArguments)
				: base("erfinv", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Erfinv CreateFromArguments(Arguments<Symbol> args)
			{
				return new Erfinv(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Erfinv(OperatorArguments.AddReplace(args));
			}

			public Erfinv([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Erfinv With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030395_002D2696(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030394_002D2697(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Erfinv(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Gamma : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Gamma(Arguments<Symbol> operatorArguments)
				: base("gamma", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Gamma CreateFromArguments(Arguments<Symbol> args)
			{
				return new Gamma(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Gamma(OperatorArguments.AddReplace(args));
			}

			public Gamma([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Gamma With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030424_002D2698(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030423_002D2699(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Gamma(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Gammaln : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Gammaln(Arguments<Symbol> operatorArguments)
				: base("gammaln", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Gammaln CreateFromArguments(Arguments<Symbol> args)
			{
				return new Gammaln(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Gammaln(OperatorArguments.AddReplace(args));
			}

			public Gammaln([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Gammaln With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030453_002D2700(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030452_002D2701(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Gammaln(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LogicalNot : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal LogicalNot(Arguments<Symbol> operatorArguments)
				: base("logical_not", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LogicalNot CreateFromArguments(Arguments<Symbol> args)
			{
				return new LogicalNot(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LogicalNot(OperatorArguments.AddReplace(args));
			}

			public LogicalNot([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public LogicalNot With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030482_002D2702(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030481_002D2703(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new LogicalNot(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Exp : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Exp(Arguments<Symbol> operatorArguments)
				: base("exp", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Exp CreateFromArguments(Arguments<Symbol> args)
			{
				return new Exp(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Exp(OperatorArguments.AddReplace(args));
			}

			public Exp([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Exp With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030519_002D2704(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030518_002D2705(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Exp(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Log : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Log(Arguments<Symbol> operatorArguments)
				: base("log", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Log CreateFromArguments(Arguments<Symbol> args)
			{
				return new Log(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Log(OperatorArguments.AddReplace(args));
			}

			public Log([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Log With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030551_002D2706(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030550_002D2707(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Log(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Log10 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Log10(Arguments<Symbol> operatorArguments)
				: base("log10", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Log10 CreateFromArguments(Arguments<Symbol> args)
			{
				return new Log10(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Log10(OperatorArguments.AddReplace(args));
			}

			public Log10([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Log10 With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030583_002D2708(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030582_002D2709(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Log10(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Log2 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Log2(Arguments<Symbol> operatorArguments)
				: base("log2", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Log2 CreateFromArguments(Arguments<Symbol> args)
			{
				return new Log2(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Log2(OperatorArguments.AddReplace(args));
			}

			public Log2([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Log2 With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030615_002D2710(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030614_002D2711(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Log2(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Log1p : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Log1p(Arguments<Symbol> operatorArguments)
				: base("log1p", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Log1p CreateFromArguments(Arguments<Symbol> args)
			{
				return new Log1p(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Log1p(OperatorArguments.AddReplace(args));
			}

			public Log1p([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Log1p With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030652_002D2712(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030651_002D2713(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Log1p(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Expm1 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Expm1(Arguments<Symbol> operatorArguments)
				: base("expm1", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Expm1 CreateFromArguments(Arguments<Symbol> args)
			{
				return new Expm1(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Expm1(OperatorArguments.AddReplace(args));
			}

			public Expm1([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Expm1 With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030688_002D2714(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030687_002D2715(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Expm1(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Reciprocal : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Reciprocal(Arguments<Symbol> operatorArguments)
				: base("reciprocal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Reciprocal CreateFromArguments(Arguments<Symbol> args)
			{
				return new Reciprocal(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Reciprocal(OperatorArguments.AddReplace(args));
			}

			public Reciprocal([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Reciprocal With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030722_002D2716(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030721_002D2717(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Reciprocal(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Square : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Square(Arguments<Symbol> operatorArguments)
				: base("square", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Square CreateFromArguments(Arguments<Symbol> args)
			{
				return new Square(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Square(OperatorArguments.AddReplace(args));
			}

			public Square([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Square With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030763_002D2718(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030762_002D2719(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Square(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Sqrt : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Sqrt(Arguments<Symbol> operatorArguments)
				: base("sqrt", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Sqrt CreateFromArguments(Arguments<Symbol> args)
			{
				return new Sqrt(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Sqrt(OperatorArguments.AddReplace(args));
			}

			public Sqrt([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Sqrt With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030804_002D2720(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030803_002D2721(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Sqrt(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Rsqrt : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Rsqrt(Arguments<Symbol> operatorArguments)
				: base("rsqrt", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Rsqrt CreateFromArguments(Arguments<Symbol> args)
			{
				return new Rsqrt(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Rsqrt(OperatorArguments.AddReplace(args));
			}

			public Rsqrt([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Rsqrt With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030841_002D2722(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030840_002D2723(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Rsqrt(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Cbrt : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Cbrt(Arguments<Symbol> operatorArguments)
				: base("cbrt", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Cbrt CreateFromArguments(Arguments<Symbol> args)
			{
				return new Cbrt(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Cbrt(OperatorArguments.AddReplace(args));
			}

			public Cbrt([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Cbrt With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030882_002D2724(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030881_002D2725(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Cbrt(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Rcbrt : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Rcbrt(Arguments<Symbol> operatorArguments)
				: base("rcbrt", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Rcbrt CreateFromArguments(Arguments<Symbol> args)
			{
				return new Rcbrt(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Rcbrt(OperatorArguments.AddReplace(args));
			}

			public Rcbrt([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Rcbrt With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030917_002D2726(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030916_002D2727(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Rcbrt(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Sin : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Sin(Arguments<Symbol> operatorArguments)
				: base("sin", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Sin CreateFromArguments(Arguments<Symbol> args)
			{
				return new Sin(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Sin(OperatorArguments.AddReplace(args));
			}

			public Sin([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Sin With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030956_002D2728(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030955_002D2729(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Sin(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Cos : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Cos(Arguments<Symbol> operatorArguments)
				: base("cos", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Cos CreateFromArguments(Arguments<Symbol> args)
			{
				return new Cos(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Cos(OperatorArguments.AddReplace(args));
			}

			public Cos([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Cos With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004030991_002D2730(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004030990_002D2731(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Cos(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Tan : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Tan(Arguments<Symbol> operatorArguments)
				: base("tan", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Tan CreateFromArguments(Arguments<Symbol> args)
			{
				return new Tan(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Tan(OperatorArguments.AddReplace(args));
			}

			public Tan([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Tan With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031030_002D2732(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031029_002D2733(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Tan(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Arcsin : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Arcsin(Arguments<Symbol> operatorArguments)
				: base("arcsin", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Arcsin CreateFromArguments(Arguments<Symbol> args)
			{
				return new Arcsin(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Arcsin(OperatorArguments.AddReplace(args));
			}

			public Arcsin([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Arcsin With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031070_002D2734(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031069_002D2735(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Arcsin(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Arccos : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Arccos(Arguments<Symbol> operatorArguments)
				: base("arccos", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Arccos CreateFromArguments(Arguments<Symbol> args)
			{
				return new Arccos(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Arccos(OperatorArguments.AddReplace(args));
			}

			public Arccos([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Arccos With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031106_002D2736(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031105_002D2737(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Arccos(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Arctan : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Arctan(Arguments<Symbol> operatorArguments)
				: base("arctan", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Arctan CreateFromArguments(Arguments<Symbol> args)
			{
				return new Arctan(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Arctan(OperatorArguments.AddReplace(args));
			}

			public Arctan([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Arctan With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031145_002D2738(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031144_002D2739(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Arctan(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Degrees : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Degrees(Arguments<Symbol> operatorArguments)
				: base("degrees", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Degrees CreateFromArguments(Arguments<Symbol> args)
			{
				return new Degrees(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Degrees(OperatorArguments.AddReplace(args));
			}

			public Degrees([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Degrees With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031182_002D2740(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031181_002D2741(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Degrees(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Radians : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Radians(Arguments<Symbol> operatorArguments)
				: base("radians", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Radians CreateFromArguments(Arguments<Symbol> args)
			{
				return new Radians(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Radians(OperatorArguments.AddReplace(args));
			}

			public Radians([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Radians With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031219_002D2742(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031218_002D2743(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Radians(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Sinh : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Sinh(Arguments<Symbol> operatorArguments)
				: base("sinh", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Sinh CreateFromArguments(Arguments<Symbol> args)
			{
				return new Sinh(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Sinh(OperatorArguments.AddReplace(args));
			}

			public Sinh([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Sinh With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031256_002D2744(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031255_002D2745(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Sinh(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Cosh : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Cosh(Arguments<Symbol> operatorArguments)
				: base("cosh", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Cosh CreateFromArguments(Arguments<Symbol> args)
			{
				return new Cosh(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Cosh(OperatorArguments.AddReplace(args));
			}

			public Cosh([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Cosh With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031289_002D2746(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031288_002D2747(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Cosh(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Tanh : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Tanh(Arguments<Symbol> operatorArguments)
				: base("tanh", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Tanh CreateFromArguments(Arguments<Symbol> args)
			{
				return new Tanh(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Tanh(OperatorArguments.AddReplace(args));
			}

			public Tanh([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Tanh With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031326_002D2748(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031325_002D2749(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Tanh(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Arcsinh : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Arcsinh(Arguments<Symbol> operatorArguments)
				: base("arcsinh", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Arcsinh CreateFromArguments(Arguments<Symbol> args)
			{
				return new Arcsinh(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Arcsinh(OperatorArguments.AddReplace(args));
			}

			public Arcsinh([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Arcsinh With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031361_002D2750(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031360_002D2751(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Arcsinh(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Arccosh : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Arccosh(Arguments<Symbol> operatorArguments)
				: base("arccosh", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Arccosh CreateFromArguments(Arguments<Symbol> args)
			{
				return new Arccosh(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Arccosh(OperatorArguments.AddReplace(args));
			}

			public Arccosh([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Arccosh With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031392_002D2752(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031391_002D2753(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Arccosh(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Arctanh : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal Arctanh(Arguments<Symbol> operatorArguments)
				: base("arctanh", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Arctanh CreateFromArguments(Arguments<Symbol> args)
			{
				return new Arctanh(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Arctanh(OperatorArguments.AddReplace(args));
			}

			public Arctanh([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public Arctanh With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031427_002D2754(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031426_002D2755(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new Arctanh(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Histogram : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> BinCntDefault => null;

			public static FSharpOption<int[]> RangeDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Bins => operatorArguments.GetInput("bins");

			public FSharpOption<int> BinCnt => operatorArguments.GetParameter<FSharpOption<int>>("bin_cnt", BinCntDefault);

			public FSharpOption<int[]> Range => operatorArguments.GetParameter<FSharpOption<int[]>>("range", RangeDefault);

			internal Histogram(Arguments<Symbol> operatorArguments)
				: base("_histogram", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Histogram CreateFromArguments(Arguments<Symbol> args)
			{
				return new Histogram(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Histogram(OperatorArguments.AddReplace(args));
			}

			public Histogram([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> bins, [Optional] [OptionalArgument] FSharpOption<int> binCnt, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> range)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(bins, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bins", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bin_cnt", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004031461_002D2756(), binCnt))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("range", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_004031462_002D2757(), range))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public Histogram With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> bins, [Optional] [OptionalArgument] FSharpOption<int> binCnt, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> range)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031494_002D2758(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031490_002D2759(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031491_002D2760(), bins), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031492_002D2761(), binCnt), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031493_002D2762(), range), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Histogram(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Embedding : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static DataType DtypeDefault => DataType.Float32;

			public static bool SparseGradDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Weight => operatorArguments.GetInput("weight");

			public int InputDim
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("input_dim");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter input_dim is missing"));
				}
			}

			public int OutputDim
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("output_dim");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter output_dim is missing"));
				}
			}

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			public bool SparseGrad => operatorArguments.GetParameter("sparse_grad", SparseGradDefault);

			internal Embedding(Arguments<Symbol> operatorArguments)
				: base("Embedding", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Embedding CreateFromArguments(Arguments<Symbol> args)
			{
				return new Embedding(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Embedding(OperatorArguments.AddReplace(args));
			}

			public Embedding(Symbol data, Symbol weight, int inputDim, int outputDim, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> sparseGrad)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)inputDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)outputDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004031573_002D2763(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sparse_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004031574_002D2764(), sparseGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public Embedding(int inputDim, int outputDim, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> sparseGrad)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)inputDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)outputDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004031651_002D2765(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sparse_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004031652_002D2766(), sparseGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public Embedding With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<int> inputDim, [Optional] [OptionalArgument] FSharpOption<int> outputDim, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> sparseGrad)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031694_002D2767(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031688_002D2768(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031689_002D2769(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031690_002D2770(), inputDim), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031691_002D2771(), outputDim), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031692_002D2772(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031693_002D2773(), sparseGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new Embedding(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribSparseEmbedding : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static DataType DtypeDefault => DataType.Float32;

			public static bool SparseGradDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Weight => operatorArguments.GetInput("weight");

			public int InputDim
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("input_dim");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter input_dim is missing"));
				}
			}

			public int OutputDim
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("output_dim");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter output_dim is missing"));
				}
			}

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			public bool SparseGrad => operatorArguments.GetParameter("sparse_grad", SparseGradDefault);

			internal ContribSparseEmbedding(Arguments<Symbol> operatorArguments)
				: base("_contrib_SparseEmbedding", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribSparseEmbedding CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribSparseEmbedding(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribSparseEmbedding(OperatorArguments.AddReplace(args));
			}

			public ContribSparseEmbedding(Symbol data, Symbol weight, int inputDim, int outputDim, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> sparseGrad)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)inputDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)outputDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004031771_002D2774(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sparse_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004031772_002D2775(), sparseGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public ContribSparseEmbedding(int inputDim, int outputDim, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> sparseGrad)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("input_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)inputDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)outputDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004031847_002D2776(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sparse_grad", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004031848_002D2777(), sparseGrad))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public ContribSparseEmbedding With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<int> inputDim, [Optional] [OptionalArgument] FSharpOption<int> outputDim, [Optional] [OptionalArgument] FSharpOption<DataType> dtype, [Optional] [OptionalArgument] FSharpOption<bool> sparseGrad)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031890_002D2778(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031884_002D2779(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031885_002D2780(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031886_002D2781(), inputDim), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031887_002D2782(), outputDim), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031888_002D2783(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031889_002D2784(), sparseGrad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new ContribSparseEmbedding(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Take : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int AxisDefault => 0;

			public static GeneratedArgumentTypes.TakeMode ModeDefault => GeneratedArgumentTypes.TakeMode.Clip;

			public Symbol A => operatorArguments.GetInput("a");

			public Symbol Indices => operatorArguments.GetInput("indices");

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			public GeneratedArgumentTypes.TakeMode Mode => operatorArguments.GetParameter("mode", ModeDefault);

			internal Take(Arguments<Symbol> operatorArguments)
				: base("take", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Take CreateFromArguments(Arguments<Symbol> args)
			{
				return new Take(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Take(OperatorArguments.AddReplace(args));
			}

			public Take([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> indices, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.TakeMode> mode)
			{
				Symbol a2 = Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(indices, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004031963_002D2785(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.TakeMode, object>((FSharpFunc<GeneratedArgumentTypes.TakeMode, object>)new operatorArguments_004031964_002D2786(), mode))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public Take With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> indices, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.TakeMode> mode)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004031996_002D2787(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031992_002D2788(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031993_002D2789(), indices), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031994_002D2790(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.TakeMode, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.TakeMode, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004031995_002D2791(), mode), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Take(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BatchTake : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("a");

			public Symbol Indices => operatorArguments.GetInput("indices");

			internal BatchTake(Arguments<Symbol> operatorArguments)
				: base("batch_take", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BatchTake CreateFromArguments(Arguments<Symbol> args)
			{
				return new BatchTake(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BatchTake(OperatorArguments.AddReplace(args));
			}

			public BatchTake([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> indices)
			{
				Symbol a2 = Operators.DefaultArg<Symbol>(a, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(indices, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(a2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public BatchTake With([Optional] [OptionalArgument] FSharpOption<Symbol> a, [Optional] [OptionalArgument] FSharpOption<Symbol> indices)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032050_002D2792(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032048_002D2793(), a), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032049_002D2794(), indices), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new BatchTake(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class OneHot : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double OnValueDefault => 1.0;

			public static double OffValueDefault => 0.0;

			public static DataType DtypeDefault => DataType.Float32;

			public Symbol Indices => operatorArguments.GetInput("indices");

			public int Depth
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("depth");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter depth is missing"));
				}
			}

			public double OnValue => operatorArguments.GetParameter("on_value", OnValueDefault);

			public double OffValue => operatorArguments.GetParameter("off_value", OffValueDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal OneHot(Arguments<Symbol> operatorArguments)
				: base("one_hot", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static OneHot CreateFromArguments(Arguments<Symbol> args)
			{
				return new OneHot(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new OneHot(OperatorArguments.AddReplace(args));
			}

			public OneHot(Symbol indices, int depth, [Optional] [OptionalArgument] FSharpOption<double> onValue, [Optional] [OptionalArgument] FSharpOption<double> offValue, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(indices)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("depth", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)depth))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("on_value", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004032106_002D2795(), onValue))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("off_value", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004032107_002D2796(), offValue))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004032108_002D2797(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public OneHot(int depth, [Optional] [OptionalArgument] FSharpOption<Symbol> indices, [Optional] [OptionalArgument] FSharpOption<double> onValue, [Optional] [OptionalArgument] FSharpOption<double> offValue, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(indices, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("depth", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)depth))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("on_value", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004032161_002D2798(), onValue))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("off_value", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004032162_002D2799(), offValue))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004032163_002D2800(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public OneHot With([Optional] [OptionalArgument] FSharpOption<Symbol> indices, [Optional] [OptionalArgument] FSharpOption<int> depth, [Optional] [OptionalArgument] FSharpOption<double> onValue, [Optional] [OptionalArgument] FSharpOption<double> offValue, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032203_002D2801(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032198_002D2802(), indices), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032199_002D2803(), depth), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032200_002D2804(), onValue), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032201_002D2805(), offValue), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032202_002D2806(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new OneHot(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class GatherNd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Indices => operatorArguments.GetInput("indices");

			internal GatherNd(Arguments<Symbol> operatorArguments)
				: base("gather_nd", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static GatherNd CreateFromArguments(Arguments<Symbol> args)
			{
				return new GatherNd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new GatherNd(OperatorArguments.AddReplace(args));
			}

			public GatherNd([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> indices)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(indices, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public GatherNd With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> indices)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032260_002D2807(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032258_002D2808(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032259_002D2809(), indices), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new GatherNd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ScatterNd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Indices => operatorArguments.GetInput("indices");

			public IEnumerable<int> Shape
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("shape");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter shape is missing"));
				}
			}

			internal ScatterNd(Arguments<Symbol> operatorArguments)
				: base("scatter_nd", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ScatterNd CreateFromArguments(Arguments<Symbol> args)
			{
				return new ScatterNd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ScatterNd(OperatorArguments.AddReplace(args));
			}

			public ScatterNd(Symbol data, Symbol indices, IEnumerable<int> shape)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(indices)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public ScatterNd(IEnumerable<int> shape, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> indices)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(indices, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public ScatterNd With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> indices, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032401_002D2810(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032398_002D2811(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032399_002D2812(), indices), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032400_002D2813(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new ScatterNd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ScatterSetNd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			public Symbol Indices => operatorArguments.GetInput("indices");

			public IEnumerable<int> Shape
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("shape");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter shape is missing"));
				}
			}

			internal ScatterSetNd(Arguments<Symbol> operatorArguments)
				: base("_scatter_set_nd", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ScatterSetNd CreateFromArguments(Arguments<Symbol> args)
			{
				return new ScatterSetNd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ScatterSetNd(OperatorArguments.AddReplace(args));
			}

			public ScatterSetNd(Symbol lhs, Symbol rhs, Symbol indices, IEnumerable<int> shape)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(rhs)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(indices)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public ScatterSetNd(IEnumerable<int> shape, [Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<Symbol> indices)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol rhs2 = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(indices, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(rhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public ScatterSetNd With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<Symbol> indices, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032498_002D2814(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032494_002D2815(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032495_002D2816(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032496_002D2817(), indices), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032497_002D2818(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new ScatterSetNd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ZerosWithoutDtype : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> ShapeDefault => null;

			public static int DtypeDefault => -1;

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			public int Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal ZerosWithoutDtype(Arguments<Symbol> operatorArguments)
				: base("_zeros_without_dtype", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ZerosWithoutDtype CreateFromArguments(Arguments<Symbol> args)
			{
				return new ZerosWithoutDtype(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ZerosWithoutDtype(OperatorArguments.AddReplace(args));
			}

			public ZerosWithoutDtype([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<int> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004032512_002D2819(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004032513_002D2820(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ZerosWithoutDtype With([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<int> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032535_002D2821(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032533_002D2822(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032534_002D2823(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ZerosWithoutDtype(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Zeros : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static DataType DtypeDefault => DataType.Float32;

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal Zeros(Arguments<Symbol> operatorArguments)
				: base("_zeros", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Zeros CreateFromArguments(Arguments<Symbol> args)
			{
				return new Zeros(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Zeros(OperatorArguments.AddReplace(args));
			}

			public Zeros([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004032549_002D2824(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004032550_002D2825(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Zeros With([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032572_002D2826(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032570_002D2827(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032571_002D2828(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Zeros(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Eye : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static long MDefault => 0L;

			public static long KDefault => 0L;

			public static DataType DtypeDefault => DataType.Float32;

			public long N
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("N");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (long)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<long, long>((PrintfFormat<long, Unit, string, long>)(object)new PrintfFormat<long, Unit, string, long, Unit>("Required parameter N is missing"));
				}
			}

			public long M => operatorArguments.GetParameter("M", MDefault);

			public long K => operatorArguments.GetParameter("k", KDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal Eye(Arguments<Symbol> operatorArguments)
				: base("_eye", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Eye CreateFromArguments(Arguments<Symbol> args)
			{
				return new Eye(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Eye(OperatorArguments.AddReplace(args));
			}

			public Eye(long N, [Optional] [OptionalArgument] FSharpOption<long> M, [Optional] [OptionalArgument] FSharpOption<long> k, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("N", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)N))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("M", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_004032591_002D2829(), M))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_004032592_002D2830(), k))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004032593_002D2831(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Eye With([Optional] [OptionalArgument] FSharpOption<long> N, [Optional] [OptionalArgument] FSharpOption<long> M, [Optional] [OptionalArgument] FSharpOption<long> k, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032628_002D2832(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032624_002D2833(), N), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032625_002D2834(), M), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032626_002D2835(), k), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032627_002D2836(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Eye(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Ones : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static DataType DtypeDefault => DataType.Float32;

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal Ones(Arguments<Symbol> operatorArguments)
				: base("_ones", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Ones CreateFromArguments(Arguments<Symbol> args)
			{
				return new Ones(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Ones(OperatorArguments.AddReplace(args));
			}

			public Ones([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004032642_002D2837(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004032643_002D2838(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Ones With([Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032665_002D2839(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032663_002D2840(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032664_002D2841(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Ones(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Full : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> ShapeDefault => null;

			public static DataType DtypeDefault => DataType.Float32;

			public double Value
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("value");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter value is missing"));
				}
			}

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal Full(Arguments<Symbol> operatorArguments)
				: base("_full", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Full CreateFromArguments(Arguments<Symbol> args)
			{
				return new Full(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Full(OperatorArguments.AddReplace(args));
			}

			public Full(double value, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("value", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)value))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004032682_002D2842(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004032683_002D2843(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public Full With([Optional] [OptionalArgument] FSharpOption<double> value, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032710_002D2844(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032707_002D2845(), value), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032708_002D2846(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032709_002D2847(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new Full(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Arange : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<double> StopDefault => null;

			public static double StepDefault => 1.0;

			public static int RepeatDefault => 1;

			public static bool InferRangeDefault => false;

			public static DataType DtypeDefault => DataType.Float32;

			public double Start
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("start");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter start is missing"));
				}
			}

			public FSharpOption<double> Stop => operatorArguments.GetParameter<FSharpOption<double>>("stop", StopDefault);

			public double Step => operatorArguments.GetParameter("step", StepDefault);

			public int Repeat => operatorArguments.GetParameter("repeat", RepeatDefault);

			public bool InferRange => operatorArguments.GetParameter("infer_range", InferRangeDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal Arange(Arguments<Symbol> operatorArguments)
				: base("_arange", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Arange CreateFromArguments(Arguments<Symbol> args)
			{
				return new Arange(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Arange(OperatorArguments.AddReplace(args));
			}

			public Arange(double start, [Optional] [OptionalArgument] FSharpOption<double> stop, [Optional] [OptionalArgument] FSharpOption<double> step, [Optional] [OptionalArgument] FSharpOption<int> repeat, [Optional] [OptionalArgument] FSharpOption<bool> inferRange, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("start", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)start))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stop", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004032733_002D2848(), stop))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004032734_002D2849(), step))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("repeat", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004032735_002D2850(), repeat))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("infer_range", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004032736_002D2851(), inferRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004032737_002D2852(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public Arange With([Optional] [OptionalArgument] FSharpOption<double> start, [Optional] [OptionalArgument] FSharpOption<double> stop, [Optional] [OptionalArgument] FSharpOption<double> step, [Optional] [OptionalArgument] FSharpOption<int> repeat, [Optional] [OptionalArgument] FSharpOption<bool> inferRange, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032788_002D2853(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032782_002D2854(), start), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032783_002D2855(), stop), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032784_002D2856(), step), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032785_002D2857(), repeat), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032786_002D2858(), inferRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032787_002D2859(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new Arange(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribArangeLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double StartDefault => 0.0;

			public static double StepDefault => 1.0;

			public static int RepeatDefault => 1;

			public static FSharpOption<int> AxisDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Start => operatorArguments.GetParameter("start", StartDefault);

			public double Step => operatorArguments.GetParameter("step", StepDefault);

			public int Repeat => operatorArguments.GetParameter("repeat", RepeatDefault);

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			internal ContribArangeLike(Arguments<Symbol> operatorArguments)
				: base("_contrib_arange_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribArangeLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribArangeLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribArangeLike(OperatorArguments.AddReplace(args));
			}

			public ContribArangeLike([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> start, [Optional] [OptionalArgument] FSharpOption<double> step, [Optional] [OptionalArgument] FSharpOption<int> repeat, [Optional] [OptionalArgument] FSharpOption<int> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("start", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004032832_002D2860(), start))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004032833_002D2861(), step))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("repeat", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004032834_002D2862(), repeat))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004032835_002D2863(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public ContribArangeLike With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> start, [Optional] [OptionalArgument] FSharpOption<double> step, [Optional] [OptionalArgument] FSharpOption<int> repeat, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032878_002D2864(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032873_002D2865(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032874_002D2866(), start), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032875_002D2867(), step), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032876_002D2868(), repeat), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032877_002D2869(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new ContribArangeLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Linspace : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<double> StopDefault => null;

			public static double StepDefault => 1.0;

			public static int RepeatDefault => 1;

			public static bool InferRangeDefault => false;

			public static DataType DtypeDefault => DataType.Float32;

			public double Start
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("start");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter start is missing"));
				}
			}

			public FSharpOption<double> Stop => operatorArguments.GetParameter<FSharpOption<double>>("stop", StopDefault);

			public double Step => operatorArguments.GetParameter("step", StepDefault);

			public int Repeat => operatorArguments.GetParameter("repeat", RepeatDefault);

			public bool InferRange => operatorArguments.GetParameter("infer_range", InferRangeDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal Linspace(Arguments<Symbol> operatorArguments)
				: base("_linspace", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Linspace CreateFromArguments(Arguments<Symbol> args)
			{
				return new Linspace(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Linspace(OperatorArguments.AddReplace(args));
			}

			public Linspace(double start, [Optional] [OptionalArgument] FSharpOption<double> stop, [Optional] [OptionalArgument] FSharpOption<double> step, [Optional] [OptionalArgument] FSharpOption<int> repeat, [Optional] [OptionalArgument] FSharpOption<bool> inferRange, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("start", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)start))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stop", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004032901_002D2870(), stop))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004032902_002D2871(), step))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("repeat", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004032903_002D2872(), repeat))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("infer_range", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004032904_002D2873(), inferRange))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004032905_002D2874(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public Linspace With([Optional] [OptionalArgument] FSharpOption<double> start, [Optional] [OptionalArgument] FSharpOption<double> stop, [Optional] [OptionalArgument] FSharpOption<double> step, [Optional] [OptionalArgument] FSharpOption<int> repeat, [Optional] [OptionalArgument] FSharpOption<bool> inferRange, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032956_002D2875(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032950_002D2876(), start), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032951_002D2877(), stop), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032952_002D2878(), step), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032953_002D2879(), repeat), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032954_002D2880(), inferRange), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032955_002D2881(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new Linspace(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ZerosLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal ZerosLike(Arguments<Symbol> operatorArguments)
				: base("zeros_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ZerosLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new ZerosLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ZerosLike(OperatorArguments.AddReplace(args));
			}

			public ZerosLike([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public ZerosLike With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004032997_002D2882(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004032996_002D2883(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new ZerosLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class OnesLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			internal OnesLike(Arguments<Symbol> operatorArguments)
				: base("ones_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static OnesLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new OnesLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new OnesLike(OperatorArguments.AddReplace(args));
			}

			public OnesLike([Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public OnesLike With([Optional] [OptionalArgument] FSharpOption<Symbol> data)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004033032_002D2884(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033031_002D2885(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new OnesLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgGemm : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool TransposeADefault => false;

			public static bool TransposeBDefault => false;

			public static double AlphaDefault => 1.0;

			public static double BetaDefault => 1.0;

			public static int AxisDefault => -2;

			public Symbol A => operatorArguments.GetInput("A");

			public Symbol B => operatorArguments.GetInput("B");

			public Symbol C => operatorArguments.GetInput("C");

			public bool TransposeA => operatorArguments.GetParameter("transpose_a", TransposeADefault);

			public bool TransposeB => operatorArguments.GetParameter("transpose_b", TransposeBDefault);

			public double Alpha => operatorArguments.GetParameter("alpha", AlphaDefault);

			public double Beta => operatorArguments.GetParameter("beta", BetaDefault);

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			internal LinalgGemm(Arguments<Symbol> operatorArguments)
				: base("_linalg_gemm", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgGemm CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgGemm(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgGemm(OperatorArguments.AddReplace(args));
			}

			public LinalgGemm([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<Symbol> B, [Optional] [OptionalArgument] FSharpOption<Symbol> C, [Optional] [OptionalArgument] FSharpOption<bool> transposeA, [Optional] [OptionalArgument] FSharpOption<bool> transposeB, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<double> beta, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				Symbol A2 = Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable());
				Symbol B2 = Operators.DefaultArg<Symbol>(B, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(C, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(A2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("B", OpArg<Symbol>.NewInput(B2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("C", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transpose_a", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004033113_002D2886(), transposeA))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transpose_b", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004033114_002D2887(), transposeB))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004033115_002D2888(), alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004033116_002D2889(), beta))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004033117_002D2890(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))));
			}

			public LinalgGemm With([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<Symbol> B, [Optional] [OptionalArgument] FSharpOption<Symbol> C, [Optional] [OptionalArgument] FSharpOption<bool> transposeA, [Optional] [OptionalArgument] FSharpOption<bool> transposeB, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<double> beta, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004033178_002D2891(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033170_002D2892(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033171_002D2893(), B), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033172_002D2894(), C), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033173_002D2895(), transposeA), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033174_002D2896(), transposeB), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033175_002D2897(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033176_002D2898(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033177_002D2899(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new LinalgGemm(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgGemm2 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool TransposeADefault => false;

			public static bool TransposeBDefault => false;

			public static double AlphaDefault => 1.0;

			public static int AxisDefault => -2;

			public Symbol A => operatorArguments.GetInput("A");

			public Symbol B => operatorArguments.GetInput("B");

			public bool TransposeA => operatorArguments.GetParameter("transpose_a", TransposeADefault);

			public bool TransposeB => operatorArguments.GetParameter("transpose_b", TransposeBDefault);

			public double Alpha => operatorArguments.GetParameter("alpha", AlphaDefault);

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			internal LinalgGemm2(Arguments<Symbol> operatorArguments)
				: base("_linalg_gemm2", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgGemm2 CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgGemm2(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgGemm2(OperatorArguments.AddReplace(args));
			}

			public LinalgGemm2([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<Symbol> B, [Optional] [OptionalArgument] FSharpOption<bool> transposeA, [Optional] [OptionalArgument] FSharpOption<bool> transposeB, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				Symbol A2 = Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(B, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(A2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("B", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transpose_a", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004033250_002D2900(), transposeA))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transpose_b", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004033251_002D2901(), transposeB))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004033252_002D2902(), alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004033253_002D2903(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public LinalgGemm2 With([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<Symbol> B, [Optional] [OptionalArgument] FSharpOption<bool> transposeA, [Optional] [OptionalArgument] FSharpOption<bool> transposeB, [Optional] [OptionalArgument] FSharpOption<double> alpha, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004033301_002D2904(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033295_002D2905(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033296_002D2906(), B), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033297_002D2907(), transposeA), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033298_002D2908(), transposeB), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033299_002D2909(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033300_002D2910(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new LinalgGemm2(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgPotrf : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("A");

			internal LinalgPotrf(Arguments<Symbol> operatorArguments)
				: base("_linalg_potrf", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgPotrf CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgPotrf(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgPotrf(OperatorArguments.AddReplace(args));
			}

			public LinalgPotrf([Optional] [OptionalArgument] FSharpOption<Symbol> A)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public LinalgPotrf With([Optional] [OptionalArgument] FSharpOption<Symbol> A)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004033351_002D2911(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033350_002D2912(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new LinalgPotrf(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgPotri : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("A");

			internal LinalgPotri(Arguments<Symbol> operatorArguments)
				: base("_linalg_potri", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgPotri CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgPotri(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgPotri(OperatorArguments.AddReplace(args));
			}

			public LinalgPotri([Optional] [OptionalArgument] FSharpOption<Symbol> A)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public LinalgPotri With([Optional] [OptionalArgument] FSharpOption<Symbol> A)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004033410_002D2913(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033409_002D2914(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new LinalgPotri(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgTrmm : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool TransposeDefault => false;

			public static bool RightsideDefault => false;

			public static bool LowerDefault => true;

			public static double AlphaDefault => 1.0;

			public Symbol A => operatorArguments.GetInput("A");

			public Symbol B => operatorArguments.GetInput("B");

			public bool Transpose => operatorArguments.GetParameter("transpose", TransposeDefault);

			public bool Rightside => operatorArguments.GetParameter("rightside", RightsideDefault);

			public bool Lower => operatorArguments.GetParameter("lower", LowerDefault);

			public double Alpha => operatorArguments.GetParameter("alpha", AlphaDefault);

			internal LinalgTrmm(Arguments<Symbol> operatorArguments)
				: base("_linalg_trmm", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgTrmm CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgTrmm(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgTrmm(OperatorArguments.AddReplace(args));
			}

			public LinalgTrmm([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<Symbol> B, [Optional] [OptionalArgument] FSharpOption<bool> transpose, [Optional] [OptionalArgument] FSharpOption<bool> rightside, [Optional] [OptionalArgument] FSharpOption<bool> lower, [Optional] [OptionalArgument] FSharpOption<double> alpha)
			{
				Symbol A2 = Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(B, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(A2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("B", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transpose", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004033471_002D2915(), transpose))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rightside", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004033472_002D2916(), rightside))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lower", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004033473_002D2917(), lower))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004033474_002D2918(), alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public LinalgTrmm With([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<Symbol> B, [Optional] [OptionalArgument] FSharpOption<bool> transpose, [Optional] [OptionalArgument] FSharpOption<bool> rightside, [Optional] [OptionalArgument] FSharpOption<bool> lower, [Optional] [OptionalArgument] FSharpOption<double> alpha)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004033522_002D2919(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033516_002D2920(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033517_002D2921(), B), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033518_002D2922(), transpose), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033519_002D2923(), rightside), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033520_002D2924(), lower), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033521_002D2925(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new LinalgTrmm(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgTrsm : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool TransposeDefault => false;

			public static bool RightsideDefault => false;

			public static bool LowerDefault => true;

			public static double AlphaDefault => 1.0;

			public Symbol A => operatorArguments.GetInput("A");

			public Symbol B => operatorArguments.GetInput("B");

			public bool Transpose => operatorArguments.GetParameter("transpose", TransposeDefault);

			public bool Rightside => operatorArguments.GetParameter("rightside", RightsideDefault);

			public bool Lower => operatorArguments.GetParameter("lower", LowerDefault);

			public double Alpha => operatorArguments.GetParameter("alpha", AlphaDefault);

			internal LinalgTrsm(Arguments<Symbol> operatorArguments)
				: base("_linalg_trsm", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgTrsm CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgTrsm(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgTrsm(OperatorArguments.AddReplace(args));
			}

			public LinalgTrsm([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<Symbol> B, [Optional] [OptionalArgument] FSharpOption<bool> transpose, [Optional] [OptionalArgument] FSharpOption<bool> rightside, [Optional] [OptionalArgument] FSharpOption<bool> lower, [Optional] [OptionalArgument] FSharpOption<double> alpha)
			{
				Symbol A2 = Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(B, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(A2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("B", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transpose", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004033584_002D2926(), transpose))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rightside", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004033585_002D2927(), rightside))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lower", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004033586_002D2928(), lower))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004033587_002D2929(), alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public LinalgTrsm With([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<Symbol> B, [Optional] [OptionalArgument] FSharpOption<bool> transpose, [Optional] [OptionalArgument] FSharpOption<bool> rightside, [Optional] [OptionalArgument] FSharpOption<bool> lower, [Optional] [OptionalArgument] FSharpOption<double> alpha)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004033635_002D2930(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033629_002D2931(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033630_002D2932(), B), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033631_002D2933(), transpose), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033632_002D2934(), rightside), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033633_002D2935(), lower), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033634_002D2936(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new LinalgTrsm(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgSumlogdiag : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("A");

			internal LinalgSumlogdiag(Arguments<Symbol> operatorArguments)
				: base("_linalg_sumlogdiag", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgSumlogdiag CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgSumlogdiag(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgSumlogdiag(OperatorArguments.AddReplace(args));
			}

			public LinalgSumlogdiag([Optional] [OptionalArgument] FSharpOption<Symbol> A)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public LinalgSumlogdiag With([Optional] [OptionalArgument] FSharpOption<Symbol> A)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004033681_002D2937(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033680_002D2938(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new LinalgSumlogdiag(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgExtractdiag : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int OffsetDefault => 0;

			public Symbol A => operatorArguments.GetInput("A");

			public int Offset => operatorArguments.GetParameter("offset", OffsetDefault);

			internal LinalgExtractdiag(Arguments<Symbol> operatorArguments)
				: base("_linalg_extractdiag", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgExtractdiag CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgExtractdiag(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgExtractdiag(OperatorArguments.AddReplace(args));
			}

			public LinalgExtractdiag([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<int> offset)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004033726_002D2939(), offset))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public LinalgExtractdiag With([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<int> offset)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004033745_002D2940(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033743_002D2941(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033744_002D2942(), offset), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new LinalgExtractdiag(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgMakediag : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int OffsetDefault => 0;

			public Symbol A => operatorArguments.GetInput("A");

			public int Offset => operatorArguments.GetParameter("offset", OffsetDefault);

			internal LinalgMakediag(Arguments<Symbol> operatorArguments)
				: base("_linalg_makediag", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgMakediag CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgMakediag(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgMakediag(OperatorArguments.AddReplace(args));
			}

			public LinalgMakediag([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<int> offset)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004033791_002D2943(), offset))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public LinalgMakediag With([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<int> offset)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004033810_002D2944(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033808_002D2945(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033809_002D2946(), offset), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new LinalgMakediag(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgExtracttrian : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int OffsetDefault => 0;

			public static bool LowerDefault => true;

			public Symbol A => operatorArguments.GetInput("A");

			public int Offset => operatorArguments.GetParameter("offset", OffsetDefault);

			public bool Lower => operatorArguments.GetParameter("lower", LowerDefault);

			internal LinalgExtracttrian(Arguments<Symbol> operatorArguments)
				: base("_linalg_extracttrian", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgExtracttrian CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgExtracttrian(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgExtracttrian(OperatorArguments.AddReplace(args));
			}

			public LinalgExtracttrian([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<int> offset, [Optional] [OptionalArgument] FSharpOption<bool> lower)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004033864_002D2947(), offset))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lower", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004033865_002D2948(), lower))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public LinalgExtracttrian With([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<int> offset, [Optional] [OptionalArgument] FSharpOption<bool> lower)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004033892_002D2949(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033889_002D2950(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033890_002D2951(), offset), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033891_002D2952(), lower), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new LinalgExtracttrian(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgMaketrian : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int OffsetDefault => 0;

			public static bool LowerDefault => true;

			public Symbol A => operatorArguments.GetInput("A");

			public int Offset => operatorArguments.GetParameter("offset", OffsetDefault);

			public bool Lower => operatorArguments.GetParameter("lower", LowerDefault);

			internal LinalgMaketrian(Arguments<Symbol> operatorArguments)
				: base("_linalg_maketrian", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgMaketrian CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgMaketrian(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgMaketrian(OperatorArguments.AddReplace(args));
			}

			public LinalgMaketrian([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<int> offset, [Optional] [OptionalArgument] FSharpOption<bool> lower)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004033956_002D2953(), offset))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lower", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004033957_002D2954(), lower))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public LinalgMaketrian With([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<int> offset, [Optional] [OptionalArgument] FSharpOption<bool> lower)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004033984_002D2955(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033981_002D2956(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033982_002D2957(), offset), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004033983_002D2958(), lower), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new LinalgMaketrian(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgSyrk : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool TransposeDefault => false;

			public static double AlphaDefault => 1.0;

			public Symbol A => operatorArguments.GetInput("A");

			public bool Transpose => operatorArguments.GetParameter("transpose", TransposeDefault);

			public double Alpha => operatorArguments.GetParameter("alpha", AlphaDefault);

			internal LinalgSyrk(Arguments<Symbol> operatorArguments)
				: base("_linalg_syrk", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgSyrk CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgSyrk(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgSyrk(OperatorArguments.AddReplace(args));
			}

			public LinalgSyrk([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<bool> transpose, [Optional] [OptionalArgument] FSharpOption<double> alpha)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transpose", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004034037_002D2959(), transpose))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004034038_002D2960(), alpha))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public LinalgSyrk With([Optional] [OptionalArgument] FSharpOption<Symbol> A, [Optional] [OptionalArgument] FSharpOption<bool> transpose, [Optional] [OptionalArgument] FSharpOption<double> alpha)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004034065_002D2961(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034062_002D2962(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034063_002D2963(), transpose), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034064_002D2964(), alpha), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new LinalgSyrk(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgGelqf : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("A");

			internal LinalgGelqf(Arguments<Symbol> operatorArguments)
				: base("_linalg_gelqf", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgGelqf CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgGelqf(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgGelqf(OperatorArguments.AddReplace(args));
			}

			public LinalgGelqf([Optional] [OptionalArgument] FSharpOption<Symbol> A)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public LinalgGelqf With([Optional] [OptionalArgument] FSharpOption<Symbol> A)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004034135_002D2965(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034134_002D2966(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new LinalgGelqf(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgSyevd : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("A");

			internal LinalgSyevd(Arguments<Symbol> operatorArguments)
				: base("_linalg_syevd", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgSyevd CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgSyevd(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgSyevd(OperatorArguments.AddReplace(args));
			}

			public LinalgSyevd([Optional] [OptionalArgument] FSharpOption<Symbol> A)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public LinalgSyevd With([Optional] [OptionalArgument] FSharpOption<Symbol> A)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004034204_002D2967(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034203_002D2968(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new LinalgSyevd(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgInverse : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("A");

			internal LinalgInverse(Arguments<Symbol> operatorArguments)
				: base("_linalg_inverse", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgInverse CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgInverse(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgInverse(OperatorArguments.AddReplace(args));
			}

			public LinalgInverse([Optional] [OptionalArgument] FSharpOption<Symbol> A)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public LinalgInverse With([Optional] [OptionalArgument] FSharpOption<Symbol> A)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004034253_002D2969(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034252_002D2970(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new LinalgInverse(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgDet : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("A");

			internal LinalgDet(Arguments<Symbol> operatorArguments)
				: base("_linalg_det", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgDet CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgDet(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgDet(OperatorArguments.AddReplace(args));
			}

			public LinalgDet([Optional] [OptionalArgument] FSharpOption<Symbol> A)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public LinalgDet With([Optional] [OptionalArgument] FSharpOption<Symbol> A)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004034305_002D2971(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034304_002D2972(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new LinalgDet(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class LinalgSlogdet : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol A => operatorArguments.GetInput("A");

			internal LinalgSlogdet(Arguments<Symbol> operatorArguments)
				: base("_linalg_slogdet", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static LinalgSlogdet CreateFromArguments(Arguments<Symbol> args)
			{
				return new LinalgSlogdet(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new LinalgSlogdet(OperatorArguments.AddReplace(args));
			}

			public LinalgSlogdet([Optional] [OptionalArgument] FSharpOption<Symbol> A)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(A, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public LinalgSlogdet With([Optional] [OptionalArgument] FSharpOption<Symbol> A)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004034363_002D2973(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034362_002D2974(), A), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new LinalgSlogdet(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Reshape : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] ShapeDefault => new int[0];

			public static bool ReverseDefault => false;

			public static int[] TargetShapeDefault => new int[0];

			public static bool KeepHighestDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public int[] Shape => operatorArguments.GetParameter("shape", ShapeDefault);

			public bool Reverse => operatorArguments.GetParameter("reverse", ReverseDefault);

			public int[] TargetShape => operatorArguments.GetParameter("target_shape", TargetShapeDefault);

			public bool KeepHighest => operatorArguments.GetParameter("keep_highest", KeepHighestDefault);

			internal Reshape(Arguments<Symbol> operatorArguments)
				: base("Reshape", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Reshape CreateFromArguments(Arguments<Symbol> args)
			{
				return new Reshape(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Reshape(OperatorArguments.AddReplace(args));
			}

			public Reshape([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<bool> reverse, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> targetShape, [Optional] [OptionalArgument] FSharpOption<bool> keepHighest)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004034424_002D2975(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("reverse", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004034425_002D2976(), reverse))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("target_shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004034426_002D2977(), targetShape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keep_highest", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004034427_002D2978(), keepHighest))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public Reshape With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape, [Optional] [OptionalArgument] FSharpOption<bool> reverse, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> targetShape, [Optional] [OptionalArgument] FSharpOption<bool> keepHighest)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004034470_002D2979(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034465_002D2980(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034466_002D2981(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034467_002D2982(), reverse), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034468_002D2983(), targetShape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034469_002D2984(), keepHighest), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new Reshape(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Transpose : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] AxesDefault => new int[0];

			public Symbol Data => operatorArguments.GetInput("data");

			public int[] Axes => operatorArguments.GetParameter("axes", AxesDefault);

			internal Transpose(Arguments<Symbol> operatorArguments)
				: base("transpose", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Transpose CreateFromArguments(Arguments<Symbol> args)
			{
				return new Transpose(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Transpose(OperatorArguments.AddReplace(args));
			}

			public Transpose([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004034506_002D2985(), axes))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Transpose With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004034525_002D2986(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034523_002D2987(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034524_002D2988(), axes), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Transpose(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ExpandDims : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public int Axis
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("axis");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter axis is missing"));
				}
			}

			internal ExpandDims(Arguments<Symbol> operatorArguments)
				: base("expand_dims", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ExpandDims CreateFromArguments(Arguments<Symbol> args)
			{
				return new ExpandDims(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ExpandDims(OperatorArguments.AddReplace(args));
			}

			public ExpandDims(Symbol data, int axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ExpandDims(int axis, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ExpandDims With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004034578_002D2989(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034576_002D2990(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034577_002D2991(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ExpandDims(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Slice : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] StepDefault => new int[0];

			public Symbol Data => operatorArguments.GetInput("data");

			public IEnumerable<FSharpOption<int>> SliceBegin
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("begin");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<FSharpOption<int>>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<FSharpOption<int>>, IEnumerable<FSharpOption<int>>>((PrintfFormat<IEnumerable<FSharpOption<int>>, Unit, string, IEnumerable<FSharpOption<int>>>)(object)new PrintfFormat<IEnumerable<FSharpOption<int>>, Unit, string, IEnumerable<FSharpOption<int>>, Unit>("Required parameter begin is missing"));
				}
			}

			public IEnumerable<FSharpOption<int>> SliceEnd
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("end");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<FSharpOption<int>>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<FSharpOption<int>>, IEnumerable<FSharpOption<int>>>((PrintfFormat<IEnumerable<FSharpOption<int>>, Unit, string, IEnumerable<FSharpOption<int>>>)(object)new PrintfFormat<IEnumerable<FSharpOption<int>>, Unit, string, IEnumerable<FSharpOption<int>>, Unit>("Required parameter end is missing"));
				}
			}

			public int[] Step => operatorArguments.GetParameter("step", StepDefault);

			internal Slice(Arguments<Symbol> operatorArguments)
				: base("slice", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Slice CreateFromArguments(Arguments<Symbol> args)
			{
				return new Slice(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Slice(OperatorArguments.AddReplace(args));
			}

			public Slice(Symbol data, IEnumerable<FSharpOption<int>> sliceBegin, IEnumerable<FSharpOption<int>> sliceEnd, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> step)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceBegin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("end", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceEnd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<FSharpOption<int>>, object>((FSharpFunc<IEnumerable<FSharpOption<int>>, object>)new operatorArguments_004034634_002D2992(), step))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Slice(IEnumerable<FSharpOption<int>> sliceBegin, IEnumerable<FSharpOption<int>> sliceEnd, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> step)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceBegin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("end", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceEnd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<FSharpOption<int>>, object>((FSharpFunc<IEnumerable<FSharpOption<int>>, object>)new operatorArguments_004034687_002D2993(), step))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Slice With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> sliceBegin, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> sliceEnd, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> step)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004034716_002D2994(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034712_002D2995(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034713_002D2996(), sliceBegin), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034714_002D2997(), sliceEnd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034715_002D2998(), step), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Slice(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SliceAssign : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] StepDefault => new int[0];

			public Symbol Lhs => operatorArguments.GetInput("lhs");

			public Symbol Rhs => operatorArguments.GetInput("rhs");

			public IEnumerable<FSharpOption<int>> SliceBegin
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("begin");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<FSharpOption<int>>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<FSharpOption<int>>, IEnumerable<FSharpOption<int>>>((PrintfFormat<IEnumerable<FSharpOption<int>>, Unit, string, IEnumerable<FSharpOption<int>>>)(object)new PrintfFormat<IEnumerable<FSharpOption<int>>, Unit, string, IEnumerable<FSharpOption<int>>, Unit>("Required parameter begin is missing"));
				}
			}

			public IEnumerable<FSharpOption<int>> SliceEnd
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("end");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<FSharpOption<int>>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<FSharpOption<int>>, IEnumerable<FSharpOption<int>>>((PrintfFormat<IEnumerable<FSharpOption<int>>, Unit, string, IEnumerable<FSharpOption<int>>>)(object)new PrintfFormat<IEnumerable<FSharpOption<int>>, Unit, string, IEnumerable<FSharpOption<int>>, Unit>("Required parameter end is missing"));
				}
			}

			public int[] Step => operatorArguments.GetParameter("step", StepDefault);

			internal SliceAssign(Arguments<Symbol> operatorArguments)
				: base("_slice_assign", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SliceAssign CreateFromArguments(Arguments<Symbol> args)
			{
				return new SliceAssign(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SliceAssign(OperatorArguments.AddReplace(args));
			}

			public SliceAssign(Symbol lhs, Symbol rhs, IEnumerable<FSharpOption<int>> sliceBegin, IEnumerable<FSharpOption<int>> sliceEnd, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> step)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(rhs)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceBegin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("end", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceEnd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<FSharpOption<int>>, object>((FSharpFunc<IEnumerable<FSharpOption<int>>, object>)new operatorArguments_004034748_002D2999(), step))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public SliceAssign(IEnumerable<FSharpOption<int>> sliceBegin, IEnumerable<FSharpOption<int>> sliceEnd, [Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> step)
			{
				Symbol lhs2 = Operators.DefaultArg<Symbol>(lhs, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rhs, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(lhs2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceBegin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("end", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceEnd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<FSharpOption<int>>, object>((FSharpFunc<IEnumerable<FSharpOption<int>>, object>)new operatorArguments_004034778_002D3000(), step))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))));
			}

			public SliceAssign With([Optional] [OptionalArgument] FSharpOption<Symbol> lhs, [Optional] [OptionalArgument] FSharpOption<Symbol> rhs, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> sliceBegin, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> sliceEnd, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> step)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004034812_002D3001(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034807_002D3002(), lhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034808_002D3003(), rhs), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034809_002D3004(), sliceBegin), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034810_002D3005(), sliceEnd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034811_002D3006(), step), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new SliceAssign(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SliceAssignScalar : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double ScalarDefault => 0.0;

			public static int[] StepDefault => new int[0];

			public Symbol Data => operatorArguments.GetInput("data");

			public IEnumerable<FSharpOption<int>> SliceBegin
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("begin");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<FSharpOption<int>>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<FSharpOption<int>>, IEnumerable<FSharpOption<int>>>((PrintfFormat<IEnumerable<FSharpOption<int>>, Unit, string, IEnumerable<FSharpOption<int>>>)(object)new PrintfFormat<IEnumerable<FSharpOption<int>>, Unit, string, IEnumerable<FSharpOption<int>>, Unit>("Required parameter begin is missing"));
				}
			}

			public IEnumerable<FSharpOption<int>> SliceEnd
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("end");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<FSharpOption<int>>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<FSharpOption<int>>, IEnumerable<FSharpOption<int>>>((PrintfFormat<IEnumerable<FSharpOption<int>>, Unit, string, IEnumerable<FSharpOption<int>>>)(object)new PrintfFormat<IEnumerable<FSharpOption<int>>, Unit, string, IEnumerable<FSharpOption<int>>, Unit>("Required parameter end is missing"));
				}
			}

			public double Scalar => operatorArguments.GetParameter("scalar", ScalarDefault);

			public int[] Step => operatorArguments.GetParameter("step", StepDefault);

			internal SliceAssignScalar(Arguments<Symbol> operatorArguments)
				: base("_slice_assign_scalar", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SliceAssignScalar CreateFromArguments(Arguments<Symbol> args)
			{
				return new SliceAssignScalar(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SliceAssignScalar(OperatorArguments.AddReplace(args));
			}

			public SliceAssignScalar(Symbol data, IEnumerable<FSharpOption<int>> sliceBegin, IEnumerable<FSharpOption<int>> sliceEnd, [Optional] [OptionalArgument] FSharpOption<double> scalar, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> step)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceBegin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("end", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceEnd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004034842_002D3007(), scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<FSharpOption<int>>, object>((FSharpFunc<IEnumerable<FSharpOption<int>>, object>)new operatorArguments_004034843_002D3008(), step))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public SliceAssignScalar(IEnumerable<FSharpOption<int>> sliceBegin, IEnumerable<FSharpOption<int>> sliceEnd, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> scalar, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> step)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceBegin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("end", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceEnd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004034870_002D3009(), scalar))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<FSharpOption<int>>, object>((FSharpFunc<IEnumerable<FSharpOption<int>>, object>)new operatorArguments_004034871_002D3010(), step))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public SliceAssignScalar With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> sliceBegin, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> sliceEnd, [Optional] [OptionalArgument] FSharpOption<double> scalar, [Optional] [OptionalArgument] FSharpOption<IEnumerable<FSharpOption<int>>> step)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004034908_002D3011(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034903_002D3012(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034904_002D3013(), sliceBegin), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034905_002D3014(), sliceEnd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034906_002D3015(), scalar), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004034907_002D3016(), step), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new SliceAssignScalar(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SliceAxis : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> SliceEndDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public int Axis
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("axis");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter axis is missing"));
				}
			}

			public int SliceBegin
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("begin");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter begin is missing"));
				}
			}

			public FSharpOption<int> SliceEnd => operatorArguments.GetParameter<FSharpOption<int>>("end", SliceEndDefault);

			internal SliceAxis(Arguments<Symbol> operatorArguments)
				: base("slice_axis", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SliceAxis CreateFromArguments(Arguments<Symbol> args)
			{
				return new SliceAxis(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SliceAxis(OperatorArguments.AddReplace(args));
			}

			public SliceAxis(Symbol data, int axis, int sliceBegin, [Optional] [OptionalArgument] FSharpOption<int> sliceEnd)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceBegin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("end", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004034946_002D3017(), sliceEnd))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public SliceAxis(int axis, int sliceBegin, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> sliceEnd)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)sliceBegin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("end", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004034981_002D3018(), sliceEnd))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public SliceAxis With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<int> sliceBegin, [Optional] [OptionalArgument] FSharpOption<int> sliceEnd)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004035010_002D3019(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035006_002D3020(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035007_002D3021(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035008_002D3022(), sliceBegin), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035009_002D3023(), sliceEnd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new SliceAxis(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SliceLike : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] AxesDefault => new int[0];

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol ShapeLike => operatorArguments.GetInput("shape_like");

			public int[] Axes => operatorArguments.GetParameter("axes", AxesDefault);

			internal SliceLike(Arguments<Symbol> operatorArguments)
				: base("slice_like", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SliceLike CreateFromArguments(Arguments<Symbol> args)
			{
				return new SliceLike(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SliceLike(OperatorArguments.AddReplace(args));
			}

			public SliceLike([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> shapeLike, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(shapeLike, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape_like", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004035067_002D3024(), axes))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public SliceLike With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> shapeLike, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axes)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004035091_002D3025(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035088_002D3026(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035089_002D3027(), shapeLike), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035090_002D3028(), axes), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new SliceLike(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Clip : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public double AMin
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("a_min");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter a_min is missing"));
				}
			}

			public double AMax
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("a_max");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter a_max is missing"));
				}
			}

			internal Clip(Arguments<Symbol> operatorArguments)
				: base("clip", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Clip CreateFromArguments(Arguments<Symbol> args)
			{
				return new Clip(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Clip(OperatorArguments.AddReplace(args));
			}

			public Clip(Symbol data, double aMin, double aMax)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a_min", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)aMin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a_max", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)aMax))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public Clip(double aMin, double aMax, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a_min", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)aMin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("a_max", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)aMax))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public Clip With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> aMin, [Optional] [OptionalArgument] FSharpOption<double> aMax)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004035183_002D3029(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035180_002D3030(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035181_002D3031(), aMin), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035182_002D3032(), aMax), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new Clip(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Repeat : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> AxisDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public int Repeats
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("repeats");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter repeats is missing"));
				}
			}

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			internal Repeat(Arguments<Symbol> operatorArguments)
				: base("repeat", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Repeat CreateFromArguments(Arguments<Symbol> args)
			{
				return new Repeat(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Repeat(OperatorArguments.AddReplace(args));
			}

			public Repeat(Symbol data, int repeats, [Optional] [OptionalArgument] FSharpOption<int> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("repeats", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)repeats))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004035218_002D3033(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public Repeat(int repeats, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("repeats", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)repeats))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004035250_002D3034(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public Repeat With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> repeats, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004035274_002D3035(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035271_002D3036(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035272_002D3037(), repeats), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035273_002D3038(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new Repeat(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Tile : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public IEnumerable<int> Reps
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("reps");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter reps is missing"));
				}
			}

			internal Tile(Arguments<Symbol> operatorArguments)
				: base("tile", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Tile CreateFromArguments(Arguments<Symbol> args)
			{
				return new Tile(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Tile(OperatorArguments.AddReplace(args));
			}

			public Tile(Symbol data, IEnumerable<int> reps)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("reps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)reps))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Tile(IEnumerable<int> reps, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("reps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)reps))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Tile With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> reps)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004035369_002D3039(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035367_002D3040(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035368_002D3041(), reps), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Tile(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Reverse : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public IEnumerable<int> Axis
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("axis");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter axis is missing"));
				}
			}

			internal Reverse(Arguments<Symbol> operatorArguments)
				: base("reverse", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Reverse CreateFromArguments(Arguments<Symbol> args)
			{
				return new Reverse(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Reverse(OperatorArguments.AddReplace(args));
			}

			public Reverse(Symbol data, IEnumerable<int> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Reverse(IEnumerable<int> axis, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Reverse With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004035434_002D3042(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035432_002D3043(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035433_002D3044(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Reverse(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Stack : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int AxisDefault => 0;

			public Symbol[] Data => operatorArguments.GetVarArg("data");

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			internal Stack(Arguments<Symbol> operatorArguments)
				: base("stack", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Stack CreateFromArguments(Arguments<Symbol> args)
			{
				return new Stack(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Stack(OperatorArguments.AddReplace(args));
			}

			public Stack([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", Operators.DefaultArg<Symbol[]>(OptionModule.Map<IEnumerable<Symbol>, Symbol[]>((FSharpFunc<IEnumerable<Symbol>, Symbol[]>)new data_004035457_002D27(), data), ArrayModule.Empty<Symbol>()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004035461_002D3045(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Stack With([Optional] [OptionalArgument] FSharpOption<IEnumerable<Symbol>> data, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004035480_002D3046(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035478_002D3047(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035479_002D3048(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Stack(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Squeeze : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			internal Squeeze(Arguments<Symbol> operatorArguments)
				: base("squeeze", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Squeeze CreateFromArguments(Arguments<Symbol> args)
			{
				return new Squeeze(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Squeeze(OperatorArguments.AddReplace(args));
			}

			public Squeeze([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004035508_002D3049(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public Squeeze With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004035527_002D3050(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035525_002D3051(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035526_002D3052(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new Squeeze(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class DepthToSpace : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public int BlockSize
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("block_size");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter block_size is missing"));
				}
			}

			internal DepthToSpace(Arguments<Symbol> operatorArguments)
				: base("depth_to_space", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static DepthToSpace CreateFromArguments(Arguments<Symbol> args)
			{
				return new DepthToSpace(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new DepthToSpace(OperatorArguments.AddReplace(args));
			}

			public DepthToSpace(Symbol data, int blockSize)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("block_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)blockSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public DepthToSpace(int blockSize, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("block_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)blockSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public DepthToSpace With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> blockSize)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004035626_002D3053(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035624_002D3054(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035625_002D3055(), blockSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new DepthToSpace(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SpaceToDepth : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public int BlockSize
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("block_size");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter block_size is missing"));
				}
			}

			internal SpaceToDepth(Arguments<Symbol> operatorArguments)
				: base("space_to_depth", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SpaceToDepth CreateFromArguments(Arguments<Symbol> args)
			{
				return new SpaceToDepth(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SpaceToDepth(OperatorArguments.AddReplace(args));
			}

			public SpaceToDepth(Symbol data, int blockSize)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("block_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)blockSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public SpaceToDepth(int blockSize, [Optional] [OptionalArgument] FSharpOption<Symbol> data)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("block_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)blockSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public SpaceToDepth With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> blockSize)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004035725_002D3056(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035723_002D3057(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035724_002D3058(), blockSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new SpaceToDepth(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SplitV2 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int AxisDefault => 1;

			public static bool SqueezeAxisDefault => false;

			public static int SectionsDefault => 0;

			public Symbol Data => operatorArguments.GetInput("data");

			public IEnumerable<int> Indices
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("indices");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter indices is missing"));
				}
			}

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			public bool SqueezeAxis => operatorArguments.GetParameter("squeeze_axis", SqueezeAxisDefault);

			public int Sections => operatorArguments.GetParameter("sections", SectionsDefault);

			internal SplitV2(Arguments<Symbol> operatorArguments)
				: base("_split_v2", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SplitV2 CreateFromArguments(Arguments<Symbol> args)
			{
				return new SplitV2(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SplitV2(OperatorArguments.AddReplace(args));
			}

			public SplitV2(Symbol data, IEnumerable<int> indices, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> squeezeAxis, [Optional] [OptionalArgument] FSharpOption<int> sections)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)indices))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004035796_002D3059(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("squeeze_axis", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004035797_002D3060(), squeezeAxis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sections", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004035798_002D3061(), sections))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public SplitV2(IEnumerable<int> indices, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> squeezeAxis, [Optional] [OptionalArgument] FSharpOption<int> sections)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)indices))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004035866_002D3062(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("squeeze_axis", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004035867_002D3063(), squeezeAxis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sections", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004035868_002D3064(), sections))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public SplitV2 With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> indices, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> squeezeAxis, [Optional] [OptionalArgument] FSharpOption<int> sections)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004035908_002D3065(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035903_002D3066(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035904_002D3067(), indices), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035905_002D3068(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035906_002D3069(), squeezeAxis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004035907_002D3070(), sections), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new SplitV2(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SplitV2Backward : SymbolOperator
		{
			internal SplitV2Backward(Arguments<Symbol> operatorArguments)
				: base("_split_v2_backward", operatorArguments)
			{
			}

			public static SplitV2Backward CreateFromArguments(Arguments<Symbol> args)
			{
				return new SplitV2Backward(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SplitV2Backward(OperatorArguments.AddReplace(args));
			}

			public SplitV2Backward()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_004035916_002D3071()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Topk : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> AxisDefault => FSharpOption<int>.Some(-1);

			public static int KDefault => 1;

			public static GeneratedArgumentTypes.RetTyp RetTypDefault => GeneratedArgumentTypes.RetTyp.Indices;

			public static bool IsAscendDefault => false;

			public static DataType DtypeDefault => DataType.Float32;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			public int K => operatorArguments.GetParameter("k", KDefault);

			public GeneratedArgumentTypes.RetTyp RetTyp => operatorArguments.GetParameter("ret_typ", RetTypDefault);

			public bool IsAscend => operatorArguments.GetParameter("is_ascend", IsAscendDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal Topk(Arguments<Symbol> operatorArguments)
				: base("topk", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Topk CreateFromArguments(Arguments<Symbol> args)
			{
				return new Topk(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Topk(OperatorArguments.AddReplace(args));
			}

			public Topk([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<int> k, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.RetTyp> retTyp, [Optional] [OptionalArgument] FSharpOption<bool> isAscend, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004035975_002D3072(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004035976_002D3073(), k))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("ret_typ", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.RetTyp, object>((FSharpFunc<GeneratedArgumentTypes.RetTyp, object>)new operatorArguments_004035977_002D3074(), retTyp))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_ascend", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004035978_002D3075(), isAscend))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004035979_002D3076(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public Topk With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<int> k, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.RetTyp> retTyp, [Optional] [OptionalArgument] FSharpOption<bool> isAscend, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004036033_002D3077(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036027_002D3078(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036028_002D3079(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036029_002D3080(), k), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.RetTyp, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.RetTyp, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036030_002D3081(), retTyp), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036031_002D3082(), isAscend), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036032_002D3083(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new Topk(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Sort : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> AxisDefault => FSharpOption<int>.Some(-1);

			public static bool IsAscendDefault => true;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			public bool IsAscend => operatorArguments.GetParameter("is_ascend", IsAscendDefault);

			internal Sort(Arguments<Symbol> operatorArguments)
				: base("sort", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Sort CreateFromArguments(Arguments<Symbol> args)
			{
				return new Sort(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Sort(OperatorArguments.AddReplace(args));
			}

			public Sort([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> isAscend)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004036075_002D3084(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_ascend", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004036076_002D3085(), isAscend))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public Sort With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> isAscend)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004036103_002D3086(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036100_002D3087(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036101_002D3088(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036102_002D3089(), isAscend), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new Sort(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Argsort : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int> AxisDefault => FSharpOption<int>.Some(-1);

			public static bool IsAscendDefault => true;

			public static DataType DtypeDefault => DataType.Float32;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int> Axis => operatorArguments.GetParameter<FSharpOption<int>>("axis", AxisDefault);

			public bool IsAscend => operatorArguments.GetParameter("is_ascend", IsAscendDefault);

			public DataType Dtype => operatorArguments.GetParameter("dtype", DtypeDefault);

			internal Argsort(Arguments<Symbol> operatorArguments)
				: base("argsort", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Argsort CreateFromArguments(Arguments<Symbol> args)
			{
				return new Argsort(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Argsort(OperatorArguments.AddReplace(args));
			}

			public Argsort([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> isAscend, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004036145_002D3090(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_ascend", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004036146_002D3091(), isAscend))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(OptionModule.Map<DataType, object>((FSharpFunc<DataType, object>)new operatorArguments_004036147_002D3092(), dtype))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public Argsort With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> axis, [Optional] [OptionalArgument] FSharpOption<bool> isAscend, [Optional] [OptionalArgument] FSharpOption<DataType> dtype)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004036182_002D3093(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036178_002D3094(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036179_002D3095(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036180_002D3096(), isAscend), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<DataType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036181_002D3097(), dtype), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new Argsort(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class RavelMultiIndex : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> ShapeDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			internal RavelMultiIndex(Arguments<Symbol> operatorArguments)
				: base("_ravel_multi_index", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static RavelMultiIndex CreateFromArguments(Arguments<Symbol> args)
			{
				return new RavelMultiIndex(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new RavelMultiIndex(OperatorArguments.AddReplace(args));
			}

			public RavelMultiIndex([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004036208_002D3098(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public RavelMultiIndex With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004036227_002D3099(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036225_002D3100(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036226_002D3101(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new RavelMultiIndex(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class UnravelIndex : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> ShapeDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Shape => operatorArguments.GetParameter<FSharpOption<int[]>>("shape", ShapeDefault);

			internal UnravelIndex(Arguments<Symbol> operatorArguments)
				: base("_unravel_index", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static UnravelIndex CreateFromArguments(Arguments<Symbol> args)
			{
				return new UnravelIndex(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new UnravelIndex(OperatorArguments.AddReplace(args));
			}

			public UnravelIndex([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004036253_002D3102(), shape))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public UnravelIndex With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> shape)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004036272_002D3103(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036270_002D3104(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036271_002D3105(), shape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new UnravelIndex(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SparseRetain : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Indices => operatorArguments.GetInput("indices");

			internal SparseRetain(Arguments<Symbol> operatorArguments)
				: base("_sparse_retain", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SparseRetain CreateFromArguments(Arguments<Symbol> args)
			{
				return new SparseRetain(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SparseRetain(OperatorArguments.AddReplace(args));
			}

			public SparseRetain([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> indices)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(indices, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))));
			}

			public SparseRetain With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> indices)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004036326_002D3106(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036324_002D3107(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036325_002D3108(), indices), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new SparseRetain(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SquareSum : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<int[]> AxisDefault => null;

			public static bool KeepdimsDefault => false;

			public static bool ExcludeDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public FSharpOption<int[]> Axis => operatorArguments.GetParameter<FSharpOption<int[]>>("axis", AxisDefault);

			public bool Keepdims => operatorArguments.GetParameter("keepdims", KeepdimsDefault);

			public bool Exclude => operatorArguments.GetParameter("exclude", ExcludeDefault);

			internal SquareSum(Arguments<Symbol> operatorArguments)
				: base("_square_sum", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SquareSum CreateFromArguments(Arguments<Symbol> args)
			{
				return new SquareSum(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SquareSum(OperatorArguments.AddReplace(args));
			}

			public SquareSum([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004036373_002D3109(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004036374_002D3110(), keepdims))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004036375_002D3111(), exclude))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public SquareSum With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> axis, [Optional] [OptionalArgument] FSharpOption<bool> keepdims, [Optional] [OptionalArgument] FSharpOption<bool> exclude)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004036449_002D3112(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036445_002D3113(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036446_002D3114(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036447_002D3115(), keepdims), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036448_002D3116(), exclude), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new SquareSum(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribMrcnnMaskTarget : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int SampleRatioDefault => 2;

			public Symbol Rois => operatorArguments.GetInput("rois");

			public Symbol GtMasks => operatorArguments.GetInput("gt_masks");

			public Symbol Matches => operatorArguments.GetInput("matches");

			public Symbol ClsTargets => operatorArguments.GetInput("cls_targets");

			public int NumRois
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_rois");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_rois is missing"));
				}
			}

			public int NumClasses
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_classes");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_classes is missing"));
				}
			}

			public IEnumerable<int> MaskSize
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("mask_size");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter mask_size is missing"));
				}
			}

			public int SampleRatio => operatorArguments.GetParameter("sample_ratio", SampleRatioDefault);

			internal ContribMrcnnMaskTarget(Arguments<Symbol> operatorArguments)
				: base("_contrib_mrcnn_mask_target", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribMrcnnMaskTarget CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribMrcnnMaskTarget(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribMrcnnMaskTarget(OperatorArguments.AddReplace(args));
			}

			public ContribMrcnnMaskTarget(Symbol rois, Symbol gtMasks, Symbol matches, Symbol clsTargets, int numRois, int numClasses, IEnumerable<int> maskSize, [Optional] [OptionalArgument] FSharpOption<int> sampleRatio)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(rois)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gt_masks", OpArg<Symbol>.NewInput(gtMasks)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("matches", OpArg<Symbol>.NewInput(matches)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cls_targets", OpArg<Symbol>.NewInput(clsTargets)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_rois", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numRois))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_classes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numClasses))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mask_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)maskSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample_ratio", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004036482_002D3117(), sampleRatio))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))
			{
			}

			public ContribMrcnnMaskTarget(int numRois, int numClasses, IEnumerable<int> maskSize, [Optional] [OptionalArgument] FSharpOption<Symbol> rois, [Optional] [OptionalArgument] FSharpOption<Symbol> gtMasks, [Optional] [OptionalArgument] FSharpOption<Symbol> matches, [Optional] [OptionalArgument] FSharpOption<Symbol> clsTargets, [Optional] [OptionalArgument] FSharpOption<int> sampleRatio)
			{
				Symbol rois2 = Operators.DefaultArg<Symbol>(rois, (Symbol)new ImplicitVariable());
				Symbol gtMasks2 = Operators.DefaultArg<Symbol>(gtMasks, (Symbol)new ImplicitVariable());
				Symbol matches2 = Operators.DefaultArg<Symbol>(matches, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(clsTargets, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(rois2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gt_masks", OpArg<Symbol>.NewInput(gtMasks2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("matches", OpArg<Symbol>.NewInput(matches2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cls_targets", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_rois", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numRois))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_classes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numClasses))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mask_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)maskSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample_ratio", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004036515_002D3118(), sampleRatio))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))));
			}

			public ContribMrcnnMaskTarget With([Optional] [OptionalArgument] FSharpOption<Symbol> rois, [Optional] [OptionalArgument] FSharpOption<Symbol> gtMasks, [Optional] [OptionalArgument] FSharpOption<Symbol> matches, [Optional] [OptionalArgument] FSharpOption<Symbol> clsTargets, [Optional] [OptionalArgument] FSharpOption<int> numRois, [Optional] [OptionalArgument] FSharpOption<int> numClasses, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> maskSize, [Optional] [OptionalArgument] FSharpOption<int> sampleRatio)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004036564_002D3119(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036556_002D3120(), rois), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036557_002D3121(), gtMasks), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036558_002D3122(), matches), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036559_002D3123(), clsTargets), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036560_002D3124(), numRois), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036561_002D3125(), numClasses), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036562_002D3126(), maskSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036563_002D3127(), sampleRatio), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new ContribMrcnnMaskTarget(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class BilinearSampler : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static FSharpOption<bool> CudnnOffDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Grid => operatorArguments.GetInput("grid");

			public FSharpOption<bool> CudnnOff => operatorArguments.GetParameter<FSharpOption<bool>>("cudnn_off", CudnnOffDefault);

			internal BilinearSampler(Arguments<Symbol> operatorArguments)
				: base("BilinearSampler", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static BilinearSampler CreateFromArguments(Arguments<Symbol> args)
			{
				return new BilinearSampler(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new BilinearSampler(OperatorArguments.AddReplace(args));
			}

			public BilinearSampler([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> grid, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(grid, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grid", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004036657_002D3128(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))));
			}

			public BilinearSampler With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> grid, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004036681_002D3129(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036678_002D3130(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036679_002D3131(), grid), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036680_002D3132(), cudnnOff), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new BilinearSampler(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribCountSketch : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int ProcessingBatchSizeDefault => 32;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol H => operatorArguments.GetInput("h");

			public Symbol S => operatorArguments.GetInput("s");

			public int OutDim
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("out_dim");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter out_dim is missing"));
				}
			}

			public int ProcessingBatchSize => operatorArguments.GetParameter("processing_batch_size", ProcessingBatchSizeDefault);

			internal ContribCountSketch(Arguments<Symbol> operatorArguments)
				: base("_contrib_count_sketch", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribCountSketch CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribCountSketch(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribCountSketch(OperatorArguments.AddReplace(args));
			}

			public ContribCountSketch(Symbol data, Symbol h, Symbol s, int outDim, [Optional] [OptionalArgument] FSharpOption<int> processingBatchSize)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("h", OpArg<Symbol>.NewInput(h)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("s", OpArg<Symbol>.NewInput(s)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("out_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)outDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("processing_batch_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004036728_002D3133(), processingBatchSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))
			{
			}

			public ContribCountSketch(int outDim, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> h, [Optional] [OptionalArgument] FSharpOption<Symbol> s, [Optional] [OptionalArgument] FSharpOption<int> processingBatchSize)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol h2 = Operators.DefaultArg<Symbol>(h, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(s, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("h", OpArg<Symbol>.NewInput(h2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("s", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("out_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)outDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("processing_batch_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004036774_002D3134(), processingBatchSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))));
			}

			public ContribCountSketch With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> h, [Optional] [OptionalArgument] FSharpOption<Symbol> s, [Optional] [OptionalArgument] FSharpOption<int> outDim, [Optional] [OptionalArgument] FSharpOption<int> processingBatchSize)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004036808_002D3135(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036803_002D3136(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036804_002D3137(), h), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036805_002D3138(), s), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036806_002D3139(), outDim), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004036807_002D3140(), processingBatchSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new ContribCountSketch(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribDeformableConvolution : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] StrideDefault => new int[0];

			public static int[] DilateDefault => new int[0];

			public static int[] PadDefault => new int[0];

			public static int NumGroupDefault => 1;

			public static int NumDeformableGroupDefault => 1;

			public static long WorkspaceDefault => 1024L;

			public static bool NoBiasDefault => false;

			public static FSharpOption<GeneratedArgumentTypes.ContribDeformableConvolutionLayout> LayoutDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Offset => operatorArguments.GetInput("offset");

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Bias => operatorArguments.GetInput("bias");

			public IEnumerable<int> Kernel
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("kernel");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter kernel is missing"));
				}
			}

			public int NumFilter
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_filter");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_filter is missing"));
				}
			}

			public int[] Stride => operatorArguments.GetParameter("stride", StrideDefault);

			public int[] Dilate => operatorArguments.GetParameter("dilate", DilateDefault);

			public int[] Pad => operatorArguments.GetParameter("pad", PadDefault);

			public int NumGroup => operatorArguments.GetParameter("num_group", NumGroupDefault);

			public int NumDeformableGroup => operatorArguments.GetParameter("num_deformable_group", NumDeformableGroupDefault);

			public long Workspace => operatorArguments.GetParameter("workspace", WorkspaceDefault);

			public bool NoBias => operatorArguments.GetParameter("no_bias", NoBiasDefault);

			public FSharpOption<GeneratedArgumentTypes.ContribDeformableConvolutionLayout> Layout => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.ContribDeformableConvolutionLayout>>("layout", LayoutDefault);

			internal ContribDeformableConvolution(Arguments<Symbol> operatorArguments)
				: base("_contrib_DeformableConvolution", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribDeformableConvolution CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribDeformableConvolution(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribDeformableConvolution(OperatorArguments.AddReplace(args));
			}

			public ContribDeformableConvolution(Symbol data, Symbol offset, Symbol weight, Symbol bias, IEnumerable<int> kernel, int numFilter, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<int> numDeformableGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribDeformableConvolutionLayout> layout)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewInput(offset)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(bias)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004036897_002D3141(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004036898_002D3142(), dilate))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004036899_002D3143(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004036900_002D3144(), numGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_deformable_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004036901_002D3145(), numDeformableGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_004036902_002D3146(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004036903_002D3147(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ContribDeformableConvolutionLayout, object>((FSharpFunc<GeneratedArgumentTypes.ContribDeformableConvolutionLayout, object>)new operatorArguments_004036904_002D3148(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))))
			{
			}

			public ContribDeformableConvolution(IEnumerable<int> kernel, int numFilter, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> offset, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<int> numDeformableGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribDeformableConvolutionLayout> layout)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol offset2 = Operators.DefaultArg<Symbol>(offset, (Symbol)new ImplicitVariable());
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(bias, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewInput(offset2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004036993_002D3149(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004036994_002D3150(), dilate))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004036995_002D3151(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004036996_002D3152(), numGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_deformable_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004036997_002D3153(), numDeformableGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_004036998_002D3154(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004036999_002D3155(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ContribDeformableConvolutionLayout, object>((FSharpFunc<GeneratedArgumentTypes.ContribDeformableConvolutionLayout, object>)new operatorArguments_004037000_002D3156(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))));
			}

			public ContribDeformableConvolution With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> offset, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> kernel, [Optional] [OptionalArgument] FSharpOption<int> numFilter, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<int> numDeformableGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribDeformableConvolutionLayout> layout)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004037103_002D3157(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037089_002D3158(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037090_002D3159(), offset), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037091_002D3160(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037092_002D3161(), bias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037093_002D3162(), kernel), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037094_002D3163(), numFilter), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037095_002D3164(), stride), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037096_002D3165(), dilate), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037097_002D3166(), pad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037098_002D3167(), numGroup), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037099_002D3168(), numDeformableGroup), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037100_002D3169(), workspace), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037101_002D3170(), noBias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ContribDeformableConvolutionLayout, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ContribDeformableConvolutionLayout, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037102_002D3171(), layout), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))))));
				return new ContribDeformableConvolution(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribDeformablePSROIPooling : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int PartSizeDefault => 0;

			public static int SamplePerPartDefault => 1;

			public static double TransStdDefault => 0.0;

			public static bool NoTransDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Rois => operatorArguments.GetInput("rois");

			public Symbol Trans => operatorArguments.GetInput("trans");

			public double SpatialScale
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("spatial_scale");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter spatial_scale is missing"));
				}
			}

			public int OutputDim
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("output_dim");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter output_dim is missing"));
				}
			}

			public int GroupSize
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("group_size");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter group_size is missing"));
				}
			}

			public int PooledSize
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("pooled_size");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter pooled_size is missing"));
				}
			}

			public int PartSize => operatorArguments.GetParameter("part_size", PartSizeDefault);

			public int SamplePerPart => operatorArguments.GetParameter("sample_per_part", SamplePerPartDefault);

			public double TransStd => operatorArguments.GetParameter("trans_std", TransStdDefault);

			public bool NoTrans => operatorArguments.GetParameter("no_trans", NoTransDefault);

			internal ContribDeformablePSROIPooling(Arguments<Symbol> operatorArguments)
				: base("_contrib_DeformablePSROIPooling", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribDeformablePSROIPooling CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribDeformablePSROIPooling(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribDeformablePSROIPooling(OperatorArguments.AddReplace(args));
			}

			public ContribDeformablePSROIPooling(Symbol data, Symbol rois, Symbol trans, double spatialScale, int outputDim, int groupSize, int pooledSize, [Optional] [OptionalArgument] FSharpOption<int> partSize, [Optional] [OptionalArgument] FSharpOption<int> samplePerPart, [Optional] [OptionalArgument] FSharpOption<double> transStd, [Optional] [OptionalArgument] FSharpOption<bool> noTrans)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(rois)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("trans", OpArg<Symbol>.NewInput(trans)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)spatialScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)outputDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("group_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)groupSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)pooledSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("part_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037143_002D3172(), partSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample_per_part", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037144_002D3173(), samplePerPart))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("trans_std", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004037145_002D3174(), transStd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_trans", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004037146_002D3175(), noTrans))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))))
			{
			}

			public ContribDeformablePSROIPooling(double spatialScale, int outputDim, int groupSize, int pooledSize, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> rois, [Optional] [OptionalArgument] FSharpOption<Symbol> trans, [Optional] [OptionalArgument] FSharpOption<int> partSize, [Optional] [OptionalArgument] FSharpOption<int> samplePerPart, [Optional] [OptionalArgument] FSharpOption<double> transStd, [Optional] [OptionalArgument] FSharpOption<bool> noTrans)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol rois2 = Operators.DefaultArg<Symbol>(rois, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(trans, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(rois2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("trans", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)spatialScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)outputDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("group_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)groupSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)pooledSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("part_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037185_002D3176(), partSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sample_per_part", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037186_002D3177(), samplePerPart))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("trans_std", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004037187_002D3178(), transStd))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_trans", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004037188_002D3179(), noTrans))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))))))))));
			}

			public ContribDeformablePSROIPooling With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> rois, [Optional] [OptionalArgument] FSharpOption<Symbol> trans, [Optional] [OptionalArgument] FSharpOption<double> spatialScale, [Optional] [OptionalArgument] FSharpOption<int> outputDim, [Optional] [OptionalArgument] FSharpOption<int> groupSize, [Optional] [OptionalArgument] FSharpOption<int> pooledSize, [Optional] [OptionalArgument] FSharpOption<int> partSize, [Optional] [OptionalArgument] FSharpOption<int> samplePerPart, [Optional] [OptionalArgument] FSharpOption<double> transStd, [Optional] [OptionalArgument] FSharpOption<bool> noTrans)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004037261_002D3180(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037250_002D3181(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037251_002D3182(), rois), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037252_002D3183(), trans), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037253_002D3184(), spatialScale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037254_002D3185(), outputDim), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037255_002D3186(), groupSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037256_002D3187(), pooledSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037257_002D3188(), partSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037258_002D3189(), samplePerPart), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037259_002D3190(), transStd), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037260_002D3191(), noTrans), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))))))))));
				return new ContribDeformablePSROIPooling(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribFft : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int ComputeSizeDefault => 128;

			public Symbol Data => operatorArguments.GetInput("data");

			public int ComputeSize => operatorArguments.GetParameter("compute_size", ComputeSizeDefault);

			internal ContribFft(Arguments<Symbol> operatorArguments)
				: base("_contrib_fft", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribFft CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribFft(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribFft(OperatorArguments.AddReplace(args));
			}

			public ContribFft([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> computeSize)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("compute_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037291_002D3192(), computeSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ContribFft With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> computeSize)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004037310_002D3193(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037308_002D3194(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037309_002D3195(), computeSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ContribFft(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribIfft : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int ComputeSizeDefault => 128;

			public Symbol Data => operatorArguments.GetInput("data");

			public int ComputeSize => operatorArguments.GetParameter("compute_size", ComputeSizeDefault);

			internal ContribIfft(Arguments<Symbol> operatorArguments)
				: base("_contrib_ifft", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribIfft CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribIfft(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribIfft(OperatorArguments.AddReplace(args));
			}

			public ContribIfft([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> computeSize)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("compute_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037341_002D3196(), computeSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))
			{
			}

			public ContribIfft With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<int> computeSize)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004037360_002D3197(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037358_002D3198(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037359_002D3199(), computeSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())));
				return new ContribIfft(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribModulatedDeformableConvolution : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] StrideDefault => new int[0];

			public static int[] DilateDefault => new int[0];

			public static int[] PadDefault => new int[0];

			public static int NumGroupDefault => 1;

			public static int NumDeformableGroupDefault => 1;

			public static long WorkspaceDefault => 1024L;

			public static bool NoBiasDefault => false;

			public static int Im2colStepDefault => 64;

			public static FSharpOption<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout> LayoutDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Offset => operatorArguments.GetInput("offset");

			public Symbol Mask => operatorArguments.GetInput("mask");

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Bias => operatorArguments.GetInput("bias");

			public IEnumerable<int> Kernel
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("kernel");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter kernel is missing"));
				}
			}

			public int NumFilter
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_filter");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_filter is missing"));
				}
			}

			public int[] Stride => operatorArguments.GetParameter("stride", StrideDefault);

			public int[] Dilate => operatorArguments.GetParameter("dilate", DilateDefault);

			public int[] Pad => operatorArguments.GetParameter("pad", PadDefault);

			public int NumGroup => operatorArguments.GetParameter("num_group", NumGroupDefault);

			public int NumDeformableGroup => operatorArguments.GetParameter("num_deformable_group", NumDeformableGroupDefault);

			public long Workspace => operatorArguments.GetParameter("workspace", WorkspaceDefault);

			public bool NoBias => operatorArguments.GetParameter("no_bias", NoBiasDefault);

			public int Im2colStep => operatorArguments.GetParameter("im2col_step", Im2colStepDefault);

			public FSharpOption<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout> Layout => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout>>("layout", LayoutDefault);

			internal ContribModulatedDeformableConvolution(Arguments<Symbol> operatorArguments)
				: base("_contrib_ModulatedDeformableConvolution", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribModulatedDeformableConvolution CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribModulatedDeformableConvolution(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribModulatedDeformableConvolution(OperatorArguments.AddReplace(args));
			}

			public ContribModulatedDeformableConvolution(Symbol data, Symbol offset, Symbol mask, Symbol weight, Symbol bias, IEnumerable<int> kernel, int numFilter, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<int> numDeformableGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<int> im2colStep, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout> layout)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewInput(offset)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mask", OpArg<Symbol>.NewInput(mask)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(bias)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004037455_002D3200(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004037456_002D3201(), dilate))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004037457_002D3202(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037458_002D3203(), numGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_deformable_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037459_002D3204(), numDeformableGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_004037460_002D3205(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004037461_002D3206(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("im2col_step", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037462_002D3207(), im2colStep))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout, object>((FSharpFunc<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout, object>)new operatorArguments_004037463_002D3208(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))))))
			{
			}

			public ContribModulatedDeformableConvolution(IEnumerable<int> kernel, int numFilter, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> offset, [Optional] [OptionalArgument] FSharpOption<Symbol> mask, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<int> numDeformableGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<int> im2colStep, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout> layout)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol offset2 = Operators.DefaultArg<Symbol>(offset, (Symbol)new ImplicitVariable());
				Symbol mask2 = Operators.DefaultArg<Symbol>(mask, (Symbol)new ImplicitVariable());
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(bias, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewInput(offset2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mask", OpArg<Symbol>.NewInput(mask2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004037559_002D3209(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004037560_002D3210(), dilate))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004037561_002D3211(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037562_002D3212(), numGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_deformable_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037563_002D3213(), numDeformableGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_004037564_002D3214(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004037565_002D3215(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("im2col_step", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037566_002D3216(), im2colStep))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout, object>((FSharpFunc<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout, object>)new operatorArguments_004037567_002D3217(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))))));
			}

			public ContribModulatedDeformableConvolution With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> offset, [Optional] [OptionalArgument] FSharpOption<Symbol> mask, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> kernel, [Optional] [OptionalArgument] FSharpOption<int> numFilter, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<int> numDeformableGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<int> im2colStep, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout> layout)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004037683_002D3218(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037667_002D3219(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037668_002D3220(), offset), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037669_002D3221(), mask), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037670_002D3222(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037671_002D3223(), bias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037672_002D3224(), kernel), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037673_002D3225(), numFilter), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037674_002D3226(), stride), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037675_002D3227(), dilate), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037676_002D3228(), pad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037677_002D3229(), numGroup), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037678_002D3230(), numDeformableGroup), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037679_002D3231(), workspace), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037680_002D3232(), noBias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037681_002D3233(), im2colStep), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037682_002D3234(), layout), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))))))));
				return new ContribModulatedDeformableConvolution(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribMultiProposal : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int RpnPreNmsTopNDefault => 6000;

			public static int RpnPostNmsTopNDefault => 300;

			public static double ThresholdDefault => 0.7;

			public static int RpnMinSizeDefault => 16;

			public static double[] ScalesDefault => new double[4]
			{
				4.0,
				8.0,
				16.0,
				32.0
			};

			public static double[] RatiosDefault => new double[3]
			{
				0.5,
				1.0,
				2.0
			};

			public static int FeatureStrideDefault => 16;

			public static bool OutputScoreDefault => false;

			public static bool IouLossDefault => false;

			public Symbol ClsProb => operatorArguments.GetInput("cls_prob");

			public Symbol BboxPred => operatorArguments.GetInput("bbox_pred");

			public Symbol ImInfo => operatorArguments.GetInput("im_info");

			public int RpnPreNmsTopN => operatorArguments.GetParameter("rpn_pre_nms_top_n", RpnPreNmsTopNDefault);

			public int RpnPostNmsTopN => operatorArguments.GetParameter("rpn_post_nms_top_n", RpnPostNmsTopNDefault);

			public double Threshold => operatorArguments.GetParameter("threshold", ThresholdDefault);

			public int RpnMinSize => operatorArguments.GetParameter("rpn_min_size", RpnMinSizeDefault);

			public double[] Scales => operatorArguments.GetParameter("scales", ScalesDefault);

			public double[] Ratios => operatorArguments.GetParameter("ratios", RatiosDefault);

			public int FeatureStride => operatorArguments.GetParameter("feature_stride", FeatureStrideDefault);

			public bool OutputScore => operatorArguments.GetParameter("output_score", OutputScoreDefault);

			public bool IouLoss => operatorArguments.GetParameter("iou_loss", IouLossDefault);

			internal ContribMultiProposal(Arguments<Symbol> operatorArguments)
				: base("_contrib_MultiProposal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribMultiProposal CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribMultiProposal(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribMultiProposal(OperatorArguments.AddReplace(args));
			}

			public ContribMultiProposal([Optional] [OptionalArgument] FSharpOption<Symbol> clsProb, [Optional] [OptionalArgument] FSharpOption<Symbol> bboxPred, [Optional] [OptionalArgument] FSharpOption<Symbol> imInfo, [Optional] [OptionalArgument] FSharpOption<int> rpnPreNmsTopN, [Optional] [OptionalArgument] FSharpOption<int> rpnPostNmsTopN, [Optional] [OptionalArgument] FSharpOption<double> threshold, [Optional] [OptionalArgument] FSharpOption<int> rpnMinSize, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> scales, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> ratios, [Optional] [OptionalArgument] FSharpOption<int> featureStride, [Optional] [OptionalArgument] FSharpOption<bool> outputScore, [Optional] [OptionalArgument] FSharpOption<bool> iouLoss)
			{
				Symbol clsProb2 = Operators.DefaultArg<Symbol>(clsProb, (Symbol)new ImplicitVariable());
				Symbol bboxPred2 = Operators.DefaultArg<Symbol>(bboxPred, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(imInfo, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cls_prob", OpArg<Symbol>.NewInput(clsProb2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bbox_pred", OpArg<Symbol>.NewInput(bboxPred2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("im_info", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rpn_pre_nms_top_n", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037723_002D3235(), rpnPreNmsTopN))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rpn_post_nms_top_n", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037724_002D3236(), rpnPostNmsTopN))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("threshold", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004037725_002D3237(), threshold))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rpn_min_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037726_002D3238(), rpnMinSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scales", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_004037727_002D3239(), scales))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("ratios", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_004037728_002D3240(), ratios))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("feature_stride", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037729_002D3241(), featureStride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_score", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004037730_002D3242(), outputScore))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("iou_loss", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004037731_002D3243(), iouLoss))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))));
			}

			public ContribMultiProposal With([Optional] [OptionalArgument] FSharpOption<Symbol> clsProb, [Optional] [OptionalArgument] FSharpOption<Symbol> bboxPred, [Optional] [OptionalArgument] FSharpOption<Symbol> imInfo, [Optional] [OptionalArgument] FSharpOption<int> rpnPreNmsTopN, [Optional] [OptionalArgument] FSharpOption<int> rpnPostNmsTopN, [Optional] [OptionalArgument] FSharpOption<double> threshold, [Optional] [OptionalArgument] FSharpOption<int> rpnMinSize, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> scales, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> ratios, [Optional] [OptionalArgument] FSharpOption<int> featureStride, [Optional] [OptionalArgument] FSharpOption<bool> outputScore, [Optional] [OptionalArgument] FSharpOption<bool> iouLoss)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004037824_002D3244(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037812_002D3245(), clsProb), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037813_002D3246(), bboxPred), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037814_002D3247(), imInfo), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037815_002D3248(), rpnPreNmsTopN), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037816_002D3249(), rpnPostNmsTopN), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037817_002D3250(), threshold), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037818_002D3251(), rpnMinSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037819_002D3252(), scales), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037820_002D3253(), ratios), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037821_002D3254(), featureStride), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037822_002D3255(), outputScore), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037823_002D3256(), iouLoss), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))));
				return new ContribMultiProposal(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribProposal : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int RpnPreNmsTopNDefault => 6000;

			public static int RpnPostNmsTopNDefault => 300;

			public static double ThresholdDefault => 0.7;

			public static int RpnMinSizeDefault => 16;

			public static double[] ScalesDefault => new double[4]
			{
				4.0,
				8.0,
				16.0,
				32.0
			};

			public static double[] RatiosDefault => new double[3]
			{
				0.5,
				1.0,
				2.0
			};

			public static int FeatureStrideDefault => 16;

			public static bool OutputScoreDefault => false;

			public static bool IouLossDefault => false;

			public Symbol ClsProb => operatorArguments.GetInput("cls_prob");

			public Symbol BboxPred => operatorArguments.GetInput("bbox_pred");

			public Symbol ImInfo => operatorArguments.GetInput("im_info");

			public int RpnPreNmsTopN => operatorArguments.GetParameter("rpn_pre_nms_top_n", RpnPreNmsTopNDefault);

			public int RpnPostNmsTopN => operatorArguments.GetParameter("rpn_post_nms_top_n", RpnPostNmsTopNDefault);

			public double Threshold => operatorArguments.GetParameter("threshold", ThresholdDefault);

			public int RpnMinSize => operatorArguments.GetParameter("rpn_min_size", RpnMinSizeDefault);

			public double[] Scales => operatorArguments.GetParameter("scales", ScalesDefault);

			public double[] Ratios => operatorArguments.GetParameter("ratios", RatiosDefault);

			public int FeatureStride => operatorArguments.GetParameter("feature_stride", FeatureStrideDefault);

			public bool OutputScore => operatorArguments.GetParameter("output_score", OutputScoreDefault);

			public bool IouLoss => operatorArguments.GetParameter("iou_loss", IouLossDefault);

			internal ContribProposal(Arguments<Symbol> operatorArguments)
				: base("_contrib_Proposal", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribProposal CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribProposal(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribProposal(OperatorArguments.AddReplace(args));
			}

			public ContribProposal([Optional] [OptionalArgument] FSharpOption<Symbol> clsProb, [Optional] [OptionalArgument] FSharpOption<Symbol> bboxPred, [Optional] [OptionalArgument] FSharpOption<Symbol> imInfo, [Optional] [OptionalArgument] FSharpOption<int> rpnPreNmsTopN, [Optional] [OptionalArgument] FSharpOption<int> rpnPostNmsTopN, [Optional] [OptionalArgument] FSharpOption<double> threshold, [Optional] [OptionalArgument] FSharpOption<int> rpnMinSize, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> scales, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> ratios, [Optional] [OptionalArgument] FSharpOption<int> featureStride, [Optional] [OptionalArgument] FSharpOption<bool> outputScore, [Optional] [OptionalArgument] FSharpOption<bool> iouLoss)
			{
				Symbol clsProb2 = Operators.DefaultArg<Symbol>(clsProb, (Symbol)new ImplicitVariable());
				Symbol bboxPred2 = Operators.DefaultArg<Symbol>(bboxPred, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(imInfo, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cls_prob", OpArg<Symbol>.NewInput(clsProb2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bbox_pred", OpArg<Symbol>.NewInput(bboxPred2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("im_info", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rpn_pre_nms_top_n", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037864_002D3257(), rpnPreNmsTopN))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rpn_post_nms_top_n", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037865_002D3258(), rpnPostNmsTopN))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("threshold", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004037866_002D3259(), threshold))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rpn_min_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037867_002D3260(), rpnMinSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("scales", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_004037868_002D3261(), scales))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("ratios", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<double>, object>((FSharpFunc<IEnumerable<double>, object>)new operatorArguments_004037869_002D3262(), ratios))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("feature_stride", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037870_002D3263(), featureStride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_score", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004037871_002D3264(), outputScore))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("iou_loss", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004037872_002D3265(), iouLoss))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))));
			}

			public ContribProposal With([Optional] [OptionalArgument] FSharpOption<Symbol> clsProb, [Optional] [OptionalArgument] FSharpOption<Symbol> bboxPred, [Optional] [OptionalArgument] FSharpOption<Symbol> imInfo, [Optional] [OptionalArgument] FSharpOption<int> rpnPreNmsTopN, [Optional] [OptionalArgument] FSharpOption<int> rpnPostNmsTopN, [Optional] [OptionalArgument] FSharpOption<double> threshold, [Optional] [OptionalArgument] FSharpOption<int> rpnMinSize, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> scales, [Optional] [OptionalArgument] FSharpOption<IEnumerable<double>> ratios, [Optional] [OptionalArgument] FSharpOption<int> featureStride, [Optional] [OptionalArgument] FSharpOption<bool> outputScore, [Optional] [OptionalArgument] FSharpOption<bool> iouLoss)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004037965_002D3266(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037953_002D3267(), clsProb), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037954_002D3268(), bboxPred), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037955_002D3269(), imInfo), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037956_002D3270(), rpnPreNmsTopN), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037957_002D3271(), rpnPostNmsTopN), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037958_002D3272(), threshold), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037959_002D3273(), rpnMinSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037960_002D3274(), scales), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037961_002D3275(), ratios), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037962_002D3276(), featureStride), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037963_002D3277(), outputScore), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004037964_002D3278(), iouLoss), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))));
				return new ContribProposal(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ContribPSROIPooling : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int GroupSizeDefault => 0;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Rois => operatorArguments.GetInput("rois");

			public double SpatialScale
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("spatial_scale");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter spatial_scale is missing"));
				}
			}

			public int OutputDim
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("output_dim");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter output_dim is missing"));
				}
			}

			public int PooledSize
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("pooled_size");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter pooled_size is missing"));
				}
			}

			public int GroupSize => operatorArguments.GetParameter("group_size", GroupSizeDefault);

			internal ContribPSROIPooling(Arguments<Symbol> operatorArguments)
				: base("_contrib_PSROIPooling", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ContribPSROIPooling CreateFromArguments(Arguments<Symbol> args)
			{
				return new ContribPSROIPooling(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ContribPSROIPooling(OperatorArguments.AddReplace(args));
			}

			public ContribPSROIPooling(Symbol data, Symbol rois, double spatialScale, int outputDim, int pooledSize, [Optional] [OptionalArgument] FSharpOption<int> groupSize)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(rois)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)spatialScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)outputDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)pooledSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("group_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004037992_002D3279(), groupSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public ContribPSROIPooling(double spatialScale, int outputDim, int pooledSize, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> rois, [Optional] [OptionalArgument] FSharpOption<int> groupSize)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(rois, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)spatialScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("output_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)outputDim))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)pooledSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("group_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004038017_002D3280(), groupSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public ContribPSROIPooling With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> rois, [Optional] [OptionalArgument] FSharpOption<double> spatialScale, [Optional] [OptionalArgument] FSharpOption<int> outputDim, [Optional] [OptionalArgument] FSharpOption<int> pooledSize, [Optional] [OptionalArgument] FSharpOption<int> groupSize)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004038056_002D3281(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038050_002D3282(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038051_002D3283(), rois), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038052_002D3284(), spatialScale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038053_002D3285(), outputDim), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038054_002D3286(), pooledSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038055_002D3287(), groupSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new ContribPSROIPooling(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class ConvolutionV1 : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] StrideDefault => new int[0];

			public static int[] DilateDefault => new int[0];

			public static int[] PadDefault => new int[0];

			public static int NumGroupDefault => 1;

			public static long WorkspaceDefault => 1024L;

			public static bool NoBiasDefault => false;

			public static FSharpOption<GeneratedArgumentTypes.CudnnTune> CudnnTuneDefault => null;

			public static bool CudnnOffDefault => false;

			public static FSharpOption<GeneratedArgumentTypes.ConvolutionV1Layout> LayoutDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Weight => operatorArguments.GetInput("weight");

			public Symbol Bias => operatorArguments.GetInput("bias");

			public IEnumerable<int> Kernel
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("kernel");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (IEnumerable<int>)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<IEnumerable<int>, IEnumerable<int>>((PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>>)(object)new PrintfFormat<IEnumerable<int>, Unit, string, IEnumerable<int>, Unit>("Required parameter kernel is missing"));
				}
			}

			public int NumFilter
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("num_filter");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter num_filter is missing"));
				}
			}

			public int[] Stride => operatorArguments.GetParameter("stride", StrideDefault);

			public int[] Dilate => operatorArguments.GetParameter("dilate", DilateDefault);

			public int[] Pad => operatorArguments.GetParameter("pad", PadDefault);

			public int NumGroup => operatorArguments.GetParameter("num_group", NumGroupDefault);

			public long Workspace => operatorArguments.GetParameter("workspace", WorkspaceDefault);

			public bool NoBias => operatorArguments.GetParameter("no_bias", NoBiasDefault);

			public FSharpOption<GeneratedArgumentTypes.CudnnTune> CudnnTune => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.CudnnTune>>("cudnn_tune", CudnnTuneDefault);

			public bool CudnnOff => operatorArguments.GetParameter("cudnn_off", CudnnOffDefault);

			public FSharpOption<GeneratedArgumentTypes.ConvolutionV1Layout> Layout => operatorArguments.GetParameter<FSharpOption<GeneratedArgumentTypes.ConvolutionV1Layout>>("layout", LayoutDefault);

			internal ConvolutionV1(Arguments<Symbol> operatorArguments)
				: base("Convolution_v1", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static ConvolutionV1 CreateFromArguments(Arguments<Symbol> args)
			{
				return new ConvolutionV1(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new ConvolutionV1(OperatorArguments.AddReplace(args));
			}

			public ConvolutionV1(Symbol data, Symbol weight, Symbol bias, IEnumerable<int> kernel, int numFilter, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.CudnnTune> cudnnTune, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ConvolutionV1Layout> layout)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(bias)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004038108_002D3288(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004038109_002D3289(), dilate))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004038110_002D3290(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004038111_002D3291(), numGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_004038112_002D3292(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004038113_002D3293(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_tune", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.CudnnTune, object>((FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>)new operatorArguments_004038114_002D3294(), cudnnTune))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004038115_002D3295(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ConvolutionV1Layout, object>((FSharpFunc<GeneratedArgumentTypes.ConvolutionV1Layout, object>)new operatorArguments_004038116_002D3296(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))))
			{
			}

			public ConvolutionV1(IEnumerable<int> kernel, int numFilter, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.CudnnTune> cudnnTune, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ConvolutionV1Layout> layout)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol weight2 = Operators.DefaultArg<Symbol>(weight, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(bias, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(weight2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)kernel))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)numFilter))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004038167_002D3297(), stride))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004038168_002D3298(), dilate))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004038169_002D3299(), pad))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004038170_002D3300(), numGroup))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(OptionModule.Map<long, object>((FSharpFunc<long, object>)new operatorArguments_004038171_002D3301(), workspace))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004038172_002D3302(), noBias))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_tune", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.CudnnTune, object>((FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>)new operatorArguments_004038173_002D3303(), cudnnTune))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004038174_002D3304(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.ConvolutionV1Layout, object>((FSharpFunc<GeneratedArgumentTypes.ConvolutionV1Layout, object>)new operatorArguments_004038175_002D3305(), layout))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))))))));
			}

			public ConvolutionV1 With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> weight, [Optional] [OptionalArgument] FSharpOption<Symbol> bias, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> kernel, [Optional] [OptionalArgument] FSharpOption<int> numFilter, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> stride, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> dilate, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> pad, [Optional] [OptionalArgument] FSharpOption<int> numGroup, [Optional] [OptionalArgument] FSharpOption<long> workspace, [Optional] [OptionalArgument] FSharpOption<bool> noBias, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.CudnnTune> cudnnTune, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.ConvolutionV1Layout> layout)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004038305_002D3306(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038291_002D3307(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038292_002D3308(), weight), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038293_002D3309(), bias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038294_002D3310(), kernel), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038295_002D3311(), numFilter), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038296_002D3312(), stride), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038297_002D3313(), dilate), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038298_002D3314(), pad), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038299_002D3315(), numGroup), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<long, Tuple<string, OpArg<Symbol>>>((FSharpFunc<long, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038300_002D3316(), workspace), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038301_002D3317(), noBias), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.CudnnTune, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.CudnnTune, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038302_002D3318(), cudnnTune), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038303_002D3319(), cudnnOff), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.ConvolutionV1Layout, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.ConvolutionV1Layout, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038304_002D3320(), layout), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))))))))));
				return new ConvolutionV1(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Correlation : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int KernelSizeDefault => 1;

			public static int MaxDisplacementDefault => 1;

			public static int Stride1Default => 1;

			public static int Stride2Default => 1;

			public static int PadSizeDefault => 0;

			public static bool IsMultiplyDefault => true;

			public Symbol Data1 => operatorArguments.GetInput("data1");

			public Symbol Data2 => operatorArguments.GetInput("data2");

			public int KernelSize => operatorArguments.GetParameter("kernel_size", KernelSizeDefault);

			public int MaxDisplacement => operatorArguments.GetParameter("max_displacement", MaxDisplacementDefault);

			public int Stride1 => operatorArguments.GetParameter("stride1", Stride1Default);

			public int Stride2 => operatorArguments.GetParameter("stride2", Stride2Default);

			public int PadSize => operatorArguments.GetParameter("pad_size", PadSizeDefault);

			public bool IsMultiply => operatorArguments.GetParameter("is_multiply", IsMultiplyDefault);

			internal Correlation(Arguments<Symbol> operatorArguments)
				: base("Correlation", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Correlation CreateFromArguments(Arguments<Symbol> args)
			{
				return new Correlation(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Correlation(OperatorArguments.AddReplace(args));
			}

			public Correlation([Optional] [OptionalArgument] FSharpOption<Symbol> data1, [Optional] [OptionalArgument] FSharpOption<Symbol> data2, [Optional] [OptionalArgument] FSharpOption<int> kernelSize, [Optional] [OptionalArgument] FSharpOption<int> maxDisplacement, [Optional] [OptionalArgument] FSharpOption<int> stride1, [Optional] [OptionalArgument] FSharpOption<int> stride2, [Optional] [OptionalArgument] FSharpOption<int> padSize, [Optional] [OptionalArgument] FSharpOption<bool> isMultiply)
			{
				Symbol data3 = Operators.DefaultArg<Symbol>(data1, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(data2, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data1", OpArg<Symbol>.NewInput(data3)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data2", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("kernel_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004038368_002D3321(), kernelSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("max_displacement", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004038369_002D3322(), maxDisplacement))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride1", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004038370_002D3323(), stride1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("stride2", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004038371_002D3324(), stride2))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("pad_size", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004038372_002D3325(), padSize))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("is_multiply", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004038373_002D3326(), isMultiply))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))));
			}

			public Correlation With([Optional] [OptionalArgument] FSharpOption<Symbol> data1, [Optional] [OptionalArgument] FSharpOption<Symbol> data2, [Optional] [OptionalArgument] FSharpOption<int> kernelSize, [Optional] [OptionalArgument] FSharpOption<int> maxDisplacement, [Optional] [OptionalArgument] FSharpOption<int> stride1, [Optional] [OptionalArgument] FSharpOption<int> stride2, [Optional] [OptionalArgument] FSharpOption<int> padSize, [Optional] [OptionalArgument] FSharpOption<bool> isMultiply)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004038437_002D3327(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038429_002D3328(), data1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038430_002D3329(), data2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038431_002D3330(), kernelSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038432_002D3331(), maxDisplacement), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038433_002D3332(), stride1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038434_002D3333(), stride2), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038435_002D3334(), padSize), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038436_002D3335(), isMultiply), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new Correlation(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class CrossDeviceCopy : SymbolOperator
		{
			internal CrossDeviceCopy(Arguments<Symbol> operatorArguments)
				: base("_CrossDeviceCopy", operatorArguments)
			{
			}

			public static CrossDeviceCopy CreateFromArguments(Arguments<Symbol> args)
			{
				return new CrossDeviceCopy(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new CrossDeviceCopy(OperatorArguments.AddReplace(args));
			}

			public CrossDeviceCopy()
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)(FSharpList<Tuple<string, OpArg<Symbol>>>)((FSharpTypeFunc)new operatorArguments_004038446_002D3336()).Specialize<Tuple<string, OpArg<Symbol>>>()))
			{
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class GridGenerator : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] TargetShapeDefault => new int[2]
			{
				0,
				0
			};

			public Symbol Data => operatorArguments.GetInput("data");

			public GeneratedArgumentTypes.GridGeneratorTransformType TransformType
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("transform_type");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return IntrinsicFunctions.UnboxGeneric<GeneratedArgumentTypes.GridGeneratorTransformType>(v);
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<GeneratedArgumentTypes.GridGeneratorTransformType, GeneratedArgumentTypes.GridGeneratorTransformType>((PrintfFormat<GeneratedArgumentTypes.GridGeneratorTransformType, Unit, string, GeneratedArgumentTypes.GridGeneratorTransformType>)(object)new PrintfFormat<GeneratedArgumentTypes.GridGeneratorTransformType, Unit, string, GeneratedArgumentTypes.GridGeneratorTransformType, Unit>("Required parameter transform_type is missing"));
				}
			}

			public int[] TargetShape => operatorArguments.GetParameter("target_shape", TargetShapeDefault);

			internal GridGenerator(Arguments<Symbol> operatorArguments)
				: base("GridGenerator", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static GridGenerator CreateFromArguments(Arguments<Symbol> args)
			{
				return new GridGenerator(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new GridGenerator(OperatorArguments.AddReplace(args));
			}

			public GridGenerator(Symbol data, GeneratedArgumentTypes.GridGeneratorTransformType transformType, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> targetShape)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transform_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)transformType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("target_shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004038466_002D3337(), targetShape))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public GridGenerator(GeneratedArgumentTypes.GridGeneratorTransformType transformType, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> targetShape)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transform_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)transformType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("target_shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004038481_002D3338(), targetShape))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public GridGenerator With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.GridGeneratorTransformType> transformType, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> targetShape)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004038505_002D3339(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038502_002D3340(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.GridGeneratorTransformType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.GridGeneratorTransformType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038503_002D3341(), transformType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038504_002D3342(), targetShape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new GridGenerator(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class InstanceNorm : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double EpsDefault => 0.001;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Gamma => operatorArguments.GetInput("gamma");

			public Symbol Beta => operatorArguments.GetInput("beta");

			public double Eps => operatorArguments.GetParameter("eps", EpsDefault);

			internal InstanceNorm(Arguments<Symbol> operatorArguments)
				: base("InstanceNorm", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static InstanceNorm CreateFromArguments(Arguments<Symbol> args)
			{
				return new InstanceNorm(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new InstanceNorm(OperatorArguments.AddReplace(args));
			}

			public InstanceNorm([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<double> eps)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol gamma2 = Operators.DefaultArg<Symbol>(gamma, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(beta, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(gamma2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004038570_002D3343(), eps))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public InstanceNorm With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> gamma, [Optional] [OptionalArgument] FSharpOption<Symbol> beta, [Optional] [OptionalArgument] FSharpOption<double> eps)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004038599_002D3344(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038595_002D3345(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038596_002D3346(), gamma), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038597_002D3347(), beta), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038598_002D3348(), eps), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new InstanceNorm(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class L2Normalization : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double EpsDefault => 0.0;

			public static GeneratedArgumentTypes.L2NormalizationMode ModeDefault => GeneratedArgumentTypes.L2NormalizationMode.Instance;

			public Symbol Data => operatorArguments.GetInput("data");

			public double Eps => operatorArguments.GetParameter("eps", EpsDefault);

			public GeneratedArgumentTypes.L2NormalizationMode Mode => operatorArguments.GetParameter("mode", ModeDefault);

			internal L2Normalization(Arguments<Symbol> operatorArguments)
				: base("L2Normalization", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static L2Normalization CreateFromArguments(Arguments<Symbol> args)
			{
				return new L2Normalization(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new L2Normalization(OperatorArguments.AddReplace(args));
			}

			public L2Normalization([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.L2NormalizationMode> mode)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004038671_002D3349(), eps))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.L2NormalizationMode, object>((FSharpFunc<GeneratedArgumentTypes.L2NormalizationMode, object>)new operatorArguments_004038672_002D3350(), mode))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))
			{
			}

			public L2Normalization With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> eps, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.L2NormalizationMode> mode)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004038699_002D3351(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038696_002D3352(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038697_002D3353(), eps), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.L2NormalizationMode, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.L2NormalizationMode, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038698_002D3354(), mode), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))));
				return new L2Normalization(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class MakeLoss : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double GradScaleDefault => 1.0;

			public static double ValidThreshDefault => 0.0;

			public static GeneratedArgumentTypes.Normalization NormalizationDefault => GeneratedArgumentTypes.Normalization.Null;

			public Symbol Data => operatorArguments.GetInput("data");

			public double GradScale => operatorArguments.GetParameter("grad_scale", GradScaleDefault);

			public double ValidThresh => operatorArguments.GetParameter("valid_thresh", ValidThreshDefault);

			public GeneratedArgumentTypes.Normalization Normalization => operatorArguments.GetParameter("normalization", NormalizationDefault);

			internal MakeLoss(Arguments<Symbol> operatorArguments)
				: base("MakeLoss", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static MakeLoss CreateFromArguments(Arguments<Symbol> args)
			{
				return new MakeLoss(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new MakeLoss(OperatorArguments.AddReplace(args));
			}

			public MakeLoss([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> gradScale, [Optional] [OptionalArgument] FSharpOption<double> validThresh, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.Normalization> normalization)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("grad_scale", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004038742_002D3355(), gradScale))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("valid_thresh", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004038743_002D3356(), validThresh))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("normalization", OpArg<Symbol>.NewParameter(OptionModule.Map<GeneratedArgumentTypes.Normalization, object>((FSharpFunc<GeneratedArgumentTypes.Normalization, object>)new operatorArguments_004038744_002D3357(), normalization))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))
			{
			}

			public MakeLoss With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<double> gradScale, [Optional] [OptionalArgument] FSharpOption<double> validThresh, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.Normalization> normalization)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004038779_002D3358(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038775_002D3359(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038776_002D3360(), gradScale), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038777_002D3361(), validThresh), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.Normalization, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.Normalization, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038778_002D3362(), normalization), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new MakeLoss(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SequenceLast : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool UseSequenceLengthDefault => false;

			public static int AxisDefault => 0;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol SequenceLength => operatorArguments.GetInput("sequence_length");

			public bool UseSequenceLength => operatorArguments.GetParameter("use_sequence_length", UseSequenceLengthDefault);

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			internal SequenceLast(Arguments<Symbol> operatorArguments)
				: base("SequenceLast", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SequenceLast CreateFromArguments(Arguments<Symbol> args)
			{
				return new SequenceLast(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SequenceLast(OperatorArguments.AddReplace(args));
			}

			public SequenceLast([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> sequenceLength, [Optional] [OptionalArgument] FSharpOption<bool> useSequenceLength, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(sequenceLength, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sequence_length", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_sequence_length", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004038847_002D3363(), useSequenceLength))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004038848_002D3364(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public SequenceLast With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> sequenceLength, [Optional] [OptionalArgument] FSharpOption<bool> useSequenceLength, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004038880_002D3365(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038876_002D3366(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038877_002D3367(), sequenceLength), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038878_002D3368(), useSequenceLength), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038879_002D3369(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new SequenceLast(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SequenceReverse : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static bool UseSequenceLengthDefault => false;

			public static int AxisDefault => 0;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol SequenceLength => operatorArguments.GetInput("sequence_length");

			public bool UseSequenceLength => operatorArguments.GetParameter("use_sequence_length", UseSequenceLengthDefault);

			public int Axis => operatorArguments.GetParameter("axis", AxisDefault);

			internal SequenceReverse(Arguments<Symbol> operatorArguments)
				: base("SequenceReverse", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SequenceReverse CreateFromArguments(Arguments<Symbol> args)
			{
				return new SequenceReverse(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SequenceReverse(OperatorArguments.AddReplace(args));
			}

			public SequenceReverse([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> sequenceLength, [Optional] [OptionalArgument] FSharpOption<bool> useSequenceLength, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(sequenceLength, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sequence_length", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_sequence_length", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004038969_002D3370(), useSequenceLength))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(OptionModule.Map<int, object>((FSharpFunc<int, object>)new operatorArguments_004038970_002D3371(), axis))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))));
			}

			public SequenceReverse With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> sequenceLength, [Optional] [OptionalArgument] FSharpOption<bool> useSequenceLength, [Optional] [OptionalArgument] FSharpOption<int> axis)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004039002_002D3372(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038998_002D3373(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004038999_002D3374(), sequenceLength), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039000_002D3375(), useSequenceLength), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039001_002D3376(), axis), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))));
				return new SequenceReverse(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SpatialTransformer : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static int[] TargetShapeDefault => new int[2]
			{
				0,
				0
			};

			public static FSharpOption<bool> CudnnOffDefault => null;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Loc => operatorArguments.GetInput("loc");

			public GeneratedArgumentTypes.SpatialTransformerTransformType TransformType
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("transform_type");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return IntrinsicFunctions.UnboxGeneric<GeneratedArgumentTypes.SpatialTransformerTransformType>(v);
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<GeneratedArgumentTypes.SpatialTransformerTransformType, GeneratedArgumentTypes.SpatialTransformerTransformType>((PrintfFormat<GeneratedArgumentTypes.SpatialTransformerTransformType, Unit, string, GeneratedArgumentTypes.SpatialTransformerTransformType>)(object)new PrintfFormat<GeneratedArgumentTypes.SpatialTransformerTransformType, Unit, string, GeneratedArgumentTypes.SpatialTransformerTransformType, Unit>("Required parameter transform_type is missing"));
				}
			}

			public GeneratedArgumentTypes.SamplerType SamplerType
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("sampler_type");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return IntrinsicFunctions.UnboxGeneric<GeneratedArgumentTypes.SamplerType>(v);
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<GeneratedArgumentTypes.SamplerType, GeneratedArgumentTypes.SamplerType>((PrintfFormat<GeneratedArgumentTypes.SamplerType, Unit, string, GeneratedArgumentTypes.SamplerType>)(object)new PrintfFormat<GeneratedArgumentTypes.SamplerType, Unit, string, GeneratedArgumentTypes.SamplerType, Unit>("Required parameter sampler_type is missing"));
				}
			}

			public int[] TargetShape => operatorArguments.GetParameter("target_shape", TargetShapeDefault);

			public FSharpOption<bool> CudnnOff => operatorArguments.GetParameter<FSharpOption<bool>>("cudnn_off", CudnnOffDefault);

			internal SpatialTransformer(Arguments<Symbol> operatorArguments)
				: base("SpatialTransformer", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SpatialTransformer CreateFromArguments(Arguments<Symbol> args)
			{
				return new SpatialTransformer(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SpatialTransformer(OperatorArguments.AddReplace(args));
			}

			public SpatialTransformer(Symbol data, Symbol loc, GeneratedArgumentTypes.SpatialTransformerTransformType transformType, GeneratedArgumentTypes.SamplerType samplerType, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> targetShape, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("loc", OpArg<Symbol>.NewInput(loc)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transform_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)transformType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sampler_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)samplerType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("target_shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004039028_002D3377(), targetShape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004039029_002D3378(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))
			{
			}

			public SpatialTransformer(GeneratedArgumentTypes.SpatialTransformerTransformType transformType, GeneratedArgumentTypes.SamplerType samplerType, [Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> loc, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> targetShape, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(loc, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("loc", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("transform_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)transformType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("sampler_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)samplerType))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("target_shape", OpArg<Symbol>.NewParameter(OptionModule.Map<IEnumerable<int>, object>((FSharpFunc<IEnumerable<int>, object>)new operatorArguments_004039053_002D3379(), targetShape))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004039054_002D3380(), cudnnOff))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))));
			}

			public SpatialTransformer With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> loc, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.SpatialTransformerTransformType> transformType, [Optional] [OptionalArgument] FSharpOption<GeneratedArgumentTypes.SamplerType> samplerType, [Optional] [OptionalArgument] FSharpOption<IEnumerable<int>> targetShape, [Optional] [OptionalArgument] FSharpOption<bool> cudnnOff)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004039096_002D3381(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039090_002D3382(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039091_002D3383(), loc), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.SpatialTransformerTransformType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.SpatialTransformerTransformType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039092_002D3384(), transformType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<GeneratedArgumentTypes.SamplerType, Tuple<string, OpArg<Symbol>>>((FSharpFunc<GeneratedArgumentTypes.SamplerType, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039093_002D3385(), samplerType), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039094_002D3386(), targetShape), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039095_002D3387(), cudnnOff), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))));
				return new SpatialTransformer(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SVMOutput : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public static double MarginDefault => 1.0;

			public static double RegularizationCoefficientDefault => 1.0;

			public static bool UseLinearDefault => false;

			public Symbol Data => operatorArguments.GetInput("data");

			public Symbol Label => operatorArguments.GetInput("label");

			public double Margin => operatorArguments.GetParameter("margin", MarginDefault);

			public double RegularizationCoefficient => operatorArguments.GetParameter("regularization_coefficient", RegularizationCoefficientDefault);

			public bool UseLinear => operatorArguments.GetParameter("use_linear", UseLinearDefault);

			internal SVMOutput(Arguments<Symbol> operatorArguments)
				: base("SVMOutput", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SVMOutput CreateFromArguments(Arguments<Symbol> args)
			{
				return new SVMOutput(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SVMOutput(OperatorArguments.AddReplace(args));
			}

			public SVMOutput([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<double> margin, [Optional] [OptionalArgument] FSharpOption<double> regularizationCoefficient, [Optional] [OptionalArgument] FSharpOption<bool> useLinear)
			{
				Symbol data2 = Operators.DefaultArg<Symbol>(data, (Symbol)new ImplicitVariable());
				Symbol item = Operators.DefaultArg<Symbol>(label, (Symbol)new ImplicitVariable());
				this._002Ector(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(data2)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(item)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("margin", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004039125_002D3388(), margin))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("regularization_coefficient", OpArg<Symbol>.NewParameter(OptionModule.Map<double, object>((FSharpFunc<double, object>)new operatorArguments_004039126_002D3389(), regularizationCoefficient))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("use_linear", OpArg<Symbol>.NewParameter(OptionModule.Map<bool, object>((FSharpFunc<bool, object>)new operatorArguments_004039127_002D3390(), useLinear))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))))));
			}

			public SVMOutput With([Optional] [OptionalArgument] FSharpOption<Symbol> data, [Optional] [OptionalArgument] FSharpOption<Symbol> label, [Optional] [OptionalArgument] FSharpOption<double> margin, [Optional] [OptionalArgument] FSharpOption<double> regularizationCoefficient, [Optional] [OptionalArgument] FSharpOption<bool> useLinear)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004039167_002D3391(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039162_002D3392(), data), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039163_002D3393(), label), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039164_002D3394(), margin), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039165_002D3395(), regularizationCoefficient), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<bool, Tuple<string, OpArg<Symbol>>>((FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039166_002D3396(), useLinear), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()))))));
				return new SVMOutput(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class SetValue : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public double Src
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("src");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (double)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<double, double>((PrintfFormat<double, Unit, string, double>)(object)new PrintfFormat<double, Unit, string, double, Unit>("Required parameter src is missing"));
				}
			}

			internal SetValue(Arguments<Symbol> operatorArguments)
				: base("_set_value", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static SetValue CreateFromArguments(Arguments<Symbol> args)
			{
				return new SetValue(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new SetValue(OperatorArguments.AddReplace(args));
			}

			public SetValue(double src)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("src", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)src))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty())))
			{
			}

			public SetValue With([Optional] [OptionalArgument] FSharpOption<double> src)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004039189_002D3397(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<double, Tuple<string, OpArg<Symbol>>>((FSharpFunc<double, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039188_002D3398(), src), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty()));
				return new SetValue(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		[CompilationMapping(/*Could not decode attribute arguments.*/)]
		public class Imdecode : SymbolOperator
		{
			internal new Arguments<Symbol> operatorArguments;

			public Symbol Mean => operatorArguments.GetInput("mean");

			public int Index
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("index");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter index is missing"));
				}
			}

			public int X0
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("x0");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter x0 is missing"));
				}
			}

			public int Y0
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("y0");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter y0 is missing"));
				}
			}

			public int X1
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("x1");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter x1 is missing"));
				}
			}

			public int Y1
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("y1");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter y1 is missing"));
				}
			}

			public int C
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("c");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter c is missing"));
				}
			}

			public int Size
			{
				get
				{
					FSharpOption<object> parameter = operatorArguments.GetParameter("size");
					if (parameter != null)
					{
						FSharpOption<object> val = parameter;
						object v = val.get_Value();
						return (int)v;
					}
					return ExtraTopLevelOperators.PrintFormatToStringThenFail<int, int>((PrintfFormat<int, Unit, string, int>)(object)new PrintfFormat<int, Unit, string, int, Unit>("Required parameter size is missing"));
				}
			}

			internal Imdecode(Arguments<Symbol> operatorArguments)
				: base("_imdecode", operatorArguments)
			{
				this.operatorArguments = operatorArguments;
			}

			public static Imdecode CreateFromArguments(Arguments<Symbol> args)
			{
				return new Imdecode(args);
			}

			public override Symbol WithArguments(Arguments<Symbol> args)
			{
				return new Imdecode(OperatorArguments.AddReplace(args));
			}

			public Imdecode(Symbol mean, int index, int x0, int y0, int x1, int y1, int c, int size)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(mean)), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("index", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)index))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x0", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x0))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("y0", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)y0))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("y1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)y1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("c", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)c))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)size))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))
			{
			}

			public Imdecode(int index, int x0, int y0, int x1, int y1, int c, int size, [Optional] [OptionalArgument] FSharpOption<Symbol> mean)
				: this(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(Operators.DefaultArg<Symbol>(mean, (Symbol)new ImplicitVariable()))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("index", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)index))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x0", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x0))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("y0", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)y0))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("x1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("y1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)y1))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("c", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)c))), FSharpList<Tuple<string, OpArg<Symbol>>>.Cons(new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)size))), FSharpList<Tuple<string, OpArg<Symbol>>>.get_Empty()))))))))))
			{
			}

			public Imdecode With([Optional] [OptionalArgument] FSharpOption<Symbol> mean, [Optional] [OptionalArgument] FSharpOption<int> index, [Optional] [OptionalArgument] FSharpOption<int> x0, [Optional] [OptionalArgument] FSharpOption<int> y0, [Optional] [OptionalArgument] FSharpOption<int> x1, [Optional] [OptionalArgument] FSharpOption<int> y1, [Optional] [OptionalArgument] FSharpOption<int> c, [Optional] [OptionalArgument] FSharpOption<int> size)
			{
				FSharpList<Tuple<string, OpArg<Symbol>>> operatorArguments = ListModule.Choose<FSharpOption<Tuple<string, OpArg<Symbol>>>, Tuple<string, OpArg<Symbol>>>((FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>)new operatorArguments_004039298_002D3399(), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<Symbol, Tuple<string, OpArg<Symbol>>>((FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039290_002D3400(), mean), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039291_002D3401(), index), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039292_002D3402(), x0), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039293_002D3403(), y0), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039294_002D3404(), x1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039295_002D3405(), y1), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039296_002D3406(), c), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.Cons(OptionModule.Map<int, Tuple<string, OpArg<Symbol>>>((FSharpFunc<int, Tuple<string, OpArg<Symbol>>>)new operatorArguments_004039297_002D3407(), size), FSharpList<FSharpOption<Tuple<string, OpArg<Symbol>>>>.get_Empty())))))))));
				return new Imdecode(OperatorArguments.AddReplace(new Arguments<Symbol>((IEnumerable<Tuple<string, OpArg<Symbol>>>)operatorArguments)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040684 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040684()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040708_002D1 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040708_002D1()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040707_002D2 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040707_002D2()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040726_002D3 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040726_002D3()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040727_002D4 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040727_002D4()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040754_002D5 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040754_002D5()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040751_002D6 : FSharpFunc<string, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040751_002D6()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(string x)
			{
				return new Tuple<string, OpArg<Symbol>>("filename", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040752_002D7 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040752_002D7()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("flag", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040753_002D8 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040753_002D8()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("to_rgb", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040763_002D9 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040763_002D9()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040844_002D10 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040844_002D10()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040845_002D11 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040845_002D11()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040846_002D12 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040846_002D12()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040847_002D13 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040847_002D13()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040848_002D14 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040848_002D14()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040909_002D15 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040909_002D15()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040901_002D16 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040901_002D16()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040902_002D17 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040902_002D17()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040903_002D18 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040903_002D18()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040904_002D19 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040904_002D19()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040905_002D20 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040905_002D20()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040906_002D21 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040906_002D21()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("fix_gamma", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040907_002D22 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040907_002D22()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_global_stats", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040908_002D23 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040908_002D23()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040978_002D24 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040978_002D24()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040979_002D25 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040979_002D25()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040980_002D26 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040980_002D26()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040981_002D27 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040981_002D27()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_0040982_002D28 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_0040982_002D28()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401053_002D29 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401053_002D29()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401054_002D30 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401054_002D30()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401055_002D31 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401055_002D31()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401056_002D32 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401056_002D32()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401057_002D33 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401057_002D33()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401143_002D34 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401143_002D34()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401130_002D35 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401130_002D35()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401131_002D36 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401131_002D36()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401132_002D37 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401132_002D37()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401133_002D38 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401133_002D38()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("var", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401134_002D39 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401134_002D39()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight32", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401135_002D40 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401135_002D40()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401136_002D41 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401136_002D41()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401137_002D42 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401137_002D42()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401138_002D43 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401138_002D43()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401139_002D44 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401139_002D44()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401140_002D45 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401140_002D45()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401141_002D46 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401141_002D46()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401142_002D47 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401142_002D47()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401207_002D48 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401207_002D48()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401208_002D49 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401208_002D49()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401209_002D50 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401209_002D50()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401210_002D51 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401210_002D51()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401211_002D52 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401211_002D52()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401276_002D53 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401276_002D53()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401277_002D54 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401277_002D54()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401278_002D55 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401278_002D55()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401279_002D56 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401279_002D56()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401280_002D57 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401280_002D57()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401361_002D58 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401361_002D58()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401349_002D59 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401349_002D59()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401350_002D60 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401350_002D60()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401351_002D61 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401351_002D61()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401352_002D62 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401352_002D62()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("var", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401353_002D63 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401353_002D63()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401354_002D64 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401354_002D64()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401355_002D65 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401355_002D65()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401356_002D66 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401356_002D66()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401357_002D67 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401357_002D67()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401358_002D68 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401358_002D68()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401359_002D69 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401359_002D69()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401360_002D70 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401360_002D70()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401418_002D71 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401418_002D71()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401419_002D72 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401419_002D72()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401420_002D73 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401420_002D73()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401421_002D74 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401421_002D74()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401422_002D75 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401422_002D75()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class data_00401469 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00401469()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401476_002D76 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401476_002D76()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401477_002D77 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401477_002D77()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401478_002D78 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401478_002D78()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401479_002D79 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401479_002D79()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401480_002D80 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401480_002D80()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401546_002D81 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401546_002D81()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401537_002D82 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401537_002D82()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401538_002D83 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401538_002D83()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401539_002D84 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401539_002D84()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401540_002D85 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401540_002D85()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("etas", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401541_002D86 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401541_002D86()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401542_002D87 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401542_002D87()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401543_002D88 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401543_002D88()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401544_002D89 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401544_002D89()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401545_002D90 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401545_002D90()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401603_002D91 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401603_002D91()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401604_002D92 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401604_002D92()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401605_002D93 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401605_002D93()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401606_002D94 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401606_002D94()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401607_002D95 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401607_002D95()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class data_00401654_002D1 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00401654_002D1()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401661_002D96 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401661_002D96()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401662_002D97 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401662_002D97()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401663_002D98 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401663_002D98()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401664_002D99 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401664_002D99()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401665_002D100 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401665_002D100()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401731_002D101 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401731_002D101()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401722_002D102 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401722_002D102()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401723_002D103 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401723_002D103()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401724_002D104 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401724_002D104()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401725_002D105 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401725_002D105()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("etas", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401726_002D106 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401726_002D106()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401727_002D107 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401727_002D107()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401728_002D108 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401728_002D108()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401729_002D109 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401729_002D109()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401730_002D110 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401730_002D110()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401759_002D111 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401759_002D111()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401778_002D112 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401778_002D112()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401776_002D113 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401776_002D113()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401777_002D114 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401777_002D114()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_00401795_002D2 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00401795_002D2()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401799_002D115 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401799_002D115()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401800_002D116 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401800_002D116()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401827_002D117 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401827_002D117()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401824_002D118 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401824_002D118()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401825_002D119 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401825_002D119()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_arrays", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401826_002D120 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401826_002D120()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("init_output", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401875_002D121 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401875_002D121()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401876_002D122 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401876_002D122()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401877_002D123 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401877_002D123()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401917_002D124 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401917_002D124()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401912_002D125 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401912_002D125()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401913_002D126 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401913_002D126()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401914_002D127 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401914_002D127()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rtol", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401915_002D128 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401915_002D128()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("atol", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401916_002D129 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401916_002D129()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("equal_nan", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401958_002D130 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401958_002D130()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401959_002D131 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401959_002D131()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401960_002D132 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401960_002D132()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401961_002D133 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401961_002D133()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401962_002D134 : FSharpFunc<GeneratedArgumentTypes.ContribBilinearResize2DMode, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401962_002D134()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ContribBilinearResize2DMode value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00401963_002D135 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00401963_002D135()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402027_002D136 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402027_002D136()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402019_002D137 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402019_002D137()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402020_002D138 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402020_002D138()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("like", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402021_002D139 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402021_002D139()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("height", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402022_002D140 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402022_002D140()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("width", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402023_002D141 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402023_002D141()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scale_height", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402024_002D142 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402024_002D142()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scale_width", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402025_002D143 : FSharpFunc<GeneratedArgumentTypes.ContribBilinearResize2DMode, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402025_002D143()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ContribBilinearResize2DMode x)
			{
				return new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402026_002D144 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402026_002D144()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("align_corners", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402062_002D145 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402062_002D145()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402086_002D146 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402086_002D146()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402083_002D147 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402083_002D147()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402084_002D148 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402084_002D148()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("index", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402085_002D149 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402085_002D149()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402179_002D150 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402179_002D150()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402180_002D151 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402180_002D151()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402181_002D152 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402181_002D152()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402182_002D153 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402182_002D153()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402183_002D154 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402183_002D154()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402184_002D155 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402184_002D155()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402185_002D156 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402185_002D156()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402186_002D157 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402186_002D157()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402187_002D158 : FSharpFunc<GeneratedArgumentTypes.Format, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402187_002D158()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.Format value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402188_002D159 : FSharpFunc<GeneratedArgumentTypes.Format, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402188_002D159()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.Format value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402285_002D160 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402285_002D160()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402274_002D161 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402274_002D161()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402275_002D162 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402275_002D162()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("overlap_thresh", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402276_002D163 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402276_002D163()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("valid_thresh", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402277_002D164 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402277_002D164()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("topk", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402278_002D165 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402278_002D165()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("coord_start", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402279_002D166 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402279_002D166()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("score_index", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402280_002D167 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402280_002D167()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("id_index", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402281_002D168 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402281_002D168()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("background_id", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402282_002D169 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402282_002D169()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("force_suppress", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402283_002D170 : FSharpFunc<GeneratedArgumentTypes.Format, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402283_002D170()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.Format x)
			{
				return new Tuple<string, OpArg<Symbol>>("in_format", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402284_002D171 : FSharpFunc<GeneratedArgumentTypes.Format, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402284_002D171()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.Format x)
			{
				return new Tuple<string, OpArg<Symbol>>("out_format", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402324_002D172 : FSharpFunc<GeneratedArgumentTypes.Format, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402324_002D172()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.Format value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402351_002D173 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402351_002D173()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402348_002D174 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402348_002D174()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402349_002D175 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402349_002D175()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402350_002D176 : FSharpFunc<GeneratedArgumentTypes.Format, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402350_002D176()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.Format x)
			{
				return new Tuple<string, OpArg<Symbol>>("format", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402394_002D177 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402394_002D177()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402395_002D178 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402395_002D178()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402435_002D179 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402435_002D179()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402436_002D180 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402436_002D180()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402468_002D181 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402468_002D181()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402464_002D182 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402464_002D182()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402465_002D183 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402465_002D183()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("threshold", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402466_002D184 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402466_002D184()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_ascend", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402467_002D185 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402467_002D185()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("topk", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402541_002D186 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402541_002D186()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402535_002D187 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402535_002D187()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("samples", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402536_002D188 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402536_002D188()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("matches", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402537_002D189 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402537_002D189()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("anchors", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402538_002D190 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402538_002D190()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("refs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402539_002D191 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402539_002D191()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("means", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402540_002D192 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402540_002D192()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("stds", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402577_002D193 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402577_002D193()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402578_002D194 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402578_002D194()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402579_002D195 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402579_002D195()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402580_002D196 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402580_002D196()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402581_002D197 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402581_002D197()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402582_002D198 : FSharpFunc<GeneratedArgumentTypes.Format, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402582_002D198()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.Format value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402649_002D199 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402649_002D199()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402641_002D200 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402641_002D200()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402642_002D201 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402642_002D201()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("anchors", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402643_002D202 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402643_002D202()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("std0", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402644_002D203 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402644_002D203()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("std1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402645_002D204 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402645_002D204()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("std2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402646_002D205 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402646_002D205()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("std3", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402647_002D206 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402647_002D206()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402648_002D207 : FSharpFunc<GeneratedArgumentTypes.Format, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402648_002D207()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.Format x)
			{
				return new Tuple<string, OpArg<Symbol>>("format", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class seedArrays_00402709 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal seedArrays_00402709()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402714_002D208 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402714_002D208()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402715_002D209 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402715_002D209()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402716_002D210 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402716_002D210()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402756_002D211 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402756_002D211()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402751_002D212 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402751_002D212()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("csr_matrix", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402752_002D213 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402752_002D213()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("seed_arrays", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402753_002D214 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402753_002D214()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_hops", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402754_002D215 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402754_002D215()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_neighbor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402755_002D216 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402755_002D216()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_num_vertices", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class seedArrays_00402824_002D1 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal seedArrays_00402824_002D1()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402830_002D217 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402830_002D217()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402831_002D218 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402831_002D218()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402832_002D219 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402832_002D219()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402877_002D220 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402877_002D220()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402871_002D221 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402871_002D221()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("csr_matrix", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402872_002D222 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402872_002D222()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("probability", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402873_002D223 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402873_002D223()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("seed_arrays", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402874_002D224 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402874_002D224()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_hops", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402875_002D225 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402875_002D225()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_neighbor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402876_002D226 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402876_002D226()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_num_vertices", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_00402958_002D3 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00402958_002D3()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402984_002D227 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402984_002D227()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402981_002D228 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402981_002D228()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("graph", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402982_002D229 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402982_002D229()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00402983_002D230 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00402983_002D230()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("return_mapping", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403048_002D231 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403048_002D231()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403045_002D232 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403045_002D232()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403046_002D233 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403046_002D233()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("u", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403047_002D234 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403047_002D234()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("v", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403090_002D235 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403090_002D235()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403089_002D236 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403089_002D236()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class graphData_00403182 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal graphData_00403182()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403254_002D237 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403254_002D237()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403251_002D238 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403251_002D238()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("graph_data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403252_002D239 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403252_002D239()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("return_mapping", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403253_002D240 : FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403253_002D240()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<long> x)
			{
				return new Tuple<string, OpArg<Symbol>>("graph_sizes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403309_002D241 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403309_002D241()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403307_002D242 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403307_002D242()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403308_002D243 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403308_002D243()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403350_002D244 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403350_002D244()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403348_002D245 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403348_002D245()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403349_002D246 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403349_002D246()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403490_002D247 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403490_002D247()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403482_002D248 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403482_002D248()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lda", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403483_002D249 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403483_002D249()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403484_002D250 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403484_002D250()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403485_002D251 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403485_002D251()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("state", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403486_002D252 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403486_002D252()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lags", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403487_002D253 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403487_002D253()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("marks", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403488_002D254 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403488_002D254()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("valid_length", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403489_002D255 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403489_002D255()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_time", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403498_002D256 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403498_002D256()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403563_002D257 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403563_002D257()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403582_002D258 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403582_002D258()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403580_002D259 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403580_002D259()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403581_002D260 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403581_002D260()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403653_002D261 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403653_002D261()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403650_002D262 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403650_002D262()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("old_tensor", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403651_002D263 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403651_002D263()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("index_vector", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403652_002D264 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403652_002D264()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("new_tensor", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403661_002D265 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403661_002D265()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403720_002D266 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403720_002D266()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403719_002D267 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403719_002D267()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("args", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403753_002D268 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403753_002D268()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403786_002D269 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403786_002D269()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403830_002D270 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403830_002D270()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403823_002D271 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403823_002D271()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403824_002D272 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403824_002D272()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weights_sum_sq", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403825_002D273 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403825_002D273()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grads_sum_sq", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403826_002D274 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403826_002D274()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403827_002D275 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403827_002D275()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403828_002D276 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403828_002D276()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403829_002D277 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403829_002D277()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_00403859_002D4 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00403859_002D4()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403893_002D278 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403893_002D278()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403891_002D279 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403891_002D279()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403892_002D280 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403892_002D280()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_arrays", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403929_002D281 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403929_002D281()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403930_002D282 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403930_002D282()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403931_002D283 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403931_002D283()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403932_002D284 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403932_002D284()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403933_002D285 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403933_002D285()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403934_002D286 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403934_002D286()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00403935_002D287 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00403935_002D287()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404012_002D288 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404012_002D288()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404002_002D289 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404002_002D289()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("cls_prob", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404003_002D290 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404003_002D290()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("loc_pred", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404004_002D291 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404004_002D291()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("anchor", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404005_002D292 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404005_002D292()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404006_002D293 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404006_002D293()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("threshold", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404007_002D294 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404007_002D294()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("background_id", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404008_002D295 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404008_002D295()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("nms_threshold", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404009_002D296 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404009_002D296()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("force_suppress", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404010_002D297 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404010_002D297()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("variances", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404011_002D298 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404011_002D298()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("nms_topk", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404036_002D299 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404036_002D299()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404037_002D300 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404037_002D300()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404038_002D301 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404038_002D301()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404039_002D302 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404039_002D302()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404040_002D303 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404040_002D303()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404091_002D304 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404091_002D304()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404085_002D305 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404085_002D305()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404086_002D306 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404086_002D306()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("sizes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404087_002D307 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404087_002D307()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("ratios", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404088_002D308 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404088_002D308()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404089_002D309 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404089_002D309()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("steps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404090_002D310 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404090_002D310()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("offsets", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404125_002D311 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404125_002D311()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404126_002D312 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404126_002D312()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404127_002D313 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404127_002D313()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404128_002D314 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404128_002D314()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404129_002D315 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404129_002D315()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404130_002D316 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404130_002D316()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404199_002D317 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404199_002D317()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404190_002D318 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404190_002D318()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("anchor", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404191_002D319 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404191_002D319()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404192_002D320 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404192_002D320()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("cls_pred", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404193_002D321 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404193_002D321()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("overlap_threshold", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404194_002D322 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404194_002D322()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("ignore_label", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404195_002D323 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404195_002D323()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("negative_mining_ratio", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404196_002D324 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404196_002D324()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("negative_mining_thresh", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404197_002D325 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404197_002D325()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("minimum_negative_samples", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404198_002D326 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404198_002D326()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("variances", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404221_002D327 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404221_002D327()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404240_002D328 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404240_002D328()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404238_002D329 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404238_002D329()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404239_002D330 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404239_002D330()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404287_002D331 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404287_002D331()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404288_002D332 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404288_002D332()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404289_002D333 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404289_002D333()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404335_002D334 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404335_002D334()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404336_002D335 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404336_002D335()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404337_002D336 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404337_002D336()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404387_002D337 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404387_002D337()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404380_002D338 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404380_002D338()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404381_002D339 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404381_002D339()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404382_002D340 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404382_002D340()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("history", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404383_002D341 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404383_002D341()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404384_002D342 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404384_002D342()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404385_002D343 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404385_002D343()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404386_002D344 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404386_002D344()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_00404411_002D5 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00404411_002D5()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404415_002D345 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404415_002D345()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404416_002D346 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404416_002D346()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404417_002D347 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404417_002D347()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404452_002D348 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404452_002D348()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404448_002D349 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404448_002D349()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404449_002D350 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404449_002D350()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404450_002D351 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404450_002D351()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404451_002D352 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404451_002D352()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_00404490_002D6 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00404490_002D6()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404494_002D353 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404494_002D353()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404495_002D354 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404495_002D354()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404496_002D355 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404496_002D355()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404497_002D356 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404497_002D356()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404540_002D357 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404540_002D357()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404535_002D358 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404535_002D358()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404536_002D359 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404536_002D359()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404537_002D360 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404537_002D360()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404538_002D361 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404538_002D361()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404539_002D362 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404539_002D362()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_00404564_002D7 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00404564_002D7()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404568_002D363 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404568_002D363()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404569_002D364 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404569_002D364()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404570_002D365 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404570_002D365()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404605_002D366 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404605_002D366()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404601_002D367 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404601_002D367()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404602_002D368 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404602_002D368()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404603_002D369 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404603_002D369()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404604_002D370 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404604_002D370()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_00404643_002D8 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00404643_002D8()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404647_002D371 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404647_002D371()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404648_002D372 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404648_002D372()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404649_002D373 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404649_002D373()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404650_002D374 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404650_002D374()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404693_002D375 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404693_002D375()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404688_002D376 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404688_002D376()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404689_002D377 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404689_002D377()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404690_002D378 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404690_002D378()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404691_002D379 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404691_002D379()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404692_002D380 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404692_002D380()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404733_002D381 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404733_002D381()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404734_002D382 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404734_002D382()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404735_002D383 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404735_002D383()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404770_002D384 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404770_002D384()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404766_002D385 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404766_002D385()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404767_002D386 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404767_002D386()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404768_002D387 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404768_002D387()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404769_002D388 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404769_002D388()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("c", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404778_002D389 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404778_002D389()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class data_00404809_002D9 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00404809_002D9()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404843_002D390 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404843_002D390()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404841_002D391 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404841_002D391()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404842_002D392 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404842_002D392()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_arrays", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404890_002D393 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404890_002D393()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404891_002D394 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404891_002D394()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404936_002D395 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404936_002D395()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404937_002D396 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404937_002D396()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404979_002D397 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404979_002D397()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404973_002D398 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404973_002D398()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404974_002D399 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404974_002D399()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404975_002D400 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404975_002D400()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404976_002D401 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404976_002D401()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404977_002D402 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404977_002D402()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("sample_ratio", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00404978_002D403 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00404978_002D403()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("position_sensitive", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405023_002D404 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405023_002D404()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405065_002D405 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405065_002D405()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405099_002D406 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405099_002D406()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405094_002D407 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405094_002D407()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405095_002D408 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405095_002D408()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405096_002D409 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405096_002D409()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405097_002D410 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405097_002D410()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405098_002D411 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405098_002D411()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("sampling_ratio", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405145_002D412 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405145_002D412()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405144_002D413 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405144_002D413()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405191_002D414 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405191_002D414()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405190_002D415 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405190_002D415()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405281_002D416 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405281_002D416()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405282_002D417 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405282_002D417()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405283_002D418 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405283_002D418()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405284_002D419 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405284_002D419()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405285_002D420 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405285_002D420()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405286_002D421 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405286_002D421()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405377_002D422 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405377_002D422()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405378_002D423 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405378_002D423()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405379_002D424 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405379_002D424()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405380_002D425 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405380_002D425()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405381_002D426 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405381_002D426()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405382_002D427 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405382_002D427()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405466_002D428 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405466_002D428()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405454_002D429 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405454_002D429()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405455_002D430 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405455_002D430()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405456_002D431 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405456_002D431()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405457_002D432 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405457_002D432()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("moving_mean", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405458_002D433 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405458_002D433()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("moving_var", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405459_002D434 : FSharpFunc<string, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405459_002D434()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(string x)
			{
				return new Tuple<string, OpArg<Symbol>>("key", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405460_002D435 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405460_002D435()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405461_002D436 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405461_002D436()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405462_002D437 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405462_002D437()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("fix_gamma", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405463_002D438 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405463_002D438()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_global_stats", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405464_002D439 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405464_002D439()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405465_002D440 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405465_002D440()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("ndev", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405547_002D441 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405547_002D441()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405545_002D442 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405545_002D442()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("queries_keys_values", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405546_002D443 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405546_002D443()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("heads", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405646_002D444 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405646_002D444()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405643_002D445 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405643_002D445()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("queries_keys_values", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405644_002D446 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405644_002D446()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("attention", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405645_002D447 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405645_002D447()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("heads", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405743_002D448 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405743_002D448()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405740_002D449 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405740_002D449()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("queries", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405741_002D450 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405741_002D450()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("keys_values", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405742_002D451 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405742_002D451()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("heads", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405844_002D452 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405844_002D452()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405841_002D453 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405841_002D453()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("keys_values", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405842_002D454 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405842_002D454()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("attention", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405843_002D455 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405843_002D455()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("heads", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405874_002D456 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405874_002D456()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405873_002D457 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405873_002D457()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class data_00405927_002D10 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00405927_002D10()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405977_002D458 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405977_002D458()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405970_002D459 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405970_002D459()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("fn", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405971_002D460 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405971_002D460()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405972_002D461 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405972_002D461()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405973_002D462 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405973_002D462()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_out_data", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405974_002D463 : FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405974_002D463()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<long> x)
			{
				return new Tuple<string, OpArg<Symbol>>("in_state_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405975_002D464 : FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405975_002D464()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<long> x)
			{
				return new Tuple<string, OpArg<Symbol>>("in_data_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00405976_002D465 : FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00405976_002D465()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<long> x)
			{
				return new Tuple<string, OpArg<Symbol>>("remain_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_00406041_002D11 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00406041_002D11()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406103_002D466 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406103_002D466()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406094_002D467 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406094_002D467()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("cond", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406095_002D468 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406095_002D468()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("func", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406096_002D469 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406096_002D469()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406097_002D470 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406097_002D470()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406098_002D471 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406098_002D471()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_out_data", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406099_002D472 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406099_002D472()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_iterations", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406100_002D473 : FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406100_002D473()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<long> x)
			{
				return new Tuple<string, OpArg<Symbol>>("cond_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406101_002D474 : FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406101_002D474()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<long> x)
			{
				return new Tuple<string, OpArg<Symbol>>("func_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406102_002D475 : FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406102_002D475()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<long> x)
			{
				return new Tuple<string, OpArg<Symbol>>("func_var_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_00406163_002D12 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00406163_002D12()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406219_002D476 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406219_002D476()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406211_002D477 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406211_002D477()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("cond", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406212_002D478 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406212_002D478()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("then_branch", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406213_002D479 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406213_002D479()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("else_branch", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406214_002D480 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406214_002D480()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406215_002D481 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406215_002D481()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406216_002D482 : FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406216_002D482()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<long> x)
			{
				return new Tuple<string, OpArg<Symbol>>("cond_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406217_002D483 : FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406217_002D483()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<long> x)
			{
				return new Tuple<string, OpArg<Symbol>>("then_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406218_002D484 : FSharpFunc<IEnumerable<long>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406218_002D484()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<long> x)
			{
				return new Tuple<string, OpArg<Symbol>>("else_input_locs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_00406258_002D13 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00406258_002D13()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406297_002D485 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406297_002D485()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406295_002D486 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406295_002D486()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406296_002D487 : FSharpFunc<string, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406296_002D487()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(string x)
			{
				return new Tuple<string, OpArg<Symbol>>("op_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406319_002D488 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406319_002D488()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406318_002D489 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406318_002D489()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406327_002D490 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406327_002D490()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406337_002D491 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406337_002D491()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406359_002D492 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406359_002D492()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406360_002D493 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406360_002D493()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406361_002D494 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406361_002D494()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406396_002D495 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406396_002D495()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406392_002D496 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406392_002D496()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406393_002D497 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406393_002D497()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("sparseness_target", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406394_002D498 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406394_002D498()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("penalty", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406395_002D499 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406395_002D499()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406530_002D500 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406530_002D500()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406525_002D501 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406525_002D501()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406526_002D502 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406526_002D502()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406527_002D503 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406527_002D503()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("y", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406528_002D504 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406528_002D504()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("width", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406529_002D505 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406529_002D505()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("height", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406605_002D506 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406605_002D506()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406604_002D507 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406604_002D507()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406685_002D508 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406685_002D508()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406686_002D509 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406686_002D509()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406713_002D510 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406713_002D510()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406710_002D511 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406710_002D511()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406711_002D512 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406711_002D512()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406712_002D513 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406712_002D513()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("std", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406739_002D514 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406739_002D514()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406738_002D515 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406738_002D515()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406765_002D516 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406765_002D516()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406764_002D517 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406764_002D517()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406791_002D518 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406791_002D518()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406790_002D519 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406790_002D519()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406817_002D520 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406817_002D520()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406816_002D521 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406816_002D521()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406875_002D522 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406875_002D522()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406872_002D523 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406872_002D523()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406873_002D524 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406873_002D524()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406874_002D525 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406874_002D525()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406933_002D526 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406933_002D526()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406930_002D527 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406930_002D527()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406931_002D528 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406931_002D528()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406932_002D529 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406932_002D529()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406991_002D530 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406991_002D530()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406988_002D531 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406988_002D531()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406989_002D532 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406989_002D532()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00406990_002D533 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00406990_002D533()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407049_002D534 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407049_002D534()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407046_002D535 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407046_002D535()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407047_002D536 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407047_002D536()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407048_002D537 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407048_002D537()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_factor", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407129_002D538 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407129_002D538()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407124_002D539 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407124_002D539()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407125_002D540 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407125_002D540()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("brightness", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407126_002D541 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407126_002D541()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("contrast", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407127_002D542 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407127_002D542()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("saturation", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407128_002D543 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407128_002D543()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("hue", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407176_002D544 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407176_002D544()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407174_002D545 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407174_002D545()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407175_002D546 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407175_002D546()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407194_002D547 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407194_002D547()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407213_002D548 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407213_002D548()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407211_002D549 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407211_002D549()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407212_002D550 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407212_002D550()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha_std", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407268_002D551 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407268_002D551()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407269_002D552 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407269_002D552()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407270_002D553 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407270_002D553()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407305_002D554 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407305_002D554()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407301_002D555 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407301_002D555()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407302_002D556 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407302_002D556()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407303_002D557 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407303_002D557()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keep_ratio", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407304_002D558 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407304_002D558()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("interp", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407349_002D559 : FSharpFunc<GeneratedArgumentTypes.LeakyReLUType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407349_002D559()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.LeakyReLUType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407350_002D560 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407350_002D560()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407351_002D561 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407351_002D561()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407352_002D562 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407352_002D562()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407400_002D563 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407400_002D563()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407394_002D564 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407394_002D564()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407395_002D565 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407395_002D565()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407396_002D566 : FSharpFunc<GeneratedArgumentTypes.LeakyReLUType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407396_002D566()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.LeakyReLUType x)
			{
				return new Tuple<string, OpArg<Symbol>>("act_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407397_002D567 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407397_002D567()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("slope", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407398_002D568 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407398_002D568()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lower_bound", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407399_002D569 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407399_002D569()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("upper_bound", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407463_002D570 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407463_002D570()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407461_002D571 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407461_002D571()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407462_002D572 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407462_002D572()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407530_002D573 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407530_002D573()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407528_002D574 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407528_002D574()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407529_002D575 : FSharpFunc<GeneratedArgumentTypes.ActType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407529_002D575()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ActType x)
			{
				return new Tuple<string, OpArg<Symbol>>("act_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407629_002D576 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407629_002D576()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407630_002D577 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407630_002D577()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407631_002D578 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407631_002D578()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407632_002D579 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407632_002D579()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407633_002D580 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407633_002D580()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407634_002D581 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407634_002D581()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407635_002D582 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407635_002D582()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407636_002D583 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407636_002D583()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407637_002D584 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407637_002D584()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407740_002D585 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407740_002D585()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407726_002D586 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407726_002D586()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407727_002D587 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407727_002D587()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407728_002D588 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407728_002D588()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407729_002D589 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407729_002D589()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("moving_mean", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407730_002D590 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407730_002D590()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("moving_var", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407731_002D591 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407731_002D591()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407732_002D592 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407732_002D592()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407733_002D593 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407733_002D593()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("fix_gamma", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407734_002D594 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407734_002D594()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_global_stats", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407735_002D595 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407735_002D595()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407736_002D596 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407736_002D596()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407737_002D597 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407737_002D597()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407738_002D598 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407738_002D598()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_calib_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407739_002D599 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407739_002D599()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_calib_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_00407790_002D14 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00407790_002D14()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407794_002D600 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407794_002D600()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407813_002D601 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407813_002D601()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407811_002D602 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407811_002D602()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407812_002D603 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407812_002D603()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_00407824_002D15 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_00407824_002D15()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407828_002D604 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407828_002D604()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407847_002D605 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407847_002D605()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407845_002D606 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407845_002D606()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407846_002D607 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407846_002D607()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407965_002D608 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407965_002D608()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407966_002D609 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407966_002D609()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407967_002D610 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407967_002D610()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407968_002D611 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407968_002D611()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407969_002D612 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407969_002D612()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407970_002D613 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407970_002D613()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407971_002D614 : FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407971_002D614()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.CudnnTune value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407972_002D615 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407972_002D615()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00407973_002D616 : FSharpFunc<GeneratedArgumentTypes.ConvolutionLayout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00407973_002D616()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ConvolutionLayout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408090_002D617 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408090_002D617()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408091_002D618 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408091_002D618()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408092_002D619 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408092_002D619()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408093_002D620 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408093_002D620()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408094_002D621 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408094_002D621()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408095_002D622 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408095_002D622()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408096_002D623 : FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408096_002D623()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.CudnnTune value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408097_002D624 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408097_002D624()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408098_002D625 : FSharpFunc<GeneratedArgumentTypes.ConvolutionLayout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408098_002D625()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ConvolutionLayout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408204_002D626 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408204_002D626()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408190_002D627 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408190_002D627()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408191_002D628 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408191_002D628()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408192_002D629 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408192_002D629()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408193_002D630 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408193_002D630()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408194_002D631 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408194_002D631()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408195_002D632 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408195_002D632()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408196_002D633 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408196_002D633()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408197_002D634 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408197_002D634()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408198_002D635 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408198_002D635()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408199_002D636 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408199_002D636()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408200_002D637 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408200_002D637()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408201_002D638 : FSharpFunc<GeneratedArgumentTypes.CudnnTune, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408201_002D638()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.CudnnTune x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_tune", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408202_002D639 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408202_002D639()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408203_002D640 : FSharpFunc<GeneratedArgumentTypes.ConvolutionLayout, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408203_002D640()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ConvolutionLayout x)
			{
				return new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408283_002D641 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408283_002D641()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408284_002D642 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408284_002D642()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408285_002D643 : FSharpFunc<GeneratedArgumentTypes.BlankLabel, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408285_002D643()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.BlankLabel value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408335_002D644 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408335_002D644()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408328_002D645 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408328_002D645()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408329_002D646 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408329_002D646()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408330_002D647 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408330_002D647()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data_lengths", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408331_002D648 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408331_002D648()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("label_lengths", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408332_002D649 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408332_002D649()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_data_lengths", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408333_002D650 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408333_002D650()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_label_lengths", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408334_002D651 : FSharpFunc<GeneratedArgumentTypes.BlankLabel, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408334_002D651()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.BlankLabel x)
			{
				return new Tuple<string, OpArg<Symbol>>("blank_label", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408383_002D652 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408383_002D652()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408384_002D653 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408384_002D653()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408385_002D654 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408385_002D654()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408386_002D655 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408386_002D655()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408387_002D656 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408387_002D656()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408388_002D657 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408388_002D657()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408389_002D658 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408389_002D658()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408390_002D659 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408390_002D659()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408391_002D660 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408391_002D660()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408494_002D661 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408494_002D661()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408480_002D662 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408480_002D662()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408481_002D663 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408481_002D663()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408482_002D664 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408482_002D664()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408483_002D665 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408483_002D665()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("moving_mean", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408484_002D666 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408484_002D666()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("moving_var", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408485_002D667 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408485_002D667()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408486_002D668 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408486_002D668()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408487_002D669 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408487_002D669()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("fix_gamma", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408488_002D670 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408488_002D670()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_global_stats", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408489_002D671 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408489_002D671()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408490_002D672 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408490_002D672()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408491_002D673 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408491_002D673()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408492_002D674 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408492_002D674()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_calib_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408493_002D675 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408493_002D675()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_calib_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408541_002D676 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408541_002D676()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408542_002D677 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408542_002D677()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408543_002D678 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408543_002D678()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408544_002D679 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408544_002D679()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408545_002D680 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408545_002D680()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408546_002D681 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408546_002D681()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408547_002D682 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408547_002D682()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408548_002D683 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408548_002D683()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408549_002D684 : FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408549_002D684()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.CudnnTune value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408550_002D685 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408550_002D685()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408551_002D686 : FSharpFunc<GeneratedArgumentTypes.DeconvolutionLayout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408551_002D686()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.DeconvolutionLayout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408597_002D687 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408597_002D687()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408598_002D688 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408598_002D688()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408599_002D689 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408599_002D689()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408600_002D690 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408600_002D690()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408601_002D691 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408601_002D691()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408602_002D692 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408602_002D692()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408603_002D693 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408603_002D693()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408604_002D694 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408604_002D694()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408605_002D695 : FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408605_002D695()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.CudnnTune value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408606_002D696 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408606_002D696()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408607_002D697 : FSharpFunc<GeneratedArgumentTypes.DeconvolutionLayout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408607_002D697()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.DeconvolutionLayout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408726_002D698 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408726_002D698()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408710_002D699 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408710_002D699()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408711_002D700 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408711_002D700()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408712_002D701 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408712_002D701()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408713_002D702 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408713_002D702()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408714_002D703 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408714_002D703()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408715_002D704 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408715_002D704()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408716_002D705 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408716_002D705()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408717_002D706 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408717_002D706()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408718_002D707 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408718_002D707()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("adj", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408719_002D708 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408719_002D708()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("target_shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408720_002D709 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408720_002D709()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408721_002D710 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408721_002D710()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408722_002D711 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408722_002D711()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408723_002D712 : FSharpFunc<GeneratedArgumentTypes.CudnnTune, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408723_002D712()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.CudnnTune x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_tune", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408724_002D713 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408724_002D713()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408725_002D714 : FSharpFunc<GeneratedArgumentTypes.DeconvolutionLayout, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408725_002D714()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.DeconvolutionLayout x)
			{
				return new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408779_002D715 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408779_002D715()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408780_002D716 : FSharpFunc<GeneratedArgumentTypes.DropoutMode, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408780_002D716()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.DropoutMode value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408781_002D717 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408781_002D717()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408782_002D718 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408782_002D718()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408825_002D719 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408825_002D719()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408820_002D720 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408820_002D720()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408821_002D721 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408821_002D721()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408822_002D722 : FSharpFunc<GeneratedArgumentTypes.DropoutMode, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408822_002D722()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.DropoutMode x)
			{
				return new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408823_002D723 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408823_002D723()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408824_002D724 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408824_002D724()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408883_002D725 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408883_002D725()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408884_002D726 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408884_002D726()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408941_002D727 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408941_002D727()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408942_002D728 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408942_002D728()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408984_002D729 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408984_002D729()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408978_002D730 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408978_002D730()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408979_002D731 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408979_002D731()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408980_002D732 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408980_002D732()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408981_002D733 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408981_002D733()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_hidden", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408982_002D734 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408982_002D734()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00408983_002D735 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00408983_002D735()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("flatten", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409026_002D736 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409026_002D736()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409027_002D737 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409027_002D737()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409028_002D738 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409028_002D738()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409073_002D739 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409073_002D739()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409067_002D740 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409067_002D740()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409068_002D741 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409068_002D741()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409069_002D742 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409069_002D742()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409070_002D743 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409070_002D743()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_groups", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409071_002D744 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409071_002D744()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409072_002D745 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409072_002D745()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409128_002D746 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409128_002D746()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409129_002D747 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409129_002D747()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409130_002D748 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409130_002D748()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409175_002D749 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409175_002D749()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409169_002D750 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409169_002D750()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409170_002D751 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409170_002D751()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409171_002D752 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409171_002D752()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409172_002D753 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409172_002D753()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409173_002D754 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409173_002D754()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409174_002D755 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409174_002D755()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409212_002D756 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409212_002D756()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409213_002D757 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409213_002D757()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409214_002D758 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409214_002D758()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409215_002D759 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409215_002D759()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409258_002D760 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409258_002D760()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409253_002D761 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409253_002D761()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409254_002D762 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409254_002D762()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409255_002D763 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409255_002D763()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("temperature", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409256_002D764 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409256_002D764()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409257_002D765 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409257_002D765()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_length", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409297_002D766 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409297_002D766()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409298_002D767 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409298_002D767()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409299_002D768 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409299_002D768()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409335_002D769 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409335_002D769()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409336_002D770 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409336_002D770()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409337_002D771 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409337_002D771()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409377_002D772 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409377_002D772()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409372_002D773 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409372_002D773()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409373_002D774 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409373_002D774()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("nsize", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409374_002D775 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409374_002D775()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409375_002D776 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409375_002D776()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409376_002D777 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409376_002D777()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("knorm", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409416_002D778 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409416_002D778()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409417_002D779 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409417_002D779()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409444_002D780 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409444_002D780()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409441_002D781 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409441_002D781()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409442_002D782 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409442_002D782()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409443_002D783 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409443_002D783()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409530_002D784 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409530_002D784()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409531_002D785 : FSharpFunc<GeneratedArgumentTypes.PoolType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409531_002D785()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.PoolType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409532_002D786 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409532_002D786()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409533_002D787 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409533_002D787()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409534_002D788 : FSharpFunc<GeneratedArgumentTypes.PoolingConvention, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409534_002D788()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.PoolingConvention value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409535_002D789 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409535_002D789()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409536_002D790 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409536_002D790()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409537_002D791 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409537_002D791()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409538_002D792 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409538_002D792()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409539_002D793 : FSharpFunc<GeneratedArgumentTypes.PoolingLayout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409539_002D793()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.PoolingLayout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409633_002D794 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409633_002D794()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409622_002D795 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409622_002D795()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409623_002D796 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409623_002D796()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409624_002D797 : FSharpFunc<GeneratedArgumentTypes.PoolType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409624_002D797()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.PoolType x)
			{
				return new Tuple<string, OpArg<Symbol>>("pool_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409625_002D798 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409625_002D798()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("global_pool", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409626_002D799 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409626_002D799()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409627_002D800 : FSharpFunc<GeneratedArgumentTypes.PoolingConvention, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409627_002D800()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.PoolingConvention x)
			{
				return new Tuple<string, OpArg<Symbol>>("pooling_convention", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409628_002D801 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409628_002D801()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409629_002D802 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409629_002D802()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409630_002D803 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409630_002D803()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("p_value", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409631_002D804 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409631_002D804()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("count_include_pad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409632_002D805 : FSharpFunc<GeneratedArgumentTypes.PoolingLayout, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409632_002D805()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.PoolingLayout x)
			{
				return new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409683_002D806 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409683_002D806()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409684_002D807 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409684_002D807()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409685_002D808 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409685_002D808()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409686_002D809 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409686_002D809()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409734_002D810 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409734_002D810()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409728_002D811 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409728_002D811()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409729_002D812 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409729_002D812()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("length", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409730_002D813 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409730_002D813()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409731_002D814 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409731_002D814()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("temperature", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409732_002D815 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409732_002D815()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409733_002D816 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409733_002D816()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_length", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409775_002D817 : FSharpFunc<GeneratedArgumentTypes.SoftmaxActivationMode, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409775_002D817()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.SoftmaxActivationMode value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409794_002D818 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409794_002D818()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409792_002D819 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409792_002D819()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409793_002D820 : FSharpFunc<GeneratedArgumentTypes.SoftmaxActivationMode, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409793_002D820()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.SoftmaxActivationMode x)
			{
				return new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409841_002D821 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409841_002D821()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409842_002D822 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409842_002D822()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409843_002D823 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409843_002D823()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409844_002D824 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409844_002D824()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409887_002D825 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409887_002D825()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409882_002D826 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409882_002D826()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409883_002D827 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409883_002D827()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409884_002D828 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409884_002D828()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("temperature", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409885_002D829 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409885_002D829()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409886_002D830 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409886_002D830()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_length", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409963_002D831 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409963_002D831()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409964_002D832 : FSharpFunc<GeneratedArgumentTypes.MultiInputMode, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409964_002D832()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.MultiInputMode value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_00409965_002D833 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_00409965_002D833()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class data_004010032_002D16 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_004010032_002D16()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010038_002D834 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010038_002D834()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010039_002D835 : FSharpFunc<GeneratedArgumentTypes.MultiInputMode, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010039_002D835()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.MultiInputMode value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010040_002D836 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010040_002D836()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010085_002D837 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010085_002D837()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010079_002D838 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010079_002D838()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010080_002D839 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010080_002D839()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010081_002D840 : FSharpFunc<GeneratedArgumentTypes.SampleType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010081_002D840()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.SampleType x)
			{
				return new Tuple<string, OpArg<Symbol>>("sample_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010082_002D841 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010082_002D841()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010083_002D842 : FSharpFunc<GeneratedArgumentTypes.MultiInputMode, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010083_002D842()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.MultiInputMode x)
			{
				return new Tuple<string, OpArg<Symbol>>("multi_input_mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010084_002D843 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010084_002D843()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010111_002D844 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010111_002D844()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010110_002D845 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010110_002D845()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010137_002D846 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010137_002D846()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010136_002D847 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010136_002D847()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010196_002D848 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010196_002D848()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010193_002D849 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010193_002D849()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010194_002D850 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010194_002D850()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mask", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010195_002D851 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010195_002D851()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("value", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010240_002D852 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010240_002D852()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010237_002D853 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010237_002D853()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010238_002D854 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010238_002D854()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mask", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010239_002D855 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010239_002D855()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("value", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010257_002D856 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010257_002D856()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010258_002D857 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010258_002D857()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010285_002D858 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010285_002D858()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010282_002D859 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010282_002D859()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010283_002D860 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010283_002D860()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010284_002D861 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010284_002D861()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010302_002D862 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010302_002D862()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010303_002D863 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010303_002D863()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010330_002D864 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010330_002D864()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010327_002D865 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010327_002D865()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010328_002D866 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010328_002D866()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010329_002D867 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010329_002D867()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010354_002D868 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010354_002D868()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010355_002D869 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010355_002D869()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010356_002D870 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010356_002D870()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010357_002D871 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010357_002D871()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010400_002D872 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010400_002D872()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010395_002D873 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010395_002D873()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010396_002D874 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010396_002D874()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010397_002D875 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010397_002D875()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010398_002D876 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010398_002D876()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010399_002D877 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010399_002D877()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("initial", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010422_002D878 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010422_002D878()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010423_002D879 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010423_002D879()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010424_002D880 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010424_002D880()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010459_002D881 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010459_002D881()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010455_002D882 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010455_002D882()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010456_002D883 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010456_002D883()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010457_002D884 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010457_002D884()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010458_002D885 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010458_002D885()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("initial", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010481_002D886 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010481_002D886()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010482_002D887 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010482_002D887()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010483_002D888 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010483_002D888()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010518_002D889 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010518_002D889()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010514_002D890 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010514_002D890()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010515_002D891 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010515_002D891()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010516_002D892 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010516_002D892()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010517_002D893 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010517_002D893()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("initial", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010539_002D894 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010539_002D894()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010540_002D895 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010540_002D895()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010541_002D896 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010541_002D896()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010542_002D897 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010542_002D897()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010585_002D898 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010585_002D898()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010580_002D899 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010580_002D899()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010581_002D900 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010581_002D900()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010582_002D901 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010582_002D901()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010583_002D902 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010583_002D902()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010584_002D903 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010584_002D903()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("initial", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010606_002D904 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010606_002D904()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010607_002D905 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010607_002D905()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010608_002D906 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010608_002D906()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010609_002D907 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010609_002D907()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010652_002D908 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010652_002D908()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010647_002D909 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010647_002D909()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010648_002D910 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010648_002D910()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010649_002D911 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010649_002D911()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010650_002D912 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010650_002D912()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010651_002D913 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010651_002D913()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("initial", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010673_002D914 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010673_002D914()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010674_002D915 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010674_002D915()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010675_002D916 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010675_002D916()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010676_002D917 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010676_002D917()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010719_002D918 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010719_002D918()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010714_002D919 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010714_002D919()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010715_002D920 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010715_002D920()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010716_002D921 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010716_002D921()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010717_002D922 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010717_002D922()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("ddof", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010718_002D923 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010718_002D923()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010740_002D924 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010740_002D924()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010741_002D925 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010741_002D925()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010742_002D926 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010742_002D926()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010743_002D927 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010743_002D927()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010786_002D928 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010786_002D928()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010781_002D929 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010781_002D929()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010782_002D930 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010782_002D930()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010783_002D931 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010783_002D931()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010784_002D932 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010784_002D932()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("ddof", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010785_002D933 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010785_002D933()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010801_002D934 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010801_002D934()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010820_002D935 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010820_002D935()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010818_002D936 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010818_002D936()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("array", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010819_002D937 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010819_002D937()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010840_002D938 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010840_002D938()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010841_002D939 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010841_002D939()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010868_002D940 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010868_002D940()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010865_002D941 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010865_002D941()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010866_002D942 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010866_002D942()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010867_002D943 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010867_002D943()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010885_002D944 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010885_002D944()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010886_002D945 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010886_002D945()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010913_002D946 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010913_002D946()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010910_002D947 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010910_002D947()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010911_002D948 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010911_002D948()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010912_002D949 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010912_002D949()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010964_002D950 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010964_002D950()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010962_002D951 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010962_002D951()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010963_002D952 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010963_002D952()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class data_004010980_002D17 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_004010980_002D17()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010984_002D953 : FSharpFunc<string, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010984_002D953()
			{
			}

			public override object Invoke(string value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004010985_002D954 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004010985_002D954()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011012_002D955 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011012_002D955()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011009_002D956 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011009_002D956()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011010_002D957 : FSharpFunc<string, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011010_002D957()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(string x)
			{
				return new Tuple<string, OpArg<Symbol>>("subscripts", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011011_002D958 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011011_002D958()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("optimize", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011044_002D959 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011044_002D959()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011042_002D960 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011042_002D960()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011043_002D961 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011043_002D961()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011076_002D962 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011076_002D962()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011074_002D963 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011074_002D963()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011075_002D964 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011075_002D964()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011108_002D965 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011108_002D965()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011106_002D966 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011106_002D966()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011107_002D967 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011107_002D967()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011140_002D968 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011140_002D968()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011138_002D969 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011138_002D969()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011139_002D970 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011139_002D970()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011172_002D971 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011172_002D971()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011170_002D972 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011170_002D972()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011171_002D973 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011171_002D973()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011204_002D974 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011204_002D974()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011202_002D975 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011202_002D975()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011203_002D976 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011203_002D976()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011245_002D977 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011245_002D977()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011243_002D978 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011243_002D978()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011244_002D979 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011244_002D979()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011286_002D980 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011286_002D980()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011284_002D981 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011284_002D981()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011285_002D982 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011285_002D982()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011327_002D983 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011327_002D983()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011325_002D984 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011325_002D984()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011326_002D985 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011326_002D985()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011368_002D986 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011368_002D986()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011366_002D987 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011366_002D987()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011367_002D988 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011367_002D988()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011409_002D989 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011409_002D989()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011407_002D990 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011407_002D990()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011408_002D991 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011408_002D991()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011450_002D992 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011450_002D992()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011448_002D993 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011448_002D993()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011449_002D994 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011449_002D994()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011482_002D995 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011482_002D995()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011480_002D996 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011480_002D996()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011481_002D997 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011481_002D997()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011514_002D998 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011514_002D998()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011512_002D999 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011512_002D999()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011513_002D1000 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011513_002D1000()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011546_002D1001 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011546_002D1001()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011544_002D1002 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011544_002D1002()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011545_002D1003 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011545_002D1003()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011578_002D1004 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011578_002D1004()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011576_002D1005 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011576_002D1005()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011577_002D1006 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011577_002D1006()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011610_002D1007 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011610_002D1007()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011608_002D1008 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011608_002D1008()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011609_002D1009 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011609_002D1009()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011651_002D1010 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011651_002D1010()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011649_002D1011 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011649_002D1011()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011650_002D1012 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011650_002D1012()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011692_002D1013 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011692_002D1013()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011690_002D1014 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011690_002D1014()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011691_002D1015 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011691_002D1015()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011733_002D1016 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011733_002D1016()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011731_002D1017 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011731_002D1017()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011732_002D1018 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011732_002D1018()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011774_002D1019 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011774_002D1019()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011772_002D1020 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011772_002D1020()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011773_002D1021 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011773_002D1021()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011815_002D1022 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011815_002D1022()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011813_002D1023 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011813_002D1023()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011814_002D1024 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011814_002D1024()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011856_002D1025 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011856_002D1025()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011854_002D1026 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011854_002D1026()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011855_002D1027 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011855_002D1027()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011897_002D1028 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011897_002D1028()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011895_002D1029 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011895_002D1029()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011896_002D1030 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011896_002D1030()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011938_002D1031 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011938_002D1031()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011936_002D1032 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011936_002D1032()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011937_002D1033 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011937_002D1033()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011973_002D1034 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011973_002D1034()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011971_002D1035 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011971_002D1035()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004011972_002D1036 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004011972_002D1036()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012005_002D1037 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012005_002D1037()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012003_002D1038 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012003_002D1038()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012004_002D1039 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012004_002D1039()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012046_002D1040 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012046_002D1040()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012044_002D1041 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012044_002D1041()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012045_002D1042 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012045_002D1042()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012078_002D1043 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012078_002D1043()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012076_002D1044 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012076_002D1044()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012077_002D1045 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012077_002D1045()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012110_002D1046 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012110_002D1046()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012108_002D1047 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012108_002D1047()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012109_002D1048 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012109_002D1048()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012151_002D1049 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012151_002D1049()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012149_002D1050 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012149_002D1050()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012150_002D1051 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012150_002D1051()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012192_002D1052 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012192_002D1052()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012190_002D1053 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012190_002D1053()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012191_002D1054 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012191_002D1054()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012233_002D1055 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012233_002D1055()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012231_002D1056 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012231_002D1056()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012232_002D1057 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012232_002D1057()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012274_002D1058 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012274_002D1058()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012272_002D1059 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012272_002D1059()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012273_002D1060 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012273_002D1060()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012306_002D1061 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012306_002D1061()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012304_002D1062 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012304_002D1062()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x1", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012305_002D1063 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012305_002D1063()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x2", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012347_002D1064 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012347_002D1064()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012345_002D1065 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012345_002D1065()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012346_002D1066 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012346_002D1066()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012388_002D1067 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012388_002D1067()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012386_002D1068 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012386_002D1068()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012387_002D1069 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012387_002D1069()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012420_002D1070 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012420_002D1070()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012418_002D1071 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012418_002D1071()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x1", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012419_002D1072 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012419_002D1072()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x2", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012452_002D1073 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012452_002D1073()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012450_002D1074 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012450_002D1074()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012451_002D1075 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012451_002D1075()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012493_002D1076 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012493_002D1076()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012491_002D1077 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012491_002D1077()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012492_002D1078 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012492_002D1078()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012534_002D1079 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012534_002D1079()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012532_002D1080 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012532_002D1080()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012533_002D1081 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012533_002D1081()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012563_002D1082 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012563_002D1082()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012562_002D1083 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012562_002D1083()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012592_002D1084 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012592_002D1084()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012591_002D1085 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012591_002D1085()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012618_002D1086 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012618_002D1086()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012617_002D1087 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012617_002D1087()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012645_002D1088 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012645_002D1088()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012644_002D1089 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012644_002D1089()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012672_002D1090 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012672_002D1090()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012671_002D1091 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012671_002D1091()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012701_002D1092 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012701_002D1092()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012700_002D1093 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012700_002D1093()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012731_002D1094 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012731_002D1094()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012730_002D1095 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012730_002D1095()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012760_002D1096 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012760_002D1096()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012759_002D1097 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012759_002D1097()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012790_002D1098 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012790_002D1098()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012789_002D1099 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012789_002D1099()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012820_002D1100 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012820_002D1100()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012819_002D1101 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012819_002D1101()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012851_002D1102 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012851_002D1102()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012850_002D1103 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012850_002D1103()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012882_002D1104 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012882_002D1104()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012881_002D1105 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012881_002D1105()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012911_002D1106 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012911_002D1106()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012910_002D1107 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012910_002D1107()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012940_002D1108 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012940_002D1108()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012939_002D1109 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012939_002D1109()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012969_002D1110 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012969_002D1110()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012968_002D1111 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012968_002D1111()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012998_002D1112 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012998_002D1112()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004012997_002D1113 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004012997_002D1113()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013026_002D1114 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013026_002D1114()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013025_002D1115 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013025_002D1115()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013054_002D1116 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013054_002D1116()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013053_002D1117 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013053_002D1117()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013082_002D1118 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013082_002D1118()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013081_002D1119 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013081_002D1119()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013110_002D1120 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013110_002D1120()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013109_002D1121 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013109_002D1121()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013136_002D1122 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013136_002D1122()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013135_002D1123 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013135_002D1123()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013159_002D1124 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013159_002D1124()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013158_002D1125 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013158_002D1125()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013188_002D1126 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013188_002D1126()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013187_002D1127 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013187_002D1127()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013217_002D1128 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013217_002D1128()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013216_002D1129 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013216_002D1129()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013246_002D1130 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013246_002D1130()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013245_002D1131 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013245_002D1131()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013275_002D1132 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013275_002D1132()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013274_002D1133 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013274_002D1133()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013307_002D1134 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013307_002D1134()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013306_002D1135 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013306_002D1135()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013336_002D1136 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013336_002D1136()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013335_002D1137 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013335_002D1137()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013365_002D1138 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013365_002D1138()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013364_002D1139 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013364_002D1139()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013394_002D1140 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013394_002D1140()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013393_002D1141 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013393_002D1141()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013423_002D1142 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013423_002D1142()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013422_002D1143 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013422_002D1143()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013452_002D1144 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013452_002D1144()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013451_002D1145 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013451_002D1145()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013481_002D1146 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013481_002D1146()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013480_002D1147 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013480_002D1147()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013509_002D1148 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013509_002D1148()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013508_002D1149 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013508_002D1149()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013537_002D1150 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013537_002D1150()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013536_002D1151 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013536_002D1151()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013565_002D1152 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013565_002D1152()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013564_002D1153 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013564_002D1153()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013580_002D1154 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013580_002D1154()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013599_002D1155 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013599_002D1155()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013597_002D1156 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013597_002D1156()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013598_002D1157 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013598_002D1157()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("decimals", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013623_002D1158 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013623_002D1158()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013624_002D1159 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013624_002D1159()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013625_002D1160 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013625_002D1160()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013626_002D1161 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013626_002D1161()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013669_002D1162 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013669_002D1162()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013664_002D1163 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013664_002D1163()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013665_002D1164 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013665_002D1164()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("copy", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013666_002D1165 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013666_002D1165()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("nan", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013667_002D1166 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013667_002D1166()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("posinf", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013668_002D1167 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013668_002D1167()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("neginf", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013677_002D1168 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013677_002D1168()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013692_002D1169 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013692_002D1169()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013693_002D1170 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013693_002D1170()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013715_002D1171 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013715_002D1171()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013713_002D1172 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013713_002D1172()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013714_002D1173 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013714_002D1173()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013729_002D1174 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013729_002D1174()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013730_002D1175 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013730_002D1175()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013752_002D1176 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013752_002D1176()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013750_002D1177 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013750_002D1177()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013751_002D1178 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013751_002D1178()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013766_002D1179 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013766_002D1179()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013767_002D1180 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013767_002D1180()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013789_002D1181 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013789_002D1181()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013787_002D1182 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013787_002D1182()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013788_002D1183 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013788_002D1183()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013812_002D1184 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013812_002D1184()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013811_002D1185 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013811_002D1185()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013835_002D1186 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013835_002D1186()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013834_002D1187 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013834_002D1187()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013857_002D1188 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013857_002D1188()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013858_002D1189 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013858_002D1189()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013859_002D1190 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013859_002D1190()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013860_002D1191 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013860_002D1191()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013861_002D1192 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013861_002D1192()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013912_002D1193 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013912_002D1193()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013906_002D1194 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013906_002D1194()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("start", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013907_002D1195 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013907_002D1195()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("stop", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013908_002D1196 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013908_002D1196()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013909_002D1197 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013909_002D1197()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("repeat", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013910_002D1198 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013910_002D1198()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("infer_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013911_002D1199 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013911_002D1199()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013932_002D1200 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013932_002D1200()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013933_002D1201 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013933_002D1201()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013965_002D1202 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013965_002D1202()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013961_002D1203 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013961_002D1203()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("N", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013962_002D1204 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013962_002D1204()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("M", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013963_002D1205 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013963_002D1205()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013964_002D1206 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013964_002D1206()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013980_002D1207 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013980_002D1207()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013999_002D1208 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013999_002D1208()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013997_002D1209 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013997_002D1209()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("dimensions", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004013998_002D1210 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004013998_002D1210()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014024_002D1211 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014024_002D1211()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014025_002D1212 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014025_002D1212()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014026_002D1213 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014026_002D1213()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014071_002D1214 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014071_002D1214()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014065_002D1215 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014065_002D1215()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("start", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014066_002D1216 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014066_002D1216()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("stop", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014067_002D1217 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014067_002D1217()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014068_002D1218 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014068_002D1218()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("endpoint", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014069_002D1219 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014069_002D1219()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("base", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014070_002D1220 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014070_002D1220()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014086_002D1221 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014086_002D1221()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014105_002D1222 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014105_002D1222()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014103_002D1223 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014103_002D1223()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014104_002D1224 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014104_002D1224()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014125_002D1225 : FSharpFunc<string, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014125_002D1225()
			{
			}

			public override object Invoke(string value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014142_002D1226 : FSharpFunc<string, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014142_002D1226()
			{
			}

			public override object Invoke(string value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014166_002D1227 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014166_002D1227()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014163_002D1228 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014163_002D1228()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014164_002D1229 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014164_002D1229()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("newshape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014165_002D1230 : FSharpFunc<string, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014165_002D1230()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(string x)
			{
				return new Tuple<string, OpArg<Symbol>>("order", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014188_002D1231 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014188_002D1231()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014189_002D1232 : FSharpFunc<string, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014189_002D1232()
			{
			}

			public override object Invoke(string value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014208_002D1233 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014208_002D1233()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014209_002D1234 : FSharpFunc<string, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014209_002D1234()
			{
			}

			public override object Invoke(string value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014241_002D1235 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014241_002D1235()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014237_002D1236 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014237_002D1236()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014238_002D1237 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014238_002D1237()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("newshape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014239_002D1238 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014239_002D1238()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("reverse", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014240_002D1239 : FSharpFunc<string, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014240_002D1239()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(string x)
			{
				return new Tuple<string, OpArg<Symbol>>("order", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014256_002D1240 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014256_002D1240()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014275_002D1241 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014275_002D1241()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014273_002D1242 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014273_002D1242()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014274_002D1243 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014274_002D1243()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_004014289_002D18 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_004014289_002D18()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014293_002D1244 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014293_002D1244()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014312_002D1245 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014312_002D1245()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014310_002D1246 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014310_002D1246()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014311_002D1247 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014311_002D1247()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_004014339_002D19 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_004014339_002D19()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014343_002D1248 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014343_002D1248()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014362_002D1249 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014362_002D1249()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014360_002D1250 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014360_002D1250()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014361_002D1251 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014361_002D1251()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014387_002D1252 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014387_002D1252()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014386_002D1253 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014386_002D1253()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014412_002D1254 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014412_002D1254()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014411_002D1255 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014411_002D1255()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class data_004014426_002D20 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_004014426_002D20()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014430_002D1256 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014430_002D1256()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014449_002D1257 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014449_002D1257()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014447_002D1258 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014447_002D1258()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014448_002D1259 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014448_002D1259()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014466_002D1260 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014466_002D1260()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014467_002D1261 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014467_002D1261()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014494_002D1262 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014494_002D1262()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014491_002D1263 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014491_002D1263()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014492_002D1264 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014492_002D1264()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shift", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014493_002D1265 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014493_002D1265()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014535_002D1266 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014535_002D1266()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014533_002D1267 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014533_002D1267()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014534_002D1268 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014534_002D1268()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014597_002D1269 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014597_002D1269()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014594_002D1270 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014594_002D1270()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014595_002D1271 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014595_002D1271()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("source", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014596_002D1272 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014596_002D1272()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("destination", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014614_002D1273 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014614_002D1273()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014615_002D1274 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014615_002D1274()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014642_002D1275 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014642_002D1275()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014639_002D1276 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014639_002D1276()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014640_002D1277 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014640_002D1277()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014641_002D1278 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014641_002D1278()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014663_002D1279 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014663_002D1279()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014664_002D1280 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014664_002D1280()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014665_002D1281 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014665_002D1281()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014683_002D1282 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014683_002D1282()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014684_002D1283 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014684_002D1283()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014685_002D1284 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014685_002D1284()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014725_002D1285 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014725_002D1285()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014720_002D1286 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014720_002D1286()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014721_002D1287 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014721_002D1287()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014722_002D1288 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014722_002D1288()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014723_002D1289 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014723_002D1289()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("squeeze_axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014724_002D1290 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014724_002D1290()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("sections", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014733_002D1291 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014733_002D1291()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014750_002D1292 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014750_002D1292()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014769_002D1293 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014769_002D1293()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014767_002D1294 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014767_002D1294()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014768_002D1295 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014768_002D1295()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014784_002D1296 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014784_002D1296()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014803_002D1297 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014803_002D1297()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014801_002D1298 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014801_002D1298()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014802_002D1299 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014802_002D1299()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014835_002D1300 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014835_002D1300()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014833_002D1301 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014833_002D1301()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014834_002D1302 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014834_002D1302()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014858_002D1303 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014858_002D1303()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014857_002D1304 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014857_002D1304()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014922_002D1305 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014922_002D1305()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014918_002D1306 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014918_002D1306()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014919_002D1307 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014919_002D1307()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014920_002D1308 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014920_002D1308()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("a_axes_summed", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014921_002D1309 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014921_002D1309()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("b_axes_summed", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014975_002D1310 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014975_002D1310()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014972_002D1311 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014972_002D1311()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014973_002D1312 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014973_002D1312()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("b", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004014974_002D1313 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004014974_002D1313()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015014_002D1314 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015014_002D1314()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015015_002D1315 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015015_002D1315()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015016_002D1316 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015016_002D1316()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015051_002D1317 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015051_002D1317()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015047_002D1318 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015047_002D1318()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015048_002D1319 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015048_002D1319()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015049_002D1320 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015049_002D1320()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015050_002D1321 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015050_002D1321()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015066_002D1322 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015066_002D1322()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015085_002D1323 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015085_002D1323()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015083_002D1324 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015083_002D1324()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015084_002D1325 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015084_002D1325()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015117_002D1326 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015117_002D1326()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015115_002D1327 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015115_002D1327()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015116_002D1328 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015116_002D1328()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015158_002D1329 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015158_002D1329()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015156_002D1330 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015156_002D1330()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015157_002D1331 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015157_002D1331()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015199_002D1332 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015199_002D1332()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015197_002D1333 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015197_002D1333()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015198_002D1334 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015198_002D1334()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015220_002D1335 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015220_002D1335()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015221_002D1336 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015221_002D1336()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015222_002D1337 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015222_002D1337()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015223_002D1338 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015223_002D1338()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015266_002D1339 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015266_002D1339()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015261_002D1340 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015261_002D1340()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015262_002D1341 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015262_002D1341()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("return_index", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015263_002D1342 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015263_002D1342()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("return_inverse", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015264_002D1343 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015264_002D1343()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("return_counts", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015265_002D1344 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015265_002D1344()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015307_002D1345 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015307_002D1345()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015304_002D1346 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015304_002D1346()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("condition", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015305_002D1347 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015305_002D1347()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015306_002D1348 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015306_002D1348()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("y", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015322_002D1349 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015322_002D1349()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015341_002D1350 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015341_002D1350()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015339_002D1351 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015339_002D1351()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("M", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015340_002D1352 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015340_002D1352()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015356_002D1353 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015356_002D1353()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015375_002D1354 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015375_002D1354()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015373_002D1355 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015373_002D1355()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("M", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015374_002D1356 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015374_002D1356()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015390_002D1357 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015390_002D1357()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015409_002D1358 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015409_002D1358()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015407_002D1359 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015407_002D1359()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("M", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015408_002D1360 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015408_002D1360()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015432_002D1361 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015432_002D1361()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015433_002D1362 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015433_002D1362()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015434_002D1363 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015434_002D1363()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015435_002D1364 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015435_002D1364()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015455_002D1365 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015455_002D1365()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015456_002D1366 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015456_002D1366()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015457_002D1367 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015457_002D1367()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015458_002D1368 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015458_002D1368()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015506_002D1369 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015506_002D1369()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015500_002D1370 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015500_002D1370()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015501_002D1371 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015501_002D1371()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_logit", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015502_002D1372 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015502_002D1372()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("prob", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015503_002D1373 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015503_002D1373()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("logit", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015504_002D1374 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015504_002D1374()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015505_002D1375 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015505_002D1375()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015532_002D1376 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015532_002D1376()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015533_002D1377 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015533_002D1377()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015557_002D1378 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015557_002D1378()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015558_002D1379 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015558_002D1379()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015600_002D1380 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015600_002D1380()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015594_002D1381 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015594_002D1381()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015595_002D1382 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015595_002D1382()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("input2", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015596_002D1383 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015596_002D1383()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015597_002D1384 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015597_002D1384()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015598_002D1385 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015598_002D1385()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("replace", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015599_002D1386 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015599_002D1386()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("weighted", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015627_002D1387 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015627_002D1387()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015651_002D1388 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015651_002D1388()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015680_002D1389 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015680_002D1389()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015676_002D1390 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015676_002D1390()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015677_002D1391 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015677_002D1391()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015678_002D1392 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015678_002D1392()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pvals", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015679_002D1393 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015679_002D1393()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015706_002D1394 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015706_002D1394()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015707_002D1395 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015707_002D1395()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015708_002D1396 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015708_002D1396()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015709_002D1397 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015709_002D1397()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015757_002D1398 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015757_002D1398()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015751_002D1399 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015751_002D1399()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015752_002D1400 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015752_002D1400()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("input2", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015753_002D1401 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015753_002D1401()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("loc", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015754_002D1402 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015754_002D1402()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015755_002D1403 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015755_002D1403()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015756_002D1404 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015756_002D1404()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015783_002D1405 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015783_002D1405()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015784_002D1406 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015784_002D1406()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015785_002D1407 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015785_002D1407()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015786_002D1408 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015786_002D1408()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015834_002D1409 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015834_002D1409()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015828_002D1410 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015828_002D1410()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015829_002D1411 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015829_002D1411()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("input2", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015830_002D1412 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015830_002D1412()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("loc", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015831_002D1413 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015831_002D1413()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015832_002D1414 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015832_002D1414()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015833_002D1415 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015833_002D1415()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015860_002D1416 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015860_002D1416()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015861_002D1417 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015861_002D1417()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015862_002D1418 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015862_002D1418()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015863_002D1419 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015863_002D1419()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015911_002D1420 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015911_002D1420()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015905_002D1421 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015905_002D1421()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015906_002D1422 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015906_002D1422()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("input2", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015907_002D1423 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015907_002D1423()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015908_002D1424 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015908_002D1424()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015909_002D1425 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015909_002D1425()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015910_002D1426 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015910_002D1426()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015937_002D1427 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015937_002D1427()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015938_002D1428 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015938_002D1428()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015939_002D1429 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015939_002D1429()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015940_002D1430 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015940_002D1430()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015988_002D1431 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015988_002D1431()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015982_002D1432 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015982_002D1432()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("input1", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015983_002D1433 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015983_002D1433()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("input2", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015984_002D1434 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015984_002D1434()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015985_002D1435 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015985_002D1435()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015986_002D1436 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015986_002D1436()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004015987_002D1437 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004015987_002D1437()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016028_002D1438 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016028_002D1438()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016029_002D1439 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016029_002D1439()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016030_002D1440 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016030_002D1440()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016068_002D1441 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016068_002D1441()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016069_002D1442 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016069_002D1442()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016070_002D1443 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016070_002D1443()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016115_002D1444 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016115_002D1444()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016109_002D1445 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016109_002D1445()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016110_002D1446 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016110_002D1446()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016111_002D1447 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016111_002D1447()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016112_002D1448 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016112_002D1448()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016113_002D1449 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016113_002D1449()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016114_002D1450 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016114_002D1450()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016165_002D1451 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016165_002D1451()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016166_002D1452 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016166_002D1452()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016167_002D1453 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016167_002D1453()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016168_002D1454 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016168_002D1454()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016169_002D1455 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016169_002D1455()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016218_002D1456 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016218_002D1456()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016219_002D1457 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016219_002D1457()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016220_002D1458 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016220_002D1458()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016221_002D1459 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016221_002D1459()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016222_002D1460 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016222_002D1460()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016288_002D1461 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016288_002D1461()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016279_002D1462 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016279_002D1462()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016280_002D1463 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016280_002D1463()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016281_002D1464 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016281_002D1464()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016282_002D1465 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016282_002D1465()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016283_002D1466 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016283_002D1466()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016284_002D1467 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016284_002D1467()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016285_002D1468 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016285_002D1468()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016286_002D1469 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016286_002D1469()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016287_002D1470 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016287_002D1470()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd_lh", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016321_002D1471 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016321_002D1471()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016322_002D1472 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016322_002D1472()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016323_002D1473 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016323_002D1473()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class data_004016347_002D21 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_004016347_002D21()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016353_002D1474 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016353_002D1474()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016354_002D1475 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016354_002D1475()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016355_002D1476 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016355_002D1476()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016400_002D1477 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016400_002D1477()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016394_002D1478 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016394_002D1478()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016395_002D1479 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016395_002D1479()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016396_002D1480 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016396_002D1480()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016397_002D1481 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016397_002D1481()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016398_002D1482 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016398_002D1482()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016399_002D1483 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016399_002D1483()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016447_002D1484 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016447_002D1484()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016448_002D1485 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016448_002D1485()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016449_002D1486 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016449_002D1486()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016450_002D1487 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016450_002D1487()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class data_004016488_002D22 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_004016488_002D22()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016494_002D1488 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016494_002D1488()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016495_002D1489 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016495_002D1489()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016496_002D1490 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016496_002D1490()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016497_002D1491 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016497_002D1491()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016550_002D1492 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016550_002D1492()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016543_002D1493 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016543_002D1493()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016544_002D1494 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016544_002D1494()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016545_002D1495 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016545_002D1495()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016546_002D1496 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016546_002D1496()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016547_002D1497 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016547_002D1497()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016548_002D1498 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016548_002D1498()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016549_002D1499 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016549_002D1499()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016583_002D1500 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016583_002D1500()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016584_002D1501 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016584_002D1501()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016585_002D1502 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016585_002D1502()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class data_004016609_002D23 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_004016609_002D23()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016615_002D1503 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016615_002D1503()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016616_002D1504 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016616_002D1504()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016617_002D1505 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016617_002D1505()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016662_002D1506 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016662_002D1506()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016656_002D1507 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016656_002D1507()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016657_002D1508 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016657_002D1508()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016658_002D1509 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016658_002D1509()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016659_002D1510 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016659_002D1510()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016660_002D1511 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016660_002D1511()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016661_002D1512 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016661_002D1512()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016709_002D1513 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016709_002D1513()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016710_002D1514 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016710_002D1514()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016711_002D1515 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016711_002D1515()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016712_002D1516 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016712_002D1516()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class data_004016750_002D24 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_004016750_002D24()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016756_002D1517 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016756_002D1517()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016757_002D1518 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016757_002D1518()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016758_002D1519 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016758_002D1519()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016759_002D1520 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016759_002D1520()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016812_002D1521 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016812_002D1521()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016805_002D1522 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016805_002D1522()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016806_002D1523 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016806_002D1523()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("lrs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016807_002D1524 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016807_002D1524()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("wds", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016808_002D1525 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016808_002D1525()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016809_002D1526 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016809_002D1526()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016810_002D1527 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016810_002D1527()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016811_002D1528 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016811_002D1528()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_weights", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016853_002D1529 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016853_002D1529()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016854_002D1530 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016854_002D1530()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016855_002D1531 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016855_002D1531()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016856_002D1532 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016856_002D1532()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016895_002D1533 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016895_002D1533()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016896_002D1534 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016896_002D1534()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016897_002D1535 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016897_002D1535()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016898_002D1536 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016898_002D1536()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016951_002D1537 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016951_002D1537()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016944_002D1538 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016944_002D1538()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016945_002D1539 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016945_002D1539()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016946_002D1540 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016946_002D1540()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016947_002D1541 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016947_002D1541()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016948_002D1542 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016948_002D1542()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016949_002D1543 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016949_002D1543()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004016950_002D1544 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004016950_002D1544()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017011_002D1545 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017011_002D1545()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017012_002D1546 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017012_002D1546()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017013_002D1547 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017013_002D1547()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017014_002D1548 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017014_002D1548()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017015_002D1549 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017015_002D1549()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017074_002D1550 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017074_002D1550()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017075_002D1551 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017075_002D1551()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017076_002D1552 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017076_002D1552()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017077_002D1553 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017077_002D1553()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017078_002D1554 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017078_002D1554()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017144_002D1555 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017144_002D1555()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017135_002D1556 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017135_002D1556()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017136_002D1557 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017136_002D1557()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017137_002D1558 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017137_002D1558()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017138_002D1559 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017138_002D1559()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017139_002D1560 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017139_002D1560()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017140_002D1561 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017140_002D1561()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017141_002D1562 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017141_002D1562()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017142_002D1563 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017142_002D1563()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017143_002D1564 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017143_002D1564()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017174_002D1565 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017174_002D1565()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017175_002D1566 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017175_002D1566()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017176_002D1567 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017176_002D1567()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017177_002D1568 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017177_002D1568()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017206_002D1569 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017206_002D1569()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017207_002D1570 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017207_002D1570()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017208_002D1571 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017208_002D1571()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017209_002D1572 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017209_002D1572()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017267_002D1573 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017267_002D1573()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017259_002D1574 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017259_002D1574()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017260_002D1575 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017260_002D1575()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017261_002D1576 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017261_002D1576()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight32", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017262_002D1577 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017262_002D1577()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017263_002D1578 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017263_002D1578()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017264_002D1579 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017264_002D1579()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017265_002D1580 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017265_002D1580()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017266_002D1581 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017266_002D1581()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017302_002D1582 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017302_002D1582()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017303_002D1583 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017303_002D1583()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017304_002D1584 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017304_002D1584()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017305_002D1585 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017305_002D1585()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017306_002D1586 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017306_002D1586()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017341_002D1587 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017341_002D1587()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017342_002D1588 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017342_002D1588()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017343_002D1589 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017343_002D1589()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017344_002D1590 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017344_002D1590()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017345_002D1591 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017345_002D1591()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017416_002D1592 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017416_002D1592()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017406_002D1593 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017406_002D1593()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017407_002D1594 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017407_002D1594()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017408_002D1595 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017408_002D1595()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017409_002D1596 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017409_002D1596()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight32", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017410_002D1597 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017410_002D1597()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017411_002D1598 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017411_002D1598()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017412_002D1599 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017412_002D1599()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017413_002D1600 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017413_002D1600()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017414_002D1601 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017414_002D1601()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017415_002D1602 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017415_002D1602()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017474_002D1603 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017474_002D1603()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017475_002D1604 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017475_002D1604()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017476_002D1605 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017476_002D1605()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017477_002D1606 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017477_002D1606()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017478_002D1607 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017478_002D1607()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017479_002D1608 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017479_002D1608()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017538_002D1609 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017538_002D1609()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017539_002D1610 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017539_002D1610()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017540_002D1611 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017540_002D1611()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017541_002D1612 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017541_002D1612()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017542_002D1613 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017542_002D1613()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017543_002D1614 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017543_002D1614()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017632_002D1615 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017632_002D1615()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017619_002D1616 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017619_002D1616()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017620_002D1617 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017620_002D1617()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017621_002D1618 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017621_002D1618()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("d", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017622_002D1619 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017622_002D1619()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("v", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017623_002D1620 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017623_002D1620()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("z", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017624_002D1621 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017624_002D1621()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017625_002D1622 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017625_002D1622()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("t", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017626_002D1623 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017626_002D1623()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017627_002D1624 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017627_002D1624()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017628_002D1625 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017628_002D1625()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017629_002D1626 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017629_002D1626()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017630_002D1627 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017630_002D1627()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017631_002D1628 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017631_002D1628()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017701_002D1629 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017701_002D1629()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017702_002D1630 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017702_002D1630()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017703_002D1631 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017703_002D1631()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017704_002D1632 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017704_002D1632()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017705_002D1633 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017705_002D1633()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017706_002D1634 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017706_002D1634()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017707_002D1635 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017707_002D1635()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017776_002D1636 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017776_002D1636()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017777_002D1637 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017777_002D1637()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017778_002D1638 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017778_002D1638()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017779_002D1639 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017779_002D1639()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017780_002D1640 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017780_002D1640()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017781_002D1641 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017781_002D1641()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017782_002D1642 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017782_002D1642()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017869_002D1643 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017869_002D1643()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017857_002D1644 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017857_002D1644()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017858_002D1645 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017858_002D1645()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017859_002D1646 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017859_002D1646()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017860_002D1647 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017860_002D1647()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("var", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017861_002D1648 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017861_002D1648()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017862_002D1649 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017862_002D1649()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017863_002D1650 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017863_002D1650()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017864_002D1651 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017864_002D1651()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017865_002D1652 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017865_002D1652()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017866_002D1653 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017866_002D1653()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017867_002D1654 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017867_002D1654()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017868_002D1655 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017868_002D1655()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("lazy_update", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017914_002D1656 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017914_002D1656()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017915_002D1657 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017915_002D1657()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017916_002D1658 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017916_002D1658()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017917_002D1659 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017917_002D1659()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017961_002D1660 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017961_002D1660()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017962_002D1661 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017962_002D1661()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017963_002D1662 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017963_002D1662()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004017964_002D1663 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004017964_002D1663()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018022_002D1664 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018022_002D1664()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018014_002D1665 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018014_002D1665()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018015_002D1666 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018015_002D1666()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018016_002D1667 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018016_002D1667()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018017_002D1668 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018017_002D1668()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018018_002D1669 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018018_002D1669()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018019_002D1670 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018019_002D1670()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018020_002D1671 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018020_002D1671()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018021_002D1672 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018021_002D1672()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018058_002D1673 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018058_002D1673()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018059_002D1674 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018059_002D1674()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018060_002D1675 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018060_002D1675()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018061_002D1676 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018061_002D1676()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018097_002D1677 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018097_002D1677()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018098_002D1678 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018098_002D1678()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018099_002D1679 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018099_002D1679()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018100_002D1680 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018100_002D1680()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018163_002D1681 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018163_002D1681()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018154_002D1682 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018154_002D1682()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018155_002D1683 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018155_002D1683()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018156_002D1684 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018156_002D1684()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mom", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018157_002D1685 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018157_002D1685()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight32", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018158_002D1686 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018158_002D1686()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018159_002D1687 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018159_002D1687()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018160_002D1688 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018160_002D1688()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018161_002D1689 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018161_002D1689()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018162_002D1690 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018162_002D1690()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018232_002D1691 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018232_002D1691()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018233_002D1692 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018233_002D1692()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018234_002D1693 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018234_002D1693()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018235_002D1694 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018235_002D1694()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018236_002D1695 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018236_002D1695()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018237_002D1696 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018237_002D1696()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018305_002D1697 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018305_002D1697()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018306_002D1698 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018306_002D1698()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018307_002D1699 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018307_002D1699()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018308_002D1700 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018308_002D1700()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018309_002D1701 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018309_002D1701()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018310_002D1702 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018310_002D1702()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018384_002D1703 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018384_002D1703()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018374_002D1704 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018374_002D1704()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018375_002D1705 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018375_002D1705()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018376_002D1706 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018376_002D1706()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018377_002D1707 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018377_002D1707()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018378_002D1708 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018378_002D1708()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("gamma1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018379_002D1709 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018379_002D1709()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018380_002D1710 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018380_002D1710()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018381_002D1711 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018381_002D1711()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018382_002D1712 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018382_002D1712()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018383_002D1713 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018383_002D1713()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_weights", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018450_002D1714 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018450_002D1714()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018451_002D1715 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018451_002D1715()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018452_002D1716 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018452_002D1716()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018453_002D1717 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018453_002D1717()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018454_002D1718 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018454_002D1718()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018455_002D1719 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018455_002D1719()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018456_002D1720 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018456_002D1720()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018523_002D1721 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018523_002D1721()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018524_002D1722 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018524_002D1722()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018525_002D1723 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018525_002D1723()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018526_002D1724 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018526_002D1724()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018527_002D1725 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018527_002D1725()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018528_002D1726 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018528_002D1726()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018529_002D1727 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018529_002D1727()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018621_002D1728 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018621_002D1728()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018608_002D1729 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018608_002D1729()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018609_002D1730 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018609_002D1730()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018610_002D1731 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018610_002D1731()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018611_002D1732 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018611_002D1732()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("g", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018612_002D1733 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018612_002D1733()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("delta", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018613_002D1734 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018613_002D1734()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018614_002D1735 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018614_002D1735()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("gamma1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018615_002D1736 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018615_002D1736()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("gamma2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018616_002D1737 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018616_002D1737()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018617_002D1738 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018617_002D1738()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018618_002D1739 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018618_002D1739()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018619_002D1740 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018619_002D1740()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018620_002D1741 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018620_002D1741()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_weights", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018678_002D1742 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018678_002D1742()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018679_002D1743 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018679_002D1743()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018680_002D1744 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018680_002D1744()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018681_002D1745 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018681_002D1745()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018682_002D1746 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018682_002D1746()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018739_002D1747 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018739_002D1747()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018740_002D1748 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018740_002D1748()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018741_002D1749 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018741_002D1749()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018742_002D1750 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018742_002D1750()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018743_002D1751 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018743_002D1751()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018814_002D1752 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018814_002D1752()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018804_002D1753 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018804_002D1753()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018805_002D1754 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018805_002D1754()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018806_002D1755 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018806_002D1755()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("z", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018807_002D1756 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018807_002D1756()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("n", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018808_002D1757 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018808_002D1757()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018809_002D1758 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018809_002D1758()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lamda1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018810_002D1759 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018810_002D1759()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018811_002D1760 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018811_002D1760()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018812_002D1761 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018812_002D1761()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018813_002D1762 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018813_002D1762()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018859_002D1763 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018859_002D1763()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018860_002D1764 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018860_002D1764()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018861_002D1765 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018861_002D1765()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018862_002D1766 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018862_002D1766()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018906_002D1767 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018906_002D1767()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018907_002D1768 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018907_002D1768()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018908_002D1769 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018908_002D1769()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018909_002D1770 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018909_002D1770()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018967_002D1771 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018967_002D1771()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018959_002D1772 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018959_002D1772()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018960_002D1773 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018960_002D1773()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018961_002D1774 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018961_002D1774()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("history", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018962_002D1775 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018962_002D1775()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018963_002D1776 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018963_002D1776()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018964_002D1777 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018964_002D1777()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018965_002D1778 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018965_002D1778()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004018966_002D1779 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004018966_002D1779()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019035_002D1780 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019035_002D1780()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019036_002D1781 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019036_002D1781()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019037_002D1782 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019037_002D1782()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019038_002D1783 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019038_002D1783()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019039_002D1784 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019039_002D1784()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019040_002D1785 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019040_002D1785()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019108_002D1786 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019108_002D1786()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019109_002D1787 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019109_002D1787()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019110_002D1788 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019110_002D1788()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019111_002D1789 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019111_002D1789()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019112_002D1790 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019112_002D1790()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019113_002D1791 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019113_002D1791()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019197_002D1792 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019197_002D1792()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019185_002D1793 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019185_002D1793()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019186_002D1794 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019186_002D1794()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019187_002D1795 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019187_002D1795()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019188_002D1796 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019188_002D1796()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("var", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019189_002D1797 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019189_002D1797()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("t", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019190_002D1798 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019190_002D1798()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("wd", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019191_002D1799 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019191_002D1799()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019192_002D1800 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019192_002D1800()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019193_002D1801 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019193_002D1801()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("epsilon", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019194_002D1802 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019194_002D1802()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("bias_correction", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019195_002D1803 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019195_002D1803()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("rescale_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019196_002D1804 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019196_002D1804()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("clip_gradient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019249_002D1805 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019249_002D1805()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019250_002D1806 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019250_002D1806()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019302_002D1807 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019302_002D1807()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019303_002D1808 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019303_002D1808()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019350_002D1809 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019350_002D1809()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019343_002D1810 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019343_002D1810()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019344_002D1811 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019344_002D1811()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("g", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019345_002D1812 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019345_002D1812()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("r1", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019346_002D1813 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019346_002D1813()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("r2", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019347_002D1814 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019347_002D1814()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lr", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019348_002D1815 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019348_002D1815()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lower_bound", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019349_002D1816 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019349_002D1816()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("upper_bound", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019454_002D1817 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019454_002D1817()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019555_002D1818 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019555_002D1818()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019584_002D1819 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019584_002D1819()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019580_002D1820 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019580_002D1820()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019581_002D1821 : FSharpFunc<GeneratedArgumentTypes.PadMode, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019581_002D1821()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.PadMode x)
			{
				return new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019582_002D1822 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019582_002D1822()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pad_width", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019583_002D1823 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019583_002D1823()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("constant_value", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019609_002D1824 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019609_002D1824()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019633_002D1825 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019633_002D1825()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019630_002D1826 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019630_002D1826()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("hist", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019631_002D1827 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019631_002D1827()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("hist_edges", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019632_002D1828 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019632_002D1828()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_quantized_bins", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019674_002D1829 : FSharpFunc<GeneratedArgumentTypes.ContribDequantizeOutType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019674_002D1829()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ContribDequantizeOutType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019703_002D1830 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019703_002D1830()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019699_002D1831 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019699_002D1831()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019700_002D1832 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019700_002D1832()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_range", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019701_002D1833 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019701_002D1833()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_range", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019702_002D1834 : FSharpFunc<GeneratedArgumentTypes.ContribDequantizeOutType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019702_002D1834()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ContribDequantizeOutType x)
			{
				return new Tuple<string, OpArg<Symbol>>("out_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019786_002D1835 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019786_002D1835()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019782_002D1836 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019782_002D1836()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019783_002D1837 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019783_002D1837()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019784_002D1838 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019784_002D1838()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019785_002D1839 : FSharpFunc<GeneratedArgumentTypes.ActType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019785_002D1839()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ActType x)
			{
				return new Tuple<string, OpArg<Symbol>>("act_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019850_002D1840 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019850_002D1840()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019851_002D1841 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019851_002D1841()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019852_002D1842 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019852_002D1842()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019853_002D1843 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019853_002D1843()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019854_002D1844 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019854_002D1844()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019855_002D1845 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019855_002D1845()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019856_002D1846 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019856_002D1846()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019857_002D1847 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019857_002D1847()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019858_002D1848 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019858_002D1848()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019971_002D1849 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019971_002D1849()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019955_002D1850 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019955_002D1850()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019956_002D1851 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019956_002D1851()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019957_002D1852 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019957_002D1852()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019958_002D1853 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019958_002D1853()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("moving_mean", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019959_002D1854 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019959_002D1854()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("moving_var", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019960_002D1855 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019960_002D1855()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019961_002D1856 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019961_002D1856()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019962_002D1857 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019962_002D1857()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019963_002D1858 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019963_002D1858()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("momentum", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019964_002D1859 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019964_002D1859()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("fix_gamma", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019965_002D1860 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019965_002D1860()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_global_stats", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019966_002D1861 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019966_002D1861()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_mean_var", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019967_002D1862 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019967_002D1862()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019968_002D1863 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019968_002D1863()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019969_002D1864 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019969_002D1864()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_calib_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019970_002D1865 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019970_002D1865()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_calib_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_004019994_002D25 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_004019994_002D25()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004019998_002D1866 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004019998_002D1866()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020017_002D1867 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020017_002D1867()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020015_002D1868 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020015_002D1868()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020016_002D1869 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020016_002D1869()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020088_002D1870 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020088_002D1870()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020089_002D1871 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020089_002D1871()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020090_002D1872 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020090_002D1872()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020091_002D1873 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020091_002D1873()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020092_002D1874 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020092_002D1874()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020093_002D1875 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020093_002D1875()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020094_002D1876 : FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020094_002D1876()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.CudnnTune value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020095_002D1877 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020095_002D1877()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020096_002D1878 : FSharpFunc<GeneratedArgumentTypes.ContribQuantizedConvLayout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020096_002D1878()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ContribQuantizedConvLayout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020172_002D1879 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020172_002D1879()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020173_002D1880 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020173_002D1880()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020174_002D1881 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020174_002D1881()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020175_002D1882 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020175_002D1882()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020176_002D1883 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020176_002D1883()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020177_002D1884 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020177_002D1884()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020178_002D1885 : FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020178_002D1885()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.CudnnTune value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020179_002D1886 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020179_002D1886()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020180_002D1887 : FSharpFunc<GeneratedArgumentTypes.ContribQuantizedConvLayout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020180_002D1887()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ContribQuantizedConvLayout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020316_002D1888 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020316_002D1888()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020296_002D1889 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020296_002D1889()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020297_002D1890 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020297_002D1890()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020298_002D1891 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020298_002D1891()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020299_002D1892 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020299_002D1892()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020300_002D1893 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020300_002D1893()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020301_002D1894 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020301_002D1894()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020302_002D1895 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020302_002D1895()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020303_002D1896 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020303_002D1896()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_bias", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020304_002D1897 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020304_002D1897()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_bias", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020305_002D1898 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020305_002D1898()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020306_002D1899 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020306_002D1899()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020307_002D1900 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020307_002D1900()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020308_002D1901 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020308_002D1901()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020309_002D1902 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020309_002D1902()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020310_002D1903 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020310_002D1903()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020311_002D1904 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020311_002D1904()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020312_002D1905 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020312_002D1905()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020313_002D1906 : FSharpFunc<GeneratedArgumentTypes.CudnnTune, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020313_002D1906()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.CudnnTune x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_tune", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020314_002D1907 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020314_002D1907()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020315_002D1908 : FSharpFunc<GeneratedArgumentTypes.ContribQuantizedConvLayout, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020315_002D1908()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ContribQuantizedConvLayout x)
			{
				return new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020363_002D1909 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020363_002D1909()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020364_002D1910 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020364_002D1910()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020416_002D1911 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020416_002D1911()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020408_002D1912 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020408_002D1912()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020409_002D1913 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020409_002D1913()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020410_002D1914 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020410_002D1914()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs_min", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020411_002D1915 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020411_002D1915()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs_max", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020412_002D1916 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020412_002D1916()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs_min", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020413_002D1917 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020413_002D1917()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs_max", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020414_002D1918 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020414_002D1918()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_calib_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020415_002D1919 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020415_002D1919()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_calib_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020457_002D1920 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020457_002D1920()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020454_002D1921 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020454_002D1921()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020455_002D1922 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020455_002D1922()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020456_002D1923 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020456_002D1923()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020508_002D1924 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020508_002D1924()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020509_002D1925 : FSharpFunc<GeneratedArgumentTypes.PoolType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020509_002D1925()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.PoolType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020510_002D1926 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020510_002D1926()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020511_002D1927 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020511_002D1927()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020512_002D1928 : FSharpFunc<GeneratedArgumentTypes.PoolingConvention, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020512_002D1928()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.PoolingConvention value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020513_002D1929 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020513_002D1929()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020514_002D1930 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020514_002D1930()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020515_002D1931 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020515_002D1931()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020516_002D1932 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020516_002D1932()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020517_002D1933 : FSharpFunc<GeneratedArgumentTypes.ContribQuantizedPoolingLayout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020517_002D1933()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ContribQuantizedPoolingLayout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020621_002D1934 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020621_002D1934()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020608_002D1935 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020608_002D1935()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020609_002D1936 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020609_002D1936()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020610_002D1937 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020610_002D1937()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020611_002D1938 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020611_002D1938()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020612_002D1939 : FSharpFunc<GeneratedArgumentTypes.PoolType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020612_002D1939()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.PoolType x)
			{
				return new Tuple<string, OpArg<Symbol>>("pool_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020613_002D1940 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020613_002D1940()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("global_pool", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020614_002D1941 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020614_002D1941()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020615_002D1942 : FSharpFunc<GeneratedArgumentTypes.PoolingConvention, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020615_002D1942()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.PoolingConvention x)
			{
				return new Tuple<string, OpArg<Symbol>>("pooling_convention", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020616_002D1943 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020616_002D1943()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020617_002D1944 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020617_002D1944()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020618_002D1945 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020618_002D1945()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("p_value", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020619_002D1946 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020619_002D1946()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("count_include_pad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020620_002D1947 : FSharpFunc<GeneratedArgumentTypes.ContribQuantizedPoolingLayout, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020620_002D1947()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ContribQuantizedPoolingLayout x)
			{
				return new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020669_002D1948 : FSharpFunc<GeneratedArgumentTypes.ContribQuantizeOutType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020669_002D1948()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ContribQuantizeOutType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020698_002D1949 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020698_002D1949()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020694_002D1950 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020694_002D1950()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020695_002D1951 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020695_002D1951()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_range", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020696_002D1952 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020696_002D1952()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_range", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020697_002D1953 : FSharpFunc<GeneratedArgumentTypes.ContribQuantizeOutType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020697_002D1953()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ContribQuantizeOutType x)
			{
				return new Tuple<string, OpArg<Symbol>>("out_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020745_002D1954 : FSharpFunc<GeneratedArgumentTypes.ContribQuantizeV2OutType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020745_002D1954()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ContribQuantizeV2OutType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020746_002D1955 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020746_002D1955()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020747_002D1956 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020747_002D1956()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020782_002D1957 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020782_002D1957()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020778_002D1958 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020778_002D1958()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020779_002D1959 : FSharpFunc<GeneratedArgumentTypes.ContribQuantizeV2OutType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020779_002D1959()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ContribQuantizeV2OutType x)
			{
				return new Tuple<string, OpArg<Symbol>>("out_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020780_002D1960 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020780_002D1960()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_calib_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020781_002D1961 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020781_002D1961()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_calib_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020826_002D1962 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020826_002D1962()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020825_002D1963 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020825_002D1963()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020879_002D1964 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020879_002D1964()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020880_002D1965 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020880_002D1965()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020938_002D1966 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020938_002D1966()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020939_002D1967 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020939_002D1967()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021011_002D1968 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021011_002D1968()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004020999_002D1969 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004020999_002D1969()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021000_002D1970 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021000_002D1970()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021001_002D1971 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021001_002D1971()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021002_002D1972 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021002_002D1972()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021003_002D1973 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021003_002D1973()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021004_002D1974 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021004_002D1974()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021005_002D1975 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021005_002D1975()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021006_002D1976 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021006_002D1976()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_bias", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021007_002D1977 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021007_002D1977()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_bias", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021008_002D1978 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021008_002D1978()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_hidden", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021009_002D1979 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021009_002D1979()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021010_002D1980 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021010_002D1980()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("flatten", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021048_002D1981 : FSharpFunc<GeneratedArgumentTypes.ContribRequantizeOutType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021048_002D1981()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ContribRequantizeOutType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021049_002D1982 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021049_002D1982()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021050_002D1983 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021050_002D1983()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021095_002D1984 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021095_002D1984()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021089_002D1985 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021089_002D1985()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021090_002D1986 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021090_002D1986()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_range", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021091_002D1987 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021091_002D1987()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_range", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021092_002D1988 : FSharpFunc<GeneratedArgumentTypes.ContribRequantizeOutType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021092_002D1988()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ContribRequantizeOutType x)
			{
				return new Tuple<string, OpArg<Symbol>>("out_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021093_002D1989 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021093_002D1989()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("min_calib_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021094_002D1990 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021094_002D1990()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_calib_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021144_002D1991 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021144_002D1991()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021145_002D1992 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021145_002D1992()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021177_002D1993 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021177_002D1993()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021173_002D1994 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021173_002D1994()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021174_002D1995 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021174_002D1995()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021175_002D1996 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021175_002D1996()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021176_002D1997 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021176_002D1997()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021226_002D1998 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021226_002D1998()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021227_002D1999 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021227_002D1999()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021259_002D2000 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021259_002D2000()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021255_002D2001 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021255_002D2001()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mu", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021256_002D2002 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021256_002D2002()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sigma", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021257_002D2003 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021257_002D2003()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021258_002D2004 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021258_002D2004()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021308_002D2005 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021308_002D2005()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021309_002D2006 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021309_002D2006()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021341_002D2007 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021341_002D2007()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021337_002D2008 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021337_002D2008()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021338_002D2009 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021338_002D2009()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021339_002D2010 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021339_002D2010()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021340_002D2011 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021340_002D2011()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021385_002D2012 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021385_002D2012()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021386_002D2013 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021386_002D2013()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021413_002D2014 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021413_002D2014()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021410_002D2015 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021410_002D2015()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021411_002D2016 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021411_002D2016()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021412_002D2017 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021412_002D2017()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021459_002D2018 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021459_002D2018()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021460_002D2019 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021460_002D2019()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021487_002D2020 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021487_002D2020()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021484_002D2021 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021484_002D2021()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021485_002D2022 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021485_002D2022()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021486_002D2023 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021486_002D2023()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021538_002D2024 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021538_002D2024()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021539_002D2025 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021539_002D2025()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021571_002D2026 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021571_002D2026()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021567_002D2027 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021567_002D2027()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021568_002D2028 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021568_002D2028()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021569_002D2029 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021569_002D2029()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021570_002D2030 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021570_002D2030()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021622_002D2031 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021622_002D2031()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021623_002D2032 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021623_002D2032()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021655_002D2033 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021655_002D2033()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021651_002D2034 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021651_002D2034()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mu", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021652_002D2035 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021652_002D2035()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021653_002D2036 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021653_002D2036()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021654_002D2037 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021654_002D2037()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021709_002D2038 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021709_002D2038()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021738_002D2039 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021738_002D2039()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021734_002D2040 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021734_002D2040()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021735_002D2041 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021735_002D2041()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021736_002D2042 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021736_002D2042()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021737_002D2043 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021737_002D2043()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021783_002D2044 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021783_002D2044()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021812_002D2045 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021812_002D2045()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021808_002D2046 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021808_002D2046()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021809_002D2047 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021809_002D2047()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mu", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021810_002D2048 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021810_002D2048()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sigma", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021811_002D2049 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021811_002D2049()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021861_002D2050 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021861_002D2050()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021890_002D2051 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021890_002D2051()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021886_002D2052 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021886_002D2052()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021887_002D2053 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021887_002D2053()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021888_002D2054 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021888_002D2054()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021889_002D2055 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021889_002D2055()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021935_002D2056 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021935_002D2056()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021959_002D2057 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021959_002D2057()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021956_002D2058 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021956_002D2058()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021957_002D2059 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021957_002D2059()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004021958_002D2060 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004021958_002D2060()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022004_002D2061 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022004_002D2061()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022028_002D2062 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022028_002D2062()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022025_002D2063 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022025_002D2063()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022026_002D2064 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022026_002D2064()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022027_002D2065 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022027_002D2065()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022075_002D2066 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022075_002D2066()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022104_002D2067 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022104_002D2067()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022100_002D2068 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022100_002D2068()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022101_002D2069 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022101_002D2069()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022102_002D2070 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022102_002D2070()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022103_002D2071 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022103_002D2071()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022152_002D2072 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022152_002D2072()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022181_002D2073 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022181_002D2073()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022177_002D2074 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022177_002D2074()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022178_002D2075 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022178_002D2075()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mu", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022179_002D2076 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022179_002D2076()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022180_002D2077 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022180_002D2077()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022224_002D2078 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022224_002D2078()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022248_002D2079 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022248_002D2079()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022245_002D2080 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022245_002D2080()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sample", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022246_002D2081 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022246_002D2081()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022247_002D2082 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022247_002D2082()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_log", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022296_002D2083 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022296_002D2083()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022297_002D2084 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022297_002D2084()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022298_002D2085 : FSharpFunc<GeneratedArgumentTypes.SampleMultinomialDtype, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022298_002D2085()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.SampleMultinomialDtype value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022333_002D2086 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022333_002D2086()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022329_002D2087 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022329_002D2087()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022330_002D2088 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022330_002D2088()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022331_002D2089 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022331_002D2089()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("get_prob", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022332_002D2090 : FSharpFunc<GeneratedArgumentTypes.SampleMultinomialDtype, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022332_002D2090()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.SampleMultinomialDtype x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022365_002D2091 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022365_002D2091()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022366_002D2092 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022366_002D2092()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022367_002D2093 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022367_002D2093()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022368_002D2094 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022368_002D2094()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022406_002D2095 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022406_002D2095()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022402_002D2096 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022402_002D2096()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022403_002D2097 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022403_002D2097()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022404_002D2098 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022404_002D2098()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022405_002D2099 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022405_002D2099()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022437_002D2100 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022437_002D2100()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022438_002D2101 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022438_002D2101()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022439_002D2102 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022439_002D2102()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022440_002D2103 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022440_002D2103()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022478_002D2104 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022478_002D2104()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022474_002D2105 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022474_002D2105()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("loc", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022475_002D2106 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022475_002D2106()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022476_002D2107 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022476_002D2107()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022477_002D2108 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022477_002D2108()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022506_002D2109 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022506_002D2109()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022507_002D2110 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022507_002D2110()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022508_002D2111 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022508_002D2111()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022509_002D2112 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022509_002D2112()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022547_002D2113 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022547_002D2113()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022543_002D2114 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022543_002D2114()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022544_002D2115 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022544_002D2115()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022545_002D2116 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022545_002D2116()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022546_002D2117 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022546_002D2117()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022573_002D2118 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022573_002D2118()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022574_002D2119 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022574_002D2119()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022575_002D2120 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022575_002D2120()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022605_002D2121 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022605_002D2121()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022602_002D2122 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022602_002D2122()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022603_002D2123 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022603_002D2123()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022604_002D2124 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022604_002D2124()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022632_002D2125 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022632_002D2125()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022633_002D2126 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022633_002D2126()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022634_002D2127 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022634_002D2127()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022664_002D2128 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022664_002D2128()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022661_002D2129 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022661_002D2129()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022662_002D2130 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022662_002D2130()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022663_002D2131 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022663_002D2131()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022694_002D2132 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022694_002D2132()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022695_002D2133 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022695_002D2133()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022696_002D2134 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022696_002D2134()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022697_002D2135 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022697_002D2135()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022735_002D2136 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022735_002D2136()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022731_002D2137 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022731_002D2137()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022732_002D2138 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022732_002D2138()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022733_002D2139 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022733_002D2139()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022734_002D2140 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022734_002D2140()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022766_002D2141 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022766_002D2141()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022767_002D2142 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022767_002D2142()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022768_002D2143 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022768_002D2143()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022769_002D2144 : FSharpFunc<GeneratedArgumentTypes.FloatDType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022769_002D2144()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.FloatDType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022807_002D2145 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022807_002D2145()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022803_002D2146 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022803_002D2146()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("mu", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022804_002D2147 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022804_002D2147()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022805_002D2148 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022805_002D2148()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022806_002D2149 : FSharpFunc<GeneratedArgumentTypes.FloatDType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022806_002D2149()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.FloatDType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022839_002D2150 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022839_002D2150()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022840_002D2151 : FSharpFunc<GeneratedArgumentTypes.RandomRandintDtype, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022840_002D2151()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.RandomRandintDtype value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022872_002D2152 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022872_002D2152()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022868_002D2153 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022868_002D2153()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022869_002D2154 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022869_002D2154()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022870_002D2155 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022870_002D2155()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022871_002D2156 : FSharpFunc<GeneratedArgumentTypes.RandomRandintDtype, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022871_002D2156()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.RandomRandintDtype x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022902_002D2157 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022902_002D2157()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022903_002D2158 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022903_002D2158()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022930_002D2159 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022930_002D2159()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022927_002D2160 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022927_002D2160()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022928_002D2161 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022928_002D2161()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("low", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022929_002D2162 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022929_002D2162()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("high", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022959_002D2163 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022959_002D2163()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022960_002D2164 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022960_002D2164()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022987_002D2165 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022987_002D2165()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022984_002D2166 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022984_002D2166()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022985_002D2167 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022985_002D2167()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("loc", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004022986_002D2168 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004022986_002D2168()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023015_002D2169 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023015_002D2169()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023016_002D2170 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023016_002D2170()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023043_002D2171 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023043_002D2171()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023040_002D2172 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023040_002D2172()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023041_002D2173 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023041_002D2173()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023042_002D2174 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023042_002D2174()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023069_002D2175 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023069_002D2175()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023088_002D2176 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023088_002D2176()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023086_002D2177 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023086_002D2177()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023087_002D2178 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023087_002D2178()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023115_002D2179 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023115_002D2179()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023134_002D2180 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023134_002D2180()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023132_002D2181 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023132_002D2181()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023133_002D2182 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023133_002D2182()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lam", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023164_002D2183 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023164_002D2183()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023165_002D2184 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023165_002D2184()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023192_002D2185 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023192_002D2185()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023189_002D2186 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023189_002D2186()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023190_002D2187 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023190_002D2187()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023191_002D2188 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023191_002D2188()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023224_002D2189 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023224_002D2189()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023225_002D2190 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023225_002D2190()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023252_002D2191 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023252_002D2191()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023249_002D2192 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023249_002D2192()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023250_002D2193 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023250_002D2193()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("mu", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023251_002D2194 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023251_002D2194()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023282_002D2195 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023282_002D2195()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023281_002D2196 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023281_002D2196()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023321_002D2197 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023321_002D2197()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023340_002D2198 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023340_002D2198()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023338_002D2199 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023338_002D2199()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("range_max", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023339_002D2200 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023339_002D2200()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023381_002D2201 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023381_002D2201()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023405_002D2202 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023405_002D2202()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023402_002D2203 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023402_002D2203()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023403_002D2204 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023403_002D2204()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023404_002D2205 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023404_002D2205()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023447_002D2206 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023447_002D2206()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023471_002D2207 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023471_002D2207()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023468_002D2208 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023468_002D2208()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023469_002D2209 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023469_002D2209()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023470_002D2210 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023470_002D2210()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023517_002D2211 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023517_002D2211()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023541_002D2212 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023541_002D2212()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023538_002D2213 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023538_002D2213()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023539_002D2214 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023539_002D2214()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023540_002D2215 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023540_002D2215()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023646_002D2216 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023646_002D2216()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023647_002D2217 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023647_002D2217()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023648_002D2218 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023648_002D2218()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023649_002D2219 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023649_002D2219()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023650_002D2220 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023650_002D2220()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023651_002D2221 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023651_002D2221()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023652_002D2222 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023652_002D2222()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023653_002D2223 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023653_002D2223()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023759_002D2224 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023759_002D2224()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023760_002D2225 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023760_002D2225()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023761_002D2226 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023761_002D2226()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023762_002D2227 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023762_002D2227()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023763_002D2228 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023763_002D2228()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023764_002D2229 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023764_002D2229()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023765_002D2230 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023765_002D2230()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023766_002D2231 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023766_002D2231()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023876_002D2232 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023876_002D2232()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023860_002D2233 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023860_002D2233()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023861_002D2234 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023861_002D2234()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("parameters", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023862_002D2235 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023862_002D2235()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("state", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023863_002D2236 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023863_002D2236()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("state_cell", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023864_002D2237 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023864_002D2237()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sequence_length", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023865_002D2238 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023865_002D2238()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("state_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023866_002D2239 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023866_002D2239()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_layers", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023867_002D2240 : FSharpFunc<GeneratedArgumentTypes.RNNMode, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023867_002D2240()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.RNNMode x)
			{
				return new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023868_002D2241 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023868_002D2241()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("bidirectional", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023869_002D2242 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023869_002D2242()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("p", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023870_002D2243 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023870_002D2243()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("state_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023871_002D2244 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023871_002D2244()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("projection_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023872_002D2245 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023872_002D2245()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lstm_state_clip_min", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023873_002D2246 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023873_002D2246()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("lstm_state_clip_max", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023874_002D2247 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023874_002D2247()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("lstm_state_clip_nan", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004023875_002D2248 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004023875_002D2248()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_sequence_length", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024032_002D2249 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024032_002D2249()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024028_002D2250 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024028_002D2250()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024029_002D2251 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024029_002D2251()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024030_002D2252 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024030_002D2252()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024031_002D2253 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024031_002D2253()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024124_002D2254 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024124_002D2254()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024125_002D2255 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024125_002D2255()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024126_002D2256 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024126_002D2256()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024166_002D2257 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024166_002D2257()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024161_002D2258 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024161_002D2258()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024162_002D2259 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024162_002D2259()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sequence_length", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024163_002D2260 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024163_002D2260()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_sequence_length", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024164_002D2261 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024164_002D2261()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("value", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024165_002D2262 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024165_002D2262()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024246_002D2263 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024246_002D2263()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024247_002D2264 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024247_002D2264()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024324_002D2265 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024324_002D2265()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024325_002D2266 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024325_002D2266()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024357_002D2267 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024357_002D2267()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024353_002D2268 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024353_002D2268()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024354_002D2269 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024354_002D2269()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024355_002D2270 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024355_002D2270()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024356_002D2271 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024356_002D2271()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("squeeze_axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024468_002D2272 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024468_002D2272()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024469_002D2273 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024469_002D2273()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024470_002D2274 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024470_002D2274()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024471_002D2275 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024471_002D2275()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024472_002D2276 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024472_002D2276()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024473_002D2277 : FSharpFunc<GeneratedArgumentTypes.Normalization, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024473_002D2277()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.Normalization value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024474_002D2278 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024474_002D2278()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024475_002D2279 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024475_002D2279()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024555_002D2280 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024555_002D2280()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024545_002D2281 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024545_002D2281()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024546_002D2282 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024546_002D2282()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024547_002D2283 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024547_002D2283()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024548_002D2284 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024548_002D2284()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("ignore_label", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024549_002D2285 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024549_002D2285()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("multi_output", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024550_002D2286 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024550_002D2286()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_ignore", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024551_002D2287 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024551_002D2287()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("preserve_shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024552_002D2288 : FSharpFunc<GeneratedArgumentTypes.Normalization, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024552_002D2288()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.Normalization x)
			{
				return new Tuple<string, OpArg<Symbol>>("normalization", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024553_002D2289 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024553_002D2289()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("out_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024554_002D2290 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024554_002D2290()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("smooth_alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024566_002D2291 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024566_002D2291()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024579_002D2292 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024579_002D2292()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024619_002D2293 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024619_002D2293()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024620_002D2294 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024620_002D2294()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024647_002D2295 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024647_002D2295()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024644_002D2296 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024644_002D2296()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024645_002D2297 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024645_002D2297()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("dim1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024646_002D2298 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024646_002D2298()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("dim2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024700_002D2299 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024700_002D2299()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024698_002D2300 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024698_002D2300()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024699_002D2301 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024699_002D2301()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024724_002D2302 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024724_002D2302()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class data_004024740_002D26 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_004024740_002D26()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024745_002D2303 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024745_002D2303()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024769_002D2304 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024769_002D2304()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024766_002D2305 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024766_002D2305()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024767_002D2306 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024767_002D2306()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_outputs", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024768_002D2307 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024768_002D2307()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cast_narrow", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024804_002D2308 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024804_002D2308()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024805_002D2309 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024805_002D2309()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024806_002D2310 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024806_002D2310()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024880_002D2311 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024880_002D2311()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024876_002D2312 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024876_002D2312()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024877_002D2313 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024877_002D2313()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024878_002D2314 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024878_002D2314()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024879_002D2315 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024879_002D2315()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024915_002D2316 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024915_002D2316()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024916_002D2317 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024916_002D2317()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024917_002D2318 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024917_002D2318()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024991_002D2319 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024991_002D2319()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024987_002D2320 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024987_002D2320()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024988_002D2321 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024988_002D2321()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024989_002D2322 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024989_002D2322()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004024990_002D2323 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004024990_002D2323()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025047_002D2324 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025047_002D2324()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025048_002D2325 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025048_002D2325()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025049_002D2326 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025049_002D2326()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025050_002D2327 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025050_002D2327()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025108_002D2328 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025108_002D2328()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025103_002D2329 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025103_002D2329()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025104_002D2330 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025104_002D2330()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("ord", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025105_002D2331 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025105_002D2331()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025106_002D2332 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025106_002D2332()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("out_dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025107_002D2333 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025107_002D2333()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025148_002D2334 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025148_002D2334()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025149_002D2335 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025149_002D2335()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025176_002D2336 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025176_002D2336()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025173_002D2337 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025173_002D2337()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025174_002D2338 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025174_002D2338()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025175_002D2339 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025175_002D2339()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025216_002D2340 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025216_002D2340()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025217_002D2341 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025217_002D2341()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025244_002D2342 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025244_002D2342()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025241_002D2343 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025241_002D2343()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025242_002D2344 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025242_002D2344()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025243_002D2345 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025243_002D2345()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025284_002D2346 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025284_002D2346()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025283_002D2347 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025283_002D2347()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025351_002D2348 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025351_002D2348()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025352_002D2349 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025352_002D2349()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025353_002D2350 : FSharpFunc<GeneratedArgumentTypes.PickMode, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025353_002D2350()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.PickMode value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025393_002D2351 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025393_002D2351()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025388_002D2352 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025388_002D2352()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025389_002D2353 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025389_002D2353()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("index", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025390_002D2354 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025390_002D2354()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025391_002D2355 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025391_002D2355()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025392_002D2356 : FSharpFunc<GeneratedArgumentTypes.PickMode, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025392_002D2356()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.PickMode x)
			{
				return new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025434_002D2357 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025434_002D2357()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025435_002D2358 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025435_002D2358()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025462_002D2359 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025462_002D2359()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025459_002D2360 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025459_002D2360()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025460_002D2361 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025460_002D2361()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025461_002D2362 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025461_002D2362()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025497_002D2363 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025497_002D2363()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025516_002D2364 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025516_002D2364()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025514_002D2365 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025514_002D2365()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025515_002D2366 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025515_002D2366()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025524_002D2367 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025524_002D2367()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025566_002D2368 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025566_002D2368()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025567_002D2369 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025567_002D2369()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025599_002D2370 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025599_002D2370()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025595_002D2371 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025595_002D2371()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025596_002D2372 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025596_002D2372()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025597_002D2373 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025597_002D2373()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs_axes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025598_002D2374 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025598_002D2374()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs_axes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025634_002D2375 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025634_002D2375()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025635_002D2376 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025635_002D2376()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025636_002D2377 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025636_002D2377()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025710_002D2378 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025710_002D2378()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025706_002D2379 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025706_002D2379()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025707_002D2380 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025707_002D2380()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025708_002D2381 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025708_002D2381()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025709_002D2382 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025709_002D2382()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025747_002D2383 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025747_002D2383()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025748_002D2384 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025748_002D2384()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025749_002D2385 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025749_002D2385()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025823_002D2386 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025823_002D2386()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025819_002D2387 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025819_002D2387()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025820_002D2388 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025820_002D2388()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025821_002D2389 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025821_002D2389()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025822_002D2390 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025822_002D2390()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025892_002D2391 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025892_002D2391()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025893_002D2392 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025893_002D2392()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025894_002D2393 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025894_002D2393()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025968_002D2394 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025968_002D2394()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025964_002D2395 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025964_002D2395()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025965_002D2396 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025965_002D2396()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025966_002D2397 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025966_002D2397()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004025967_002D2398 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004025967_002D2398()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026003_002D2399 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026003_002D2399()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026004_002D2400 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026004_002D2400()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026005_002D2401 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026005_002D2401()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026079_002D2402 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026079_002D2402()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026075_002D2403 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026075_002D2403()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026076_002D2404 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026076_002D2404()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026077_002D2405 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026077_002D2405()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026078_002D2406 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026078_002D2406()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026116_002D2407 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026116_002D2407()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026117_002D2408 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026117_002D2408()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026118_002D2409 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026118_002D2409()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026192_002D2410 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026192_002D2410()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026188_002D2411 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026188_002D2411()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026189_002D2412 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026189_002D2412()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026190_002D2413 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026190_002D2413()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026191_002D2414 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026191_002D2414()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026311_002D2415 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026311_002D2415()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026309_002D2416 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026309_002D2416()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026310_002D2417 : FSharpFunc<StorageType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026310_002D2417()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(StorageType x)
			{
				return new Tuple<string, OpArg<Symbol>>("stype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026380_002D2418 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026380_002D2418()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026377_002D2419 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026377_002D2419()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("condition", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026378_002D2420 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026378_002D2420()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("x", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026379_002D2421 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026379_002D2421()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("y", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026454_002D2422 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026454_002D2422()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026455_002D2423 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026455_002D2423()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026456_002D2424 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026456_002D2424()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026491_002D2425 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026491_002D2425()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026487_002D2426 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026487_002D2426()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026488_002D2427 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026488_002D2427()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026489_002D2428 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026489_002D2428()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026490_002D2429 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026490_002D2429()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026561_002D2430 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026561_002D2430()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026562_002D2431 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026562_002D2431()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026563_002D2432 : FSharpFunc<StorageType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026563_002D2432()
			{
			}

			public override object Invoke(StorageType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026603_002D2433 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026603_002D2433()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026598_002D2434 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026598_002D2434()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026599_002D2435 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026599_002D2435()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026600_002D2436 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026600_002D2436()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("transpose_a", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026601_002D2437 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026601_002D2437()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("transpose_b", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026602_002D2438 : FSharpFunc<StorageType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026602_002D2438()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(StorageType x)
			{
				return new Tuple<string, OpArg<Symbol>>("forward_stype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026640_002D2439 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026640_002D2439()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026641_002D2440 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026641_002D2440()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026642_002D2441 : FSharpFunc<StorageType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026642_002D2441()
			{
			}

			public override object Invoke(StorageType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026682_002D2442 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026682_002D2442()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026677_002D2443 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026677_002D2443()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026678_002D2444 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026678_002D2444()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026679_002D2445 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026679_002D2445()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("transpose_a", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026680_002D2446 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026680_002D2446()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("transpose_b", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026681_002D2447 : FSharpFunc<StorageType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026681_002D2447()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(StorageType x)
			{
				return new Tuple<string, OpArg<Symbol>>("forward_stype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026740_002D2448 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026740_002D2448()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026738_002D2449 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026738_002D2449()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026739_002D2450 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026739_002D2450()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026798_002D2451 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026798_002D2451()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026796_002D2452 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026796_002D2452()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026797_002D2453 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026797_002D2453()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026850_002D2454 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026850_002D2454()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026848_002D2455 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026848_002D2455()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026849_002D2456 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026849_002D2456()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026902_002D2457 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026902_002D2457()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026900_002D2458 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026900_002D2458()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026901_002D2459 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026901_002D2459()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026950_002D2460 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026950_002D2460()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026948_002D2461 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026948_002D2461()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026949_002D2462 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026949_002D2462()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026998_002D2463 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026998_002D2463()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026996_002D2464 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026996_002D2464()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004026997_002D2465 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004026997_002D2465()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027048_002D2466 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027048_002D2466()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027046_002D2467 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027046_002D2467()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027047_002D2468 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027047_002D2468()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027098_002D2469 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027098_002D2469()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027096_002D2470 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027096_002D2470()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027097_002D2471 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027097_002D2471()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027154_002D2472 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027154_002D2472()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027152_002D2473 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027152_002D2473()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027153_002D2474 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027153_002D2474()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027202_002D2475 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027202_002D2475()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027200_002D2476 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027200_002D2476()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027201_002D2477 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027201_002D2477()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027250_002D2478 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027250_002D2478()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027248_002D2479 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027248_002D2479()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027249_002D2480 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027249_002D2480()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027298_002D2481 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027298_002D2481()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027296_002D2482 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027296_002D2482()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027297_002D2483 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027297_002D2483()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027346_002D2484 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027346_002D2484()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027344_002D2485 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027344_002D2485()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027345_002D2486 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027345_002D2486()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027394_002D2487 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027394_002D2487()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027392_002D2488 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027392_002D2488()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027393_002D2489 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027393_002D2489()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027442_002D2490 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027442_002D2490()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027440_002D2491 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027440_002D2491()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027441_002D2492 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027441_002D2492()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027490_002D2493 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027490_002D2493()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027488_002D2494 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027488_002D2494()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027489_002D2495 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027489_002D2495()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027538_002D2496 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027538_002D2496()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027536_002D2497 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027536_002D2497()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027537_002D2498 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027537_002D2498()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027586_002D2499 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027586_002D2499()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027584_002D2500 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027584_002D2500()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027585_002D2501 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027585_002D2501()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027631_002D2502 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027631_002D2502()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027629_002D2503 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027629_002D2503()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027630_002D2504 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027630_002D2504()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027663_002D2505 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027663_002D2505()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027661_002D2506 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027661_002D2506()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027662_002D2507 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027662_002D2507()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027708_002D2508 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027708_002D2508()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027706_002D2509 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027706_002D2509()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027707_002D2510 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027707_002D2510()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027752_002D2511 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027752_002D2511()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027750_002D2512 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027750_002D2512()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027751_002D2513 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027751_002D2513()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027789_002D2514 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027789_002D2514()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027787_002D2515 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027787_002D2515()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027788_002D2516 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027788_002D2516()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027821_002D2517 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027821_002D2517()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027819_002D2518 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027819_002D2518()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027820_002D2519 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027820_002D2519()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027853_002D2520 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027853_002D2520()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027851_002D2521 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027851_002D2521()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027852_002D2522 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027852_002D2522()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027885_002D2523 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027885_002D2523()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027883_002D2524 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027883_002D2524()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027884_002D2525 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027884_002D2525()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027917_002D2526 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027917_002D2526()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027915_002D2527 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027915_002D2527()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027916_002D2528 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027916_002D2528()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027954_002D2529 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027954_002D2529()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027952_002D2530 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027952_002D2530()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027953_002D2531 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027953_002D2531()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027986_002D2532 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027986_002D2532()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027984_002D2533 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027984_002D2533()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004027985_002D2534 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004027985_002D2534()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028018_002D2535 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028018_002D2535()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028016_002D2536 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028016_002D2536()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028017_002D2537 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028017_002D2537()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028050_002D2538 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028050_002D2538()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028048_002D2539 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028048_002D2539()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028049_002D2540 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028049_002D2540()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028082_002D2541 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028082_002D2541()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028080_002D2542 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028080_002D2542()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028081_002D2543 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028081_002D2543()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028114_002D2544 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028114_002D2544()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028112_002D2545 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028112_002D2545()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028113_002D2546 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028113_002D2546()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028146_002D2547 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028146_002D2547()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028144_002D2548 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028144_002D2548()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028145_002D2549 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028145_002D2549()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028178_002D2550 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028178_002D2550()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028176_002D2551 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028176_002D2551()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028177_002D2552 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028177_002D2552()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028210_002D2553 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028210_002D2553()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028208_002D2554 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028208_002D2554()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028209_002D2555 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028209_002D2555()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028242_002D2556 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028242_002D2556()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028240_002D2557 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028240_002D2557()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028241_002D2558 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028241_002D2558()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028283_002D2559 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028283_002D2559()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028281_002D2560 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028281_002D2560()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028282_002D2561 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028282_002D2561()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028324_002D2562 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028324_002D2562()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028322_002D2563 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028322_002D2563()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028323_002D2564 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028323_002D2564()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028365_002D2565 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028365_002D2565()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028363_002D2566 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028363_002D2566()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028364_002D2567 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028364_002D2567()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028428_002D2568 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028428_002D2568()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028426_002D2569 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028426_002D2569()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028427_002D2570 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028427_002D2570()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028491_002D2571 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028491_002D2571()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028489_002D2572 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028489_002D2572()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028490_002D2573 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028490_002D2573()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028532_002D2574 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028532_002D2574()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028530_002D2575 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028530_002D2575()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028531_002D2576 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028531_002D2576()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028573_002D2577 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028573_002D2577()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028571_002D2578 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028571_002D2578()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028572_002D2579 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028572_002D2579()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028614_002D2580 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028614_002D2580()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028612_002D2581 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028612_002D2581()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028613_002D2582 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028613_002D2582()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028655_002D2583 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028655_002D2583()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028653_002D2584 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028653_002D2584()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028654_002D2585 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028654_002D2585()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028696_002D2586 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028696_002D2586()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028694_002D2587 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028694_002D2587()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028695_002D2588 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028695_002D2588()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028737_002D2589 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028737_002D2589()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028735_002D2590 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028735_002D2590()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028736_002D2591 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028736_002D2591()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028778_002D2592 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028778_002D2592()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028776_002D2593 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028776_002D2593()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028777_002D2594 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028777_002D2594()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028819_002D2595 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028819_002D2595()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028817_002D2596 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028817_002D2596()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028818_002D2597 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028818_002D2597()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028900_002D2598 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028900_002D2598()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028898_002D2599 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028898_002D2599()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028899_002D2600 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028899_002D2600()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028941_002D2601 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028941_002D2601()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028939_002D2602 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028939_002D2602()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028940_002D2603 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028940_002D2603()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028982_002D2604 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028982_002D2604()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028980_002D2605 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028980_002D2605()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004028981_002D2606 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004028981_002D2606()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029023_002D2607 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029023_002D2607()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029021_002D2608 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029021_002D2608()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029022_002D2609 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029022_002D2609()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029064_002D2610 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029064_002D2610()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029062_002D2611 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029062_002D2611()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029063_002D2612 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029063_002D2612()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029105_002D2613 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029105_002D2613()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029103_002D2614 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029103_002D2614()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029104_002D2615 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029104_002D2615()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029146_002D2616 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029146_002D2616()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029144_002D2617 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029144_002D2617()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029145_002D2618 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029145_002D2618()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029187_002D2619 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029187_002D2619()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029185_002D2620 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029185_002D2620()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029186_002D2621 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029186_002D2621()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029228_002D2622 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029228_002D2622()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029226_002D2623 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029226_002D2623()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029227_002D2624 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029227_002D2624()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029269_002D2625 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029269_002D2625()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029267_002D2626 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029267_002D2626()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029268_002D2627 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029268_002D2627()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029314_002D2628 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029314_002D2628()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029312_002D2629 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029312_002D2629()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029313_002D2630 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029313_002D2630()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029379_002D2631 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029379_002D2631()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029377_002D2632 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029377_002D2632()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029378_002D2633 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029378_002D2633()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029444_002D2634 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029444_002D2634()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029442_002D2635 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029442_002D2635()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029443_002D2636 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029443_002D2636()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029483_002D2637 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029483_002D2637()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029482_002D2638 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029482_002D2638()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("args", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029520_002D2639 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029520_002D2639()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029519_002D2640 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029519_002D2640()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029553_002D2641 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029553_002D2641()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029552_002D2642 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029552_002D2642()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029578_002D2643 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029578_002D2643()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029579_002D2644 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029579_002D2644()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029606_002D2645 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029606_002D2645()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029603_002D2646 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029603_002D2646()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029604_002D2647 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029604_002D2647()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029605_002D2648 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029605_002D2648()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029639_002D2649 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029639_002D2649()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029638_002D2650 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029638_002D2650()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029665_002D2651 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029665_002D2651()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029664_002D2652 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029664_002D2652()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029716_002D2653 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029716_002D2653()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029715_002D2654 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029715_002D2654()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029748_002D2655 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029748_002D2655()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029746_002D2656 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029746_002D2656()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029747_002D2657 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029747_002D2657()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029801_002D2658 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029801_002D2658()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029802_002D2659 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029802_002D2659()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029803_002D2660 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029803_002D2660()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029804_002D2661 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029804_002D2661()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029852_002D2662 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029852_002D2662()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029846_002D2663 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029846_002D2663()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029847_002D2664 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029847_002D2664()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029848_002D2665 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029848_002D2665()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs_begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029849_002D2666 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029849_002D2666()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs_end", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029850_002D2667 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029850_002D2667()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs_begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029851_002D2668 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029851_002D2668()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs_end", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029884_002D2669 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029884_002D2669()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029883_002D2670 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029883_002D2670()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029916_002D2671 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029916_002D2671()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029915_002D2672 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029915_002D2672()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029983_002D2673 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029983_002D2673()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029981_002D2674 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029981_002D2674()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004029982_002D2675 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004029982_002D2675()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030015_002D2676 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030015_002D2676()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030014_002D2677 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030014_002D2677()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030053_002D2678 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030053_002D2678()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030052_002D2679 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030052_002D2679()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030091_002D2680 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030091_002D2680()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030090_002D2681 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030090_002D2681()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030129_002D2682 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030129_002D2682()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030128_002D2683 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030128_002D2683()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030171_002D2684 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030171_002D2684()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030170_002D2685 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030170_002D2685()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030211_002D2686 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030211_002D2686()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030210_002D2687 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030210_002D2687()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030251_002D2688 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030251_002D2688()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030250_002D2689 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030250_002D2689()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030292_002D2690 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030292_002D2690()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030291_002D2691 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030291_002D2691()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030331_002D2692 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030331_002D2692()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030330_002D2693 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030330_002D2693()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030363_002D2694 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030363_002D2694()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030362_002D2695 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030362_002D2695()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030395_002D2696 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030395_002D2696()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030394_002D2697 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030394_002D2697()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030424_002D2698 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030424_002D2698()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030423_002D2699 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030423_002D2699()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030453_002D2700 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030453_002D2700()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030452_002D2701 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030452_002D2701()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030482_002D2702 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030482_002D2702()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030481_002D2703 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030481_002D2703()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030519_002D2704 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030519_002D2704()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030518_002D2705 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030518_002D2705()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030551_002D2706 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030551_002D2706()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030550_002D2707 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030550_002D2707()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030583_002D2708 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030583_002D2708()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030582_002D2709 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030582_002D2709()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030615_002D2710 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030615_002D2710()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030614_002D2711 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030614_002D2711()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030652_002D2712 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030652_002D2712()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030651_002D2713 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030651_002D2713()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030688_002D2714 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030688_002D2714()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030687_002D2715 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030687_002D2715()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030722_002D2716 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030722_002D2716()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030721_002D2717 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030721_002D2717()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030763_002D2718 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030763_002D2718()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030762_002D2719 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030762_002D2719()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030804_002D2720 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030804_002D2720()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030803_002D2721 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030803_002D2721()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030841_002D2722 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030841_002D2722()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030840_002D2723 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030840_002D2723()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030882_002D2724 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030882_002D2724()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030881_002D2725 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030881_002D2725()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030917_002D2726 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030917_002D2726()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030916_002D2727 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030916_002D2727()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030956_002D2728 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030956_002D2728()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030955_002D2729 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030955_002D2729()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030991_002D2730 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030991_002D2730()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004030990_002D2731 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004030990_002D2731()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031030_002D2732 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031030_002D2732()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031029_002D2733 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031029_002D2733()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031070_002D2734 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031070_002D2734()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031069_002D2735 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031069_002D2735()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031106_002D2736 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031106_002D2736()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031105_002D2737 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031105_002D2737()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031145_002D2738 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031145_002D2738()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031144_002D2739 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031144_002D2739()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031182_002D2740 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031182_002D2740()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031181_002D2741 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031181_002D2741()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031219_002D2742 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031219_002D2742()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031218_002D2743 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031218_002D2743()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031256_002D2744 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031256_002D2744()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031255_002D2745 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031255_002D2745()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031289_002D2746 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031289_002D2746()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031288_002D2747 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031288_002D2747()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031326_002D2748 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031326_002D2748()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031325_002D2749 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031325_002D2749()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031361_002D2750 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031361_002D2750()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031360_002D2751 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031360_002D2751()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031392_002D2752 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031392_002D2752()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031391_002D2753 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031391_002D2753()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031427_002D2754 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031427_002D2754()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031426_002D2755 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031426_002D2755()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031461_002D2756 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031461_002D2756()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031462_002D2757 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031462_002D2757()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031494_002D2758 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031494_002D2758()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031490_002D2759 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031490_002D2759()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031491_002D2760 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031491_002D2760()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("bins", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031492_002D2761 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031492_002D2761()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("bin_cnt", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031493_002D2762 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031493_002D2762()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031573_002D2763 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031573_002D2763()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031574_002D2764 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031574_002D2764()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031651_002D2765 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031651_002D2765()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031652_002D2766 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031652_002D2766()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031694_002D2767 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031694_002D2767()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031688_002D2768 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031688_002D2768()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031689_002D2769 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031689_002D2769()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031690_002D2770 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031690_002D2770()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("input_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031691_002D2771 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031691_002D2771()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031692_002D2772 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031692_002D2772()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031693_002D2773 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031693_002D2773()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("sparse_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031771_002D2774 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031771_002D2774()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031772_002D2775 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031772_002D2775()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031847_002D2776 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031847_002D2776()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031848_002D2777 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031848_002D2777()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031890_002D2778 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031890_002D2778()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031884_002D2779 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031884_002D2779()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031885_002D2780 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031885_002D2780()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031886_002D2781 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031886_002D2781()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("input_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031887_002D2782 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031887_002D2782()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031888_002D2783 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031888_002D2783()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031889_002D2784 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031889_002D2784()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("sparse_grad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031963_002D2785 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031963_002D2785()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031964_002D2786 : FSharpFunc<GeneratedArgumentTypes.TakeMode, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031964_002D2786()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.TakeMode value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031996_002D2787 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031996_002D2787()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031992_002D2788 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031992_002D2788()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031993_002D2789 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031993_002D2789()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031994_002D2790 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031994_002D2790()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004031995_002D2791 : FSharpFunc<GeneratedArgumentTypes.TakeMode, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004031995_002D2791()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.TakeMode x)
			{
				return new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032050_002D2792 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032050_002D2792()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032048_002D2793 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032048_002D2793()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("a", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032049_002D2794 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032049_002D2794()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032106_002D2795 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032106_002D2795()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032107_002D2796 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032107_002D2796()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032108_002D2797 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032108_002D2797()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032161_002D2798 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032161_002D2798()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032162_002D2799 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032162_002D2799()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032163_002D2800 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032163_002D2800()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032203_002D2801 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032203_002D2801()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032198_002D2802 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032198_002D2802()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032199_002D2803 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032199_002D2803()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("depth", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032200_002D2804 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032200_002D2804()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("on_value", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032201_002D2805 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032201_002D2805()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("off_value", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032202_002D2806 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032202_002D2806()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032260_002D2807 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032260_002D2807()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032258_002D2808 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032258_002D2808()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032259_002D2809 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032259_002D2809()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032401_002D2810 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032401_002D2810()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032398_002D2811 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032398_002D2811()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032399_002D2812 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032399_002D2812()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032400_002D2813 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032400_002D2813()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032498_002D2814 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032498_002D2814()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032494_002D2815 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032494_002D2815()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032495_002D2816 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032495_002D2816()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032496_002D2817 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032496_002D2817()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032497_002D2818 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032497_002D2818()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032512_002D2819 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032512_002D2819()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032513_002D2820 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032513_002D2820()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032535_002D2821 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032535_002D2821()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032533_002D2822 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032533_002D2822()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032534_002D2823 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032534_002D2823()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032549_002D2824 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032549_002D2824()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032550_002D2825 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032550_002D2825()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032572_002D2826 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032572_002D2826()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032570_002D2827 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032570_002D2827()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032571_002D2828 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032571_002D2828()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032591_002D2829 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032591_002D2829()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032592_002D2830 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032592_002D2830()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032593_002D2831 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032593_002D2831()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032628_002D2832 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032628_002D2832()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032624_002D2833 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032624_002D2833()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("N", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032625_002D2834 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032625_002D2834()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("M", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032626_002D2835 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032626_002D2835()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032627_002D2836 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032627_002D2836()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032642_002D2837 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032642_002D2837()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032643_002D2838 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032643_002D2838()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032665_002D2839 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032665_002D2839()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032663_002D2840 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032663_002D2840()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032664_002D2841 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032664_002D2841()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032682_002D2842 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032682_002D2842()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032683_002D2843 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032683_002D2843()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032710_002D2844 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032710_002D2844()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032707_002D2845 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032707_002D2845()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("value", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032708_002D2846 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032708_002D2846()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032709_002D2847 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032709_002D2847()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032733_002D2848 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032733_002D2848()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032734_002D2849 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032734_002D2849()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032735_002D2850 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032735_002D2850()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032736_002D2851 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032736_002D2851()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032737_002D2852 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032737_002D2852()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032788_002D2853 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032788_002D2853()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032782_002D2854 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032782_002D2854()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("start", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032783_002D2855 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032783_002D2855()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("stop", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032784_002D2856 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032784_002D2856()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032785_002D2857 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032785_002D2857()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("repeat", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032786_002D2858 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032786_002D2858()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("infer_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032787_002D2859 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032787_002D2859()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032832_002D2860 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032832_002D2860()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032833_002D2861 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032833_002D2861()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032834_002D2862 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032834_002D2862()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032835_002D2863 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032835_002D2863()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032878_002D2864 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032878_002D2864()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032873_002D2865 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032873_002D2865()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032874_002D2866 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032874_002D2866()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("start", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032875_002D2867 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032875_002D2867()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032876_002D2868 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032876_002D2868()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("repeat", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032877_002D2869 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032877_002D2869()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032901_002D2870 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032901_002D2870()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032902_002D2871 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032902_002D2871()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032903_002D2872 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032903_002D2872()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032904_002D2873 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032904_002D2873()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032905_002D2874 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032905_002D2874()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032956_002D2875 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032956_002D2875()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032950_002D2876 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032950_002D2876()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("start", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032951_002D2877 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032951_002D2877()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("stop", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032952_002D2878 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032952_002D2878()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032953_002D2879 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032953_002D2879()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("repeat", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032954_002D2880 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032954_002D2880()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("infer_range", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032955_002D2881 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032955_002D2881()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032997_002D2882 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032997_002D2882()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004032996_002D2883 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004032996_002D2883()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033032_002D2884 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033032_002D2884()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033031_002D2885 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033031_002D2885()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033113_002D2886 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033113_002D2886()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033114_002D2887 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033114_002D2887()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033115_002D2888 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033115_002D2888()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033116_002D2889 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033116_002D2889()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033117_002D2890 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033117_002D2890()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033178_002D2891 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033178_002D2891()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033170_002D2892 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033170_002D2892()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033171_002D2893 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033171_002D2893()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("B", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033172_002D2894 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033172_002D2894()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("C", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033173_002D2895 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033173_002D2895()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("transpose_a", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033174_002D2896 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033174_002D2896()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("transpose_b", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033175_002D2897 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033175_002D2897()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033176_002D2898 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033176_002D2898()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033177_002D2899 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033177_002D2899()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033250_002D2900 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033250_002D2900()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033251_002D2901 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033251_002D2901()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033252_002D2902 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033252_002D2902()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033253_002D2903 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033253_002D2903()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033301_002D2904 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033301_002D2904()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033295_002D2905 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033295_002D2905()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033296_002D2906 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033296_002D2906()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("B", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033297_002D2907 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033297_002D2907()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("transpose_a", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033298_002D2908 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033298_002D2908()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("transpose_b", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033299_002D2909 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033299_002D2909()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033300_002D2910 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033300_002D2910()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033351_002D2911 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033351_002D2911()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033350_002D2912 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033350_002D2912()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033410_002D2913 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033410_002D2913()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033409_002D2914 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033409_002D2914()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033471_002D2915 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033471_002D2915()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033472_002D2916 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033472_002D2916()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033473_002D2917 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033473_002D2917()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033474_002D2918 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033474_002D2918()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033522_002D2919 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033522_002D2919()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033516_002D2920 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033516_002D2920()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033517_002D2921 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033517_002D2921()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("B", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033518_002D2922 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033518_002D2922()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("transpose", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033519_002D2923 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033519_002D2923()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("rightside", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033520_002D2924 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033520_002D2924()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("lower", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033521_002D2925 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033521_002D2925()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033584_002D2926 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033584_002D2926()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033585_002D2927 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033585_002D2927()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033586_002D2928 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033586_002D2928()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033587_002D2929 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033587_002D2929()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033635_002D2930 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033635_002D2930()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033629_002D2931 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033629_002D2931()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033630_002D2932 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033630_002D2932()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("B", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033631_002D2933 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033631_002D2933()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("transpose", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033632_002D2934 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033632_002D2934()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("rightside", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033633_002D2935 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033633_002D2935()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("lower", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033634_002D2936 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033634_002D2936()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033681_002D2937 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033681_002D2937()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033680_002D2938 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033680_002D2938()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033726_002D2939 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033726_002D2939()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033745_002D2940 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033745_002D2940()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033743_002D2941 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033743_002D2941()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033744_002D2942 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033744_002D2942()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033791_002D2943 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033791_002D2943()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033810_002D2944 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033810_002D2944()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033808_002D2945 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033808_002D2945()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033809_002D2946 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033809_002D2946()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033864_002D2947 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033864_002D2947()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033865_002D2948 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033865_002D2948()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033892_002D2949 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033892_002D2949()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033889_002D2950 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033889_002D2950()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033890_002D2951 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033890_002D2951()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033891_002D2952 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033891_002D2952()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("lower", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033956_002D2953 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033956_002D2953()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033957_002D2954 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033957_002D2954()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033984_002D2955 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033984_002D2955()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033981_002D2956 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033981_002D2956()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033982_002D2957 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033982_002D2957()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004033983_002D2958 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004033983_002D2958()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("lower", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034037_002D2959 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034037_002D2959()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034038_002D2960 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034038_002D2960()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034065_002D2961 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034065_002D2961()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034062_002D2962 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034062_002D2962()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034063_002D2963 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034063_002D2963()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("transpose", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034064_002D2964 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034064_002D2964()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("alpha", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034135_002D2965 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034135_002D2965()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034134_002D2966 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034134_002D2966()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034204_002D2967 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034204_002D2967()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034203_002D2968 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034203_002D2968()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034253_002D2969 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034253_002D2969()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034252_002D2970 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034252_002D2970()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034305_002D2971 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034305_002D2971()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034304_002D2972 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034304_002D2972()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034363_002D2973 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034363_002D2973()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034362_002D2974 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034362_002D2974()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("A", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034424_002D2975 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034424_002D2975()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034425_002D2976 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034425_002D2976()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034426_002D2977 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034426_002D2977()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034427_002D2978 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034427_002D2978()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034470_002D2979 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034470_002D2979()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034465_002D2980 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034465_002D2980()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034466_002D2981 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034466_002D2981()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034467_002D2982 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034467_002D2982()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("reverse", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034468_002D2983 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034468_002D2983()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("target_shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034469_002D2984 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034469_002D2984()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keep_highest", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034506_002D2985 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034506_002D2985()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034525_002D2986 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034525_002D2986()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034523_002D2987 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034523_002D2987()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034524_002D2988 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034524_002D2988()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034578_002D2989 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034578_002D2989()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034576_002D2990 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034576_002D2990()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034577_002D2991 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034577_002D2991()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034634_002D2992 : FSharpFunc<IEnumerable<FSharpOption<int>>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034634_002D2992()
			{
			}

			public override object Invoke(IEnumerable<FSharpOption<int>> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034687_002D2993 : FSharpFunc<IEnumerable<FSharpOption<int>>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034687_002D2993()
			{
			}

			public override object Invoke(IEnumerable<FSharpOption<int>> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034716_002D2994 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034716_002D2994()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034712_002D2995 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034712_002D2995()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034713_002D2996 : FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034713_002D2996()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<FSharpOption<int>> x)
			{
				return new Tuple<string, OpArg<Symbol>>("begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034714_002D2997 : FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034714_002D2997()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<FSharpOption<int>> x)
			{
				return new Tuple<string, OpArg<Symbol>>("end", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034715_002D2998 : FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034715_002D2998()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<FSharpOption<int>> x)
			{
				return new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034748_002D2999 : FSharpFunc<IEnumerable<FSharpOption<int>>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034748_002D2999()
			{
			}

			public override object Invoke(IEnumerable<FSharpOption<int>> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034778_002D3000 : FSharpFunc<IEnumerable<FSharpOption<int>>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034778_002D3000()
			{
			}

			public override object Invoke(IEnumerable<FSharpOption<int>> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034812_002D3001 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034812_002D3001()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034807_002D3002 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034807_002D3002()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("lhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034808_002D3003 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034808_002D3003()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rhs", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034809_002D3004 : FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034809_002D3004()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<FSharpOption<int>> x)
			{
				return new Tuple<string, OpArg<Symbol>>("begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034810_002D3005 : FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034810_002D3005()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<FSharpOption<int>> x)
			{
				return new Tuple<string, OpArg<Symbol>>("end", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034811_002D3006 : FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034811_002D3006()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<FSharpOption<int>> x)
			{
				return new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034842_002D3007 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034842_002D3007()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034843_002D3008 : FSharpFunc<IEnumerable<FSharpOption<int>>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034843_002D3008()
			{
			}

			public override object Invoke(IEnumerable<FSharpOption<int>> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034870_002D3009 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034870_002D3009()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034871_002D3010 : FSharpFunc<IEnumerable<FSharpOption<int>>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034871_002D3010()
			{
			}

			public override object Invoke(IEnumerable<FSharpOption<int>> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034908_002D3011 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034908_002D3011()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034903_002D3012 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034903_002D3012()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034904_002D3013 : FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034904_002D3013()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<FSharpOption<int>> x)
			{
				return new Tuple<string, OpArg<Symbol>>("begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034905_002D3014 : FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034905_002D3014()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<FSharpOption<int>> x)
			{
				return new Tuple<string, OpArg<Symbol>>("end", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034906_002D3015 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034906_002D3015()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("scalar", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034907_002D3016 : FSharpFunc<IEnumerable<FSharpOption<int>>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034907_002D3016()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<FSharpOption<int>> x)
			{
				return new Tuple<string, OpArg<Symbol>>("step", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034946_002D3017 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034946_002D3017()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004034981_002D3018 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004034981_002D3018()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035010_002D3019 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035010_002D3019()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035006_002D3020 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035006_002D3020()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035007_002D3021 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035007_002D3021()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035008_002D3022 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035008_002D3022()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("begin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035009_002D3023 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035009_002D3023()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("end", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035067_002D3024 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035067_002D3024()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035091_002D3025 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035091_002D3025()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035088_002D3026 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035088_002D3026()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035089_002D3027 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035089_002D3027()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape_like", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035090_002D3028 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035090_002D3028()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035183_002D3029 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035183_002D3029()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035180_002D3030 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035180_002D3030()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035181_002D3031 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035181_002D3031()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("a_min", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035182_002D3032 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035182_002D3032()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("a_max", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035218_002D3033 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035218_002D3033()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035250_002D3034 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035250_002D3034()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035274_002D3035 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035274_002D3035()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035271_002D3036 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035271_002D3036()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035272_002D3037 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035272_002D3037()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("repeats", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035273_002D3038 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035273_002D3038()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035369_002D3039 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035369_002D3039()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035367_002D3040 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035367_002D3040()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035368_002D3041 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035368_002D3041()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("reps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035434_002D3042 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035434_002D3042()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035432_002D3043 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035432_002D3043()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035433_002D3044 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035433_002D3044()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class data_004035457_002D27 : FSharpFunc<IEnumerable<Symbol>, Symbol[]>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal data_004035457_002D27()
			{
			}

			public override Symbol[] Invoke(IEnumerable<Symbol> source)
			{
				return SeqModule.ToArray<Symbol>(source);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035461_002D3045 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035461_002D3045()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035480_002D3046 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035480_002D3046()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035478_002D3047 : FSharpFunc<IEnumerable<Symbol>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035478_002D3047()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<Symbol> x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewVarArg("num_args", SeqModule.ToArray<Symbol>(x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035479_002D3048 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035479_002D3048()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035508_002D3049 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035508_002D3049()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035527_002D3050 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035527_002D3050()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035525_002D3051 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035525_002D3051()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035526_002D3052 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035526_002D3052()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035626_002D3053 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035626_002D3053()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035624_002D3054 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035624_002D3054()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035625_002D3055 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035625_002D3055()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("block_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035725_002D3056 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035725_002D3056()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035723_002D3057 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035723_002D3057()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035724_002D3058 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035724_002D3058()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("block_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035796_002D3059 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035796_002D3059()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035797_002D3060 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035797_002D3060()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035798_002D3061 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035798_002D3061()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035866_002D3062 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035866_002D3062()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035867_002D3063 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035867_002D3063()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035868_002D3064 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035868_002D3064()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035908_002D3065 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035908_002D3065()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035903_002D3066 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035903_002D3066()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035904_002D3067 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035904_002D3067()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035905_002D3068 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035905_002D3068()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035906_002D3069 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035906_002D3069()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("squeeze_axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035907_002D3070 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035907_002D3070()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("sections", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035916_002D3071 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035916_002D3071()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035975_002D3072 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035975_002D3072()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035976_002D3073 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035976_002D3073()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035977_002D3074 : FSharpFunc<GeneratedArgumentTypes.RetTyp, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035977_002D3074()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.RetTyp value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035978_002D3075 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035978_002D3075()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004035979_002D3076 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004035979_002D3076()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036033_002D3077 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036033_002D3077()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036027_002D3078 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036027_002D3078()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036028_002D3079 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036028_002D3079()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036029_002D3080 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036029_002D3080()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("k", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036030_002D3081 : FSharpFunc<GeneratedArgumentTypes.RetTyp, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036030_002D3081()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.RetTyp x)
			{
				return new Tuple<string, OpArg<Symbol>>("ret_typ", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036031_002D3082 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036031_002D3082()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_ascend", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036032_002D3083 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036032_002D3083()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036075_002D3084 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036075_002D3084()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036076_002D3085 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036076_002D3085()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036103_002D3086 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036103_002D3086()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036100_002D3087 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036100_002D3087()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036101_002D3088 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036101_002D3088()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036102_002D3089 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036102_002D3089()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_ascend", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036145_002D3090 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036145_002D3090()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036146_002D3091 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036146_002D3091()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036147_002D3092 : FSharpFunc<DataType, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036147_002D3092()
			{
			}

			public override object Invoke(DataType value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036182_002D3093 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036182_002D3093()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036178_002D3094 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036178_002D3094()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036179_002D3095 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036179_002D3095()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036180_002D3096 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036180_002D3096()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_ascend", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036181_002D3097 : FSharpFunc<DataType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036181_002D3097()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(DataType x)
			{
				return new Tuple<string, OpArg<Symbol>>("dtype", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036208_002D3098 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036208_002D3098()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036227_002D3099 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036227_002D3099()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036225_002D3100 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036225_002D3100()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036226_002D3101 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036226_002D3101()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036253_002D3102 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036253_002D3102()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036272_002D3103 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036272_002D3103()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036270_002D3104 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036270_002D3104()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036271_002D3105 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036271_002D3105()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036326_002D3106 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036326_002D3106()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036324_002D3107 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036324_002D3107()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036325_002D3108 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036325_002D3108()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("indices", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036373_002D3109 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036373_002D3109()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036374_002D3110 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036374_002D3110()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036375_002D3111 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036375_002D3111()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036449_002D3112 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036449_002D3112()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036445_002D3113 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036445_002D3113()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036446_002D3114 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036446_002D3114()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036447_002D3115 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036447_002D3115()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("keepdims", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036448_002D3116 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036448_002D3116()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("exclude", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036482_002D3117 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036482_002D3117()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036515_002D3118 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036515_002D3118()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036564_002D3119 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036564_002D3119()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036556_002D3120 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036556_002D3120()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036557_002D3121 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036557_002D3121()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("gt_masks", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036558_002D3122 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036558_002D3122()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("matches", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036559_002D3123 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036559_002D3123()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("cls_targets", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036560_002D3124 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036560_002D3124()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_rois", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036561_002D3125 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036561_002D3125()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_classes", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036562_002D3126 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036562_002D3126()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("mask_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036563_002D3127 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036563_002D3127()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("sample_ratio", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036657_002D3128 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036657_002D3128()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036681_002D3129 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036681_002D3129()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036678_002D3130 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036678_002D3130()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036679_002D3131 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036679_002D3131()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("grid", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036680_002D3132 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036680_002D3132()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036728_002D3133 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036728_002D3133()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036774_002D3134 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036774_002D3134()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036808_002D3135 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036808_002D3135()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036803_002D3136 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036803_002D3136()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036804_002D3137 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036804_002D3137()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("h", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036805_002D3138 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036805_002D3138()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("s", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036806_002D3139 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036806_002D3139()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("out_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036807_002D3140 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036807_002D3140()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("processing_batch_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036897_002D3141 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036897_002D3141()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036898_002D3142 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036898_002D3142()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036899_002D3143 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036899_002D3143()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036900_002D3144 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036900_002D3144()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036901_002D3145 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036901_002D3145()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036902_002D3146 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036902_002D3146()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036903_002D3147 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036903_002D3147()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036904_002D3148 : FSharpFunc<GeneratedArgumentTypes.ContribDeformableConvolutionLayout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036904_002D3148()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ContribDeformableConvolutionLayout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036993_002D3149 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036993_002D3149()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036994_002D3150 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036994_002D3150()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036995_002D3151 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036995_002D3151()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036996_002D3152 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036996_002D3152()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036997_002D3153 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036997_002D3153()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036998_002D3154 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036998_002D3154()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004036999_002D3155 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004036999_002D3155()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037000_002D3156 : FSharpFunc<GeneratedArgumentTypes.ContribDeformableConvolutionLayout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037000_002D3156()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ContribDeformableConvolutionLayout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037103_002D3157 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037103_002D3157()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037089_002D3158 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037089_002D3158()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037090_002D3159 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037090_002D3159()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037091_002D3160 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037091_002D3160()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037092_002D3161 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037092_002D3161()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037093_002D3162 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037093_002D3162()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037094_002D3163 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037094_002D3163()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037095_002D3164 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037095_002D3164()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037096_002D3165 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037096_002D3165()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037097_002D3166 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037097_002D3166()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037098_002D3167 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037098_002D3167()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037099_002D3168 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037099_002D3168()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_deformable_group", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037100_002D3169 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037100_002D3169()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037101_002D3170 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037101_002D3170()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037102_002D3171 : FSharpFunc<GeneratedArgumentTypes.ContribDeformableConvolutionLayout, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037102_002D3171()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ContribDeformableConvolutionLayout x)
			{
				return new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037143_002D3172 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037143_002D3172()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037144_002D3173 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037144_002D3173()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037145_002D3174 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037145_002D3174()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037146_002D3175 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037146_002D3175()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037185_002D3176 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037185_002D3176()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037186_002D3177 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037186_002D3177()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037187_002D3178 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037187_002D3178()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037188_002D3179 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037188_002D3179()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037261_002D3180 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037261_002D3180()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037250_002D3181 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037250_002D3181()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037251_002D3182 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037251_002D3182()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037252_002D3183 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037252_002D3183()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("trans", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037253_002D3184 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037253_002D3184()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037254_002D3185 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037254_002D3185()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037255_002D3186 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037255_002D3186()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("group_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037256_002D3187 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037256_002D3187()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037257_002D3188 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037257_002D3188()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("part_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037258_002D3189 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037258_002D3189()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("sample_per_part", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037259_002D3190 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037259_002D3190()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("trans_std", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037260_002D3191 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037260_002D3191()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("no_trans", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037291_002D3192 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037291_002D3192()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037310_002D3193 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037310_002D3193()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037308_002D3194 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037308_002D3194()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037309_002D3195 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037309_002D3195()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("compute_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037341_002D3196 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037341_002D3196()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037360_002D3197 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037360_002D3197()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037358_002D3198 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037358_002D3198()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037359_002D3199 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037359_002D3199()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("compute_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037455_002D3200 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037455_002D3200()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037456_002D3201 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037456_002D3201()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037457_002D3202 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037457_002D3202()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037458_002D3203 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037458_002D3203()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037459_002D3204 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037459_002D3204()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037460_002D3205 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037460_002D3205()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037461_002D3206 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037461_002D3206()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037462_002D3207 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037462_002D3207()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037463_002D3208 : FSharpFunc<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037463_002D3208()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037559_002D3209 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037559_002D3209()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037560_002D3210 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037560_002D3210()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037561_002D3211 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037561_002D3211()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037562_002D3212 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037562_002D3212()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037563_002D3213 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037563_002D3213()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037564_002D3214 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037564_002D3214()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037565_002D3215 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037565_002D3215()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037566_002D3216 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037566_002D3216()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037567_002D3217 : FSharpFunc<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037567_002D3217()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037683_002D3218 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037683_002D3218()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037667_002D3219 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037667_002D3219()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037668_002D3220 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037668_002D3220()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("offset", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037669_002D3221 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037669_002D3221()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mask", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037670_002D3222 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037670_002D3222()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037671_002D3223 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037671_002D3223()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037672_002D3224 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037672_002D3224()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037673_002D3225 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037673_002D3225()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037674_002D3226 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037674_002D3226()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037675_002D3227 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037675_002D3227()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037676_002D3228 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037676_002D3228()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037677_002D3229 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037677_002D3229()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037678_002D3230 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037678_002D3230()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_deformable_group", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037679_002D3231 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037679_002D3231()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037680_002D3232 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037680_002D3232()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037681_002D3233 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037681_002D3233()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("im2col_step", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037682_002D3234 : FSharpFunc<GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037682_002D3234()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ContribModulatedDeformableConvolutionLayout x)
			{
				return new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037723_002D3235 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037723_002D3235()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037724_002D3236 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037724_002D3236()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037725_002D3237 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037725_002D3237()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037726_002D3238 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037726_002D3238()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037727_002D3239 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037727_002D3239()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037728_002D3240 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037728_002D3240()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037729_002D3241 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037729_002D3241()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037730_002D3242 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037730_002D3242()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037731_002D3243 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037731_002D3243()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037824_002D3244 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037824_002D3244()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037812_002D3245 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037812_002D3245()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("cls_prob", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037813_002D3246 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037813_002D3246()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("bbox_pred", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037814_002D3247 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037814_002D3247()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("im_info", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037815_002D3248 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037815_002D3248()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("rpn_pre_nms_top_n", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037816_002D3249 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037816_002D3249()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("rpn_post_nms_top_n", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037817_002D3250 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037817_002D3250()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("threshold", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037818_002D3251 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037818_002D3251()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("rpn_min_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037819_002D3252 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037819_002D3252()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("scales", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037820_002D3253 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037820_002D3253()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("ratios", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037821_002D3254 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037821_002D3254()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("feature_stride", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037822_002D3255 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037822_002D3255()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_score", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037823_002D3256 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037823_002D3256()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("iou_loss", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037864_002D3257 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037864_002D3257()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037865_002D3258 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037865_002D3258()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037866_002D3259 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037866_002D3259()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037867_002D3260 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037867_002D3260()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037868_002D3261 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037868_002D3261()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037869_002D3262 : FSharpFunc<IEnumerable<double>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037869_002D3262()
			{
			}

			public override object Invoke(IEnumerable<double> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037870_002D3263 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037870_002D3263()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037871_002D3264 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037871_002D3264()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037872_002D3265 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037872_002D3265()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037965_002D3266 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037965_002D3266()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037953_002D3267 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037953_002D3267()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("cls_prob", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037954_002D3268 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037954_002D3268()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("bbox_pred", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037955_002D3269 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037955_002D3269()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("im_info", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037956_002D3270 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037956_002D3270()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("rpn_pre_nms_top_n", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037957_002D3271 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037957_002D3271()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("rpn_post_nms_top_n", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037958_002D3272 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037958_002D3272()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("threshold", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037959_002D3273 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037959_002D3273()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("rpn_min_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037960_002D3274 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037960_002D3274()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("scales", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037961_002D3275 : FSharpFunc<IEnumerable<double>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037961_002D3275()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<double> x)
			{
				return new Tuple<string, OpArg<Symbol>>("ratios", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037962_002D3276 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037962_002D3276()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("feature_stride", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037963_002D3277 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037963_002D3277()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_score", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037964_002D3278 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037964_002D3278()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("iou_loss", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004037992_002D3279 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004037992_002D3279()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038017_002D3280 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038017_002D3280()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038056_002D3281 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038056_002D3281()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038050_002D3282 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038050_002D3282()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038051_002D3283 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038051_002D3283()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("rois", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038052_002D3284 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038052_002D3284()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("spatial_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038053_002D3285 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038053_002D3285()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("output_dim", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038054_002D3286 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038054_002D3286()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("pooled_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038055_002D3287 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038055_002D3287()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("group_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038108_002D3288 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038108_002D3288()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038109_002D3289 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038109_002D3289()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038110_002D3290 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038110_002D3290()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038111_002D3291 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038111_002D3291()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038112_002D3292 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038112_002D3292()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038113_002D3293 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038113_002D3293()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038114_002D3294 : FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038114_002D3294()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.CudnnTune value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038115_002D3295 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038115_002D3295()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038116_002D3296 : FSharpFunc<GeneratedArgumentTypes.ConvolutionV1Layout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038116_002D3296()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ConvolutionV1Layout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038167_002D3297 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038167_002D3297()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038168_002D3298 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038168_002D3298()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038169_002D3299 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038169_002D3299()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038170_002D3300 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038170_002D3300()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038171_002D3301 : FSharpFunc<long, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038171_002D3301()
			{
			}

			public override object Invoke(long value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038172_002D3302 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038172_002D3302()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038173_002D3303 : FSharpFunc<GeneratedArgumentTypes.CudnnTune, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038173_002D3303()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.CudnnTune value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038174_002D3304 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038174_002D3304()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038175_002D3305 : FSharpFunc<GeneratedArgumentTypes.ConvolutionV1Layout, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038175_002D3305()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.ConvolutionV1Layout value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038305_002D3306 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038305_002D3306()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038291_002D3307 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038291_002D3307()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038292_002D3308 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038292_002D3308()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("weight", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038293_002D3309 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038293_002D3309()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("bias", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038294_002D3310 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038294_002D3310()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("kernel", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038295_002D3311 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038295_002D3311()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_filter", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038296_002D3312 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038296_002D3312()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("stride", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038297_002D3313 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038297_002D3313()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("dilate", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038298_002D3314 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038298_002D3314()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("pad", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038299_002D3315 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038299_002D3315()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("num_group", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038300_002D3316 : FSharpFunc<long, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038300_002D3316()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(long x)
			{
				return new Tuple<string, OpArg<Symbol>>("workspace", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038301_002D3317 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038301_002D3317()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("no_bias", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038302_002D3318 : FSharpFunc<GeneratedArgumentTypes.CudnnTune, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038302_002D3318()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.CudnnTune x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_tune", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038303_002D3319 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038303_002D3319()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038304_002D3320 : FSharpFunc<GeneratedArgumentTypes.ConvolutionV1Layout, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038304_002D3320()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.ConvolutionV1Layout x)
			{
				return new Tuple<string, OpArg<Symbol>>("layout", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038368_002D3321 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038368_002D3321()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038369_002D3322 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038369_002D3322()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038370_002D3323 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038370_002D3323()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038371_002D3324 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038371_002D3324()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038372_002D3325 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038372_002D3325()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038373_002D3326 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038373_002D3326()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038437_002D3327 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038437_002D3327()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038429_002D3328 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038429_002D3328()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data1", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038430_002D3329 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038430_002D3329()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data2", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038431_002D3330 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038431_002D3330()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("kernel_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038432_002D3331 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038432_002D3331()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("max_displacement", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038433_002D3332 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038433_002D3332()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("stride1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038434_002D3333 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038434_002D3333()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("stride2", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038435_002D3334 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038435_002D3334()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("pad_size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038436_002D3335 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038436_002D3335()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("is_multiply", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038446_002D3336 : FSharpTypeFunc
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038446_002D3336()
				: this()
			{
			}

			public override object Specialize<i>()
			{
				return FSharpList<i>.get_Empty();
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038466_002D3337 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038466_002D3337()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038481_002D3338 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038481_002D3338()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038505_002D3339 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038505_002D3339()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038502_002D3340 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038502_002D3340()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038503_002D3341 : FSharpFunc<GeneratedArgumentTypes.GridGeneratorTransformType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038503_002D3341()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.GridGeneratorTransformType x)
			{
				return new Tuple<string, OpArg<Symbol>>("transform_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038504_002D3342 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038504_002D3342()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("target_shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038570_002D3343 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038570_002D3343()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038599_002D3344 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038599_002D3344()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038595_002D3345 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038595_002D3345()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038596_002D3346 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038596_002D3346()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("gamma", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038597_002D3347 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038597_002D3347()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("beta", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038598_002D3348 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038598_002D3348()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038671_002D3349 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038671_002D3349()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038672_002D3350 : FSharpFunc<GeneratedArgumentTypes.L2NormalizationMode, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038672_002D3350()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.L2NormalizationMode value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038699_002D3351 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038699_002D3351()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038696_002D3352 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038696_002D3352()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038697_002D3353 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038697_002D3353()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("eps", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038698_002D3354 : FSharpFunc<GeneratedArgumentTypes.L2NormalizationMode, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038698_002D3354()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.L2NormalizationMode x)
			{
				return new Tuple<string, OpArg<Symbol>>("mode", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038742_002D3355 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038742_002D3355()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038743_002D3356 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038743_002D3356()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038744_002D3357 : FSharpFunc<GeneratedArgumentTypes.Normalization, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038744_002D3357()
			{
			}

			public override object Invoke(GeneratedArgumentTypes.Normalization value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038779_002D3358 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038779_002D3358()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038775_002D3359 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038775_002D3359()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038776_002D3360 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038776_002D3360()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("grad_scale", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038777_002D3361 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038777_002D3361()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("valid_thresh", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038778_002D3362 : FSharpFunc<GeneratedArgumentTypes.Normalization, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038778_002D3362()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.Normalization x)
			{
				return new Tuple<string, OpArg<Symbol>>("normalization", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038847_002D3363 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038847_002D3363()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038848_002D3364 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038848_002D3364()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038880_002D3365 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038880_002D3365()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038876_002D3366 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038876_002D3366()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038877_002D3367 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038877_002D3367()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sequence_length", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038878_002D3368 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038878_002D3368()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_sequence_length", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038879_002D3369 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038879_002D3369()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038969_002D3370 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038969_002D3370()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038970_002D3371 : FSharpFunc<int, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038970_002D3371()
			{
			}

			public override object Invoke(int value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039002_002D3372 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039002_002D3372()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038998_002D3373 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038998_002D3373()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004038999_002D3374 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004038999_002D3374()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("sequence_length", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039000_002D3375 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039000_002D3375()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_sequence_length", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039001_002D3376 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039001_002D3376()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("axis", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039028_002D3377 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039028_002D3377()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039029_002D3378 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039029_002D3378()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039053_002D3379 : FSharpFunc<IEnumerable<int>, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039053_002D3379()
			{
			}

			public override object Invoke(IEnumerable<int> value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039054_002D3380 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039054_002D3380()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039096_002D3381 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039096_002D3381()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039090_002D3382 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039090_002D3382()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039091_002D3383 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039091_002D3383()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("loc", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039092_002D3384 : FSharpFunc<GeneratedArgumentTypes.SpatialTransformerTransformType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039092_002D3384()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.SpatialTransformerTransformType x)
			{
				return new Tuple<string, OpArg<Symbol>>("transform_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039093_002D3385 : FSharpFunc<GeneratedArgumentTypes.SamplerType, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039093_002D3385()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(GeneratedArgumentTypes.SamplerType x)
			{
				return new Tuple<string, OpArg<Symbol>>("sampler_type", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039094_002D3386 : FSharpFunc<IEnumerable<int>, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039094_002D3386()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(IEnumerable<int> x)
			{
				return new Tuple<string, OpArg<Symbol>>("target_shape", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039095_002D3387 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039095_002D3387()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("cudnn_off", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039125_002D3388 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039125_002D3388()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039126_002D3389 : FSharpFunc<double, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039126_002D3389()
			{
			}

			public override object Invoke(double value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039127_002D3390 : FSharpFunc<bool, object>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039127_002D3390()
			{
			}

			public override object Invoke(bool value)
			{
				return value;
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039167_002D3391 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039167_002D3391()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039162_002D3392 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039162_002D3392()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("data", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039163_002D3393 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039163_002D3393()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("label", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039164_002D3394 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039164_002D3394()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("margin", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039165_002D3395 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039165_002D3395()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("regularization_coefficient", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039166_002D3396 : FSharpFunc<bool, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039166_002D3396()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(bool x)
			{
				return new Tuple<string, OpArg<Symbol>>("use_linear", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039189_002D3397 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039189_002D3397()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039188_002D3398 : FSharpFunc<double, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039188_002D3398()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(double x)
			{
				return new Tuple<string, OpArg<Symbol>>("src", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039298_002D3399 : FSharpFunc<FSharpOption<Tuple<string, OpArg<Symbol>>>, FSharpOption<Tuple<string, OpArg<Symbol>>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039298_002D3399()
			{
			}

			public override FSharpOption<Tuple<string, OpArg<Symbol>>> Invoke(FSharpOption<Tuple<string, OpArg<Symbol>>> x)
			{
				return Operators.Identity<FSharpOption<Tuple<string, OpArg<Symbol>>>>(x);
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039290_002D3400 : FSharpFunc<Symbol, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039290_002D3400()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(Symbol x)
			{
				return new Tuple<string, OpArg<Symbol>>("mean", OpArg<Symbol>.NewInput(x));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039291_002D3401 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039291_002D3401()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("index", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039292_002D3402 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039292_002D3402()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("x0", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039293_002D3403 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039293_002D3403()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("y0", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039294_002D3404 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039294_002D3404()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("x1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039295_002D3405 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039295_002D3405()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("y1", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039296_002D3406 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039296_002D3406()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("c", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}

		[Serializable]
		internal sealed class operatorArguments_004039297_002D3407 : FSharpFunc<int, Tuple<string, OpArg<Symbol>>>
		{
			[CompilerGenerated]
			[DebuggerNonUserCode]
			internal operatorArguments_004039297_002D3407()
			{
			}

			public override Tuple<string, OpArg<Symbol>> Invoke(int x)
			{
				return new Tuple<string, OpArg<Symbol>>("size", OpArg<Symbol>.NewParameter(FSharpOption<object>.Some((object)x)));
			}
		}
	}
}
